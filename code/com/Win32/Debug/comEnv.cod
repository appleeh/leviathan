; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comEnv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pWorkDir@@3PADA				; g_pWorkDir
PUBLIC	?g_pWorkDir2@@3PADA				; g_pWorkDir2
PUBLIC	?g_pSystem@@3PADA				; g_pSystem
PUBLIC	?g_pProcessName@@3PADA				; g_pProcessName
PUBLIC	?g_pProcessConfig@@3PADA			; g_pProcessConfig
_BSS	SEGMENT
?g_pWorkDir@@3PADA DD 01H DUP (?)			; g_pWorkDir
?g_pWorkDir2@@3PADA DD 01H DUP (?)			; g_pWorkDir2
?g_pSystem@@3PADA DD 01H DUP (?)			; g_pSystem
?g_pProcessName@@3PADA DD 01H DUP (?)			; g_pProcessName
?g_pProcessConfig@@3PADA DD 01H DUP (?)			; g_pProcessConfig
_BSS	ENDS
CONST	SEGMENT
$SG42244 DB	'SOLUTION_HOME', 00H
	ORG $+2
$SG42250 DB	'.ini', 00H
	ORG $+3
$SG42251 DB	'.ini', 00H
	ORG $+3
$SG42299 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42302 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42305 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42307 DB	'g_pSystem is NULL', 0aH, 00H
CONST	ENDS
PUBLIC	__tcsncpy
PUBLIC	__tcsrchr
PUBLIC	?_tcsrchr@@YAPADPADI@Z				; _tcsrchr
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?FullName@CEnv@@SAHPBDPAPAD@Z			; CEnv::FullName
PUBLIC	?setWorkingDir@CEnv@@SA_NPAD@Z			; CEnv::setWorkingDir
PUBLIC	?setWorkingDir2@CEnv@@SA_NH@Z			; CEnv::setWorkingDir2
PUBLIC	?initWorkingPath@CEnv@@SA_NXZ			; CEnv::initWorkingPath
PUBLIC	?initSystem@CEnv@@SAHPAD@Z			; CEnv::initSystem
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp___mbsrchr:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__getenv:PROC
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	_GetModuleFileNameExA@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
$T1 = -148						; size = 4
_szConfig$ = -140					; size = 128
_nLen$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDir$ = 8						; size = 4
?initSystem@CEnv@@SAHPAD@Z PROC				; CEnv::initSystem

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00009	57		 push	 edi
  0000a	8d bd 6c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-148]
  00010	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 153  : 	if (g_pSystem) return 1;

  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSystem@@3PADA, 0 ; g_pSystem
  0002d	74 0a		 je	 SHORT $LN2@initSystem
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	e9 d7 00 00 00	 jmp	 $LN1@initSystem
$LN2@initSystem:

; 154  : 
; 155  : 	int nLen;
; 156  : 	TCHAR szConfig[128];
; 157  : 	if (pDir) {

  00039	83 7d 08 00	 cmp	 DWORD PTR _pDir$[ebp], 0
  0003d	74 1d		 je	 SHORT $LN3@initSystem

; 158  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), pDir);

  0003f	8b 45 08	 mov	 eax, DWORD PTR _pDir$[ebp]
  00042	50		 push	 eax
  00043	68 00 00 00 00	 push	 OFFSET $SG42299
  00048	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szConfig$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _sprintf
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
  00057	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  0005a	eb 59		 jmp	 SHORT $LN4@initSystem
$LN3@initSystem:

; 159  : 	}
; 160  : 	else if (g_pWorkDir) {

  0005c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  00063	74 20		 je	 SHORT $LN5@initSystem

; 161  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  00065	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0006b	52		 push	 edx
  0006c	68 00 00 00 00	 push	 OFFSET $SG42302
  00071	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szConfig$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _sprintf
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax

; 162  : 	}
; 163  : 	else {

  00083	eb 30		 jmp	 SHORT $LN4@initSystem
$LN5@initSystem:

; 164  : 		if (CEnv::initWorkingPath()) {

  00085	e8 00 00 00 00	 call	 ?initWorkingPath@CEnv@@SA_NXZ ; CEnv::initWorkingPath
  0008a	0f b6 c8	 movzx	 ecx, al
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 20		 je	 SHORT $LN7@initSystem

; 165  : 			nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  00091	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00097	52		 push	 edx
  00098	68 00 00 00 00	 push	 OFFSET $SG42305
  0009d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szConfig$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 _sprintf
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ac	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  000af	eb 04		 jmp	 SHORT $LN4@initSystem
$LN7@initSystem:

; 166  : 		}
; 167  : 		else return 0;

  000b1	33 c0		 xor	 eax, eax
  000b3	eb 5b		 jmp	 SHORT $LN1@initSystem
$LN4@initSystem:

; 168  : 	}
; 169  : 	g_pSystem = new (std::nothrow) TCHAR[nLen + 1];

  000b5	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000ba	8b 4d f8	 mov	 ecx, DWORD PTR _nLen$[ebp]
  000bd	83 c1 01	 add	 ecx, 1
  000c0	51		 push	 ecx
  000c1	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  000c6	83 c4 08	 add	 esp, 8
  000c9	89 85 6c ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000cf	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  000d5	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_pSystem@@3PADA, edx ; g_pSystem

; 170  : 	if (!g_pSystem) {

  000db	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSystem@@3PADA, 0 ; g_pSystem
  000e2	75 11		 jne	 SHORT $LN9@initSystem

; 171  : 		printf("g_pSystem is NULL\n");

  000e4	68 00 00 00 00	 push	 OFFSET $SG42307
  000e9	e8 00 00 00 00	 call	 _printf
  000ee	83 c4 04	 add	 esp, 4

; 172  : 		return 0;

  000f1	33 c0		 xor	 eax, eax
  000f3	eb 1b		 jmp	 SHORT $LN1@initSystem
$LN9@initSystem:

; 173  : 	}
; 174  : 	_tcscpy(g_pSystem, szConfig);

  000f5	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szConfig$[ebp]
  000fb	50		 push	 eax
  000fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pSystem@@3PADA ; g_pSystem
  00102	51		 push	 ecx
  00103	e8 00 00 00 00	 call	 _strcpy
  00108	83 c4 08	 add	 esp, 8

; 175  : 
; 176  : 	return 1;

  0010b	b8 01 00 00 00	 mov	 eax, 1
$LN1@initSystem:

; 177  : }

  00110	52		 push	 edx
  00111	8b cd		 mov	 ecx, ebp
  00113	50		 push	 eax
  00114	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@initSystem
  0011a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0011f	58		 pop	 eax
  00120	5a		 pop	 edx
  00121	5f		 pop	 edi
  00122	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00125	33 cd		 xor	 ecx, ebp
  00127	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012c	81 c4 94 00 00
	00		 add	 esp, 148		; 00000094H
  00132	3b ec		 cmp	 ebp, esp
  00134	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c3		 ret	 0
  0013d	0f 1f 00	 npad	 3
$LN13@initSystem:
  00140	01 00 00 00	 DD	 1
  00144	00 00 00 00	 DD	 $LN12@initSystem
$LN12@initSystem:
  00148	74 ff ff ff	 DD	 -140			; ffffff74H
  0014c	80 00 00 00	 DD	 128			; 00000080H
  00150	00 00 00 00	 DD	 $LN11@initSystem
$LN11@initSystem:
  00154	73		 DB	 115			; 00000073H
  00155	7a		 DB	 122			; 0000007aH
  00156	43		 DB	 67			; 00000043H
  00157	6f		 DB	 111			; 0000006fH
  00158	6e		 DB	 110			; 0000006eH
  00159	66		 DB	 102			; 00000066H
  0015a	69		 DB	 105			; 00000069H
  0015b	67		 DB	 103			; 00000067H
  0015c	00		 DB	 0
?initSystem@CEnv@@SAHPAD@Z ENDP				; CEnv::initSystem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
$T1 = -172						; size = 4
$T2 = -168						; size = 4
$T3 = -164						; size = 4
_pRear$4 = -160						; size = 4
_pDot$ = -156						; size = 4
_pPos$ = -152						; size = 4
_nLen2$ = -148						; size = 4
_nLen$ = -144						; size = 4
_szBuf$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
?initWorkingPath@CEnv@@SA_NXZ PROC			; CEnv::initWorkingPath

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 00 00
	00		 sub	 esp, 172		; 000000acH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 54 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-172]
  00011	b9 2b 00 00 00	 mov	 ecx, 43			; 0000002bH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 38   : 	if (g_pWorkDir) return true;

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  0002e	74 07		 je	 SHORT $LN2@initWorkin
  00030	b0 01		 mov	 al, 1
  00032	e9 76 02 00 00	 jmp	 $LN1@initWorkin
$LN2@initWorkin:

; 39   : 
; 40   : 	// setting working path
; 41   : 
; 42   : 	TCHAR szBuf[128];
; 43   : 	size_t nLen = 0, nLen2=0;

  00037	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nLen$[ebp], 0
  00041	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nLen2$[ebp], 0

; 44   : 	TCHAR *pPos = _tgetenv(SOLUTION_HOME);

  0004b	8b f4		 mov	 esi, esp
  0004d	68 00 00 00 00	 push	 OFFSET $SG42244
  00052	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getenv
  00058	83 c4 04	 add	 esp, 4
  0005b	3b f4		 cmp	 esi, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pPos$[ebp], eax

; 45   : 	TCHAR *pDot;
; 46   : 	if (pPos) {

  00068	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _pPos$[ebp], 0
  0006f	74 1a		 je	 SHORT $LN3@initWorkin

; 47   : 		nLen = _tcslen(pPos);

  00071	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _pPos$[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 _strlen
  0007d	83 c4 04	 add	 esp, 4
  00080	89 85 70 ff ff
	ff		 mov	 DWORD PTR _nLen$[ebp], eax

; 48   : 	}
; 49   : 	else {

  00086	e9 84 01 00 00	 jmp	 $LN4@initWorkin
$LN3@initWorkin:

; 50   : 
; 51   : #ifdef WIN32
; 52   : 		nLen = GetModuleFileNameEx(GetCurrentProcess(), NULL, szBuf, 128);

  0008b	68 80 00 00 00	 push	 128			; 00000080H
  00090	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00096	51		 push	 ecx
  00097	6a 00		 push	 0
  00099	8b f4		 mov	 esi, esp
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _GetModuleFileNameExA@16
  000ae	89 85 70 ff ff
	ff		 mov	 DWORD PTR _nLen$[ebp], eax

; 53   : 		//HANDLE process_handle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION,FALSE,GetCurrentProcessId());
; 54   : 		//DWORD BufSize;
; 55   : 		//if (process_handle) {
; 56   : 		//	if (QueryFullProcessImageName(process_handle, 0, szBuf, &BufSize)) {
; 57   : 		//		nLen = BufSize;
; 58   : 		//	}
; 59   : 		//	else {
; 60   : 		//		//gs_cLogger.DebugLog(LEVEL_ERROR, "QueryFullProcessImageName is FAIL!");
; 61   : 		//	}
; 62   : 		//	CloseHandle(process_handle);			
; 63   : 		//}
; 64   : 
; 65   : #else
; 66   : 		if (argv0) {
; 67   : 			if (realpath(argv0, szBuf))	nLen = strlen(szBuf);
; 68   : 			else gs_cLogger.DebugLog(LEVEL_ERROR, "realpath [%s]", argv0);
; 69   : 		}
; 70   : 		else {
; 71   : 			nLen = GetProcessFullName(szBuf);
; 72   : 		}
; 73   : #endif
; 74   : 		if (nLen) {

  000b4	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _nLen$[ebp], 0
  000bb	0f 84 4e 01 00
	00		 je	 $LN4@initWorkin

; 75   : 			g_pProcessConfig = new (std::nothrow) TCHAR[nLen + 8];

  000c1	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000c6	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _nLen$[ebp]
  000cc	83 c2 08	 add	 edx, 8
  000cf	52		 push	 edx
  000d0	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  000d5	83 c4 08	 add	 esp, 8
  000d8	89 85 5c ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  000de	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  000e4	a3 00 00 00 00	 mov	 DWORD PTR ?g_pProcessConfig@@3PADA, eax ; g_pProcessConfig

; 76   : 			_tcscpy(g_pProcessConfig, szBuf);

  000e9	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000ef	51		 push	 ecx
  000f0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pProcessConfig@@3PADA ; g_pProcessConfig
  000f6	52		 push	 edx
  000f7	e8 00 00 00 00	 call	 _strcpy
  000fc	83 c4 08	 add	 esp, 8

; 77   : 			pDot = _tcsrchr(g_pProcessConfig, '.');

  000ff	6a 2e		 push	 46			; 0000002eH
  00101	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pProcessConfig@@3PADA ; g_pProcessConfig
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  0010c	83 c4 08	 add	 esp, 8
  0010f	89 85 64 ff ff
	ff		 mov	 DWORD PTR _pDot$[ebp], eax

; 78   : 			if(pDot) _tcscpy(pDot, _T(".ini"));

  00115	83 bd 64 ff ff
	ff 00		 cmp	 DWORD PTR _pDot$[ebp], 0
  0011c	74 16		 je	 SHORT $LN6@initWorkin
  0011e	68 00 00 00 00	 push	 OFFSET $SG42250
  00123	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pDot$[ebp]
  00129	51		 push	 ecx
  0012a	e8 00 00 00 00	 call	 _strcpy
  0012f	83 c4 08	 add	 esp, 8
  00132	eb 1a		 jmp	 SHORT $LN7@initWorkin
$LN6@initWorkin:

; 79   : 			else _stprintf(g_pProcessConfig+nLen, _T(".ini"));

  00134	68 00 00 00 00	 push	 OFFSET $SG42251
  00139	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pProcessConfig@@3PADA ; g_pProcessConfig
  0013f	03 95 70 ff ff
	ff		 add	 edx, DWORD PTR _nLen$[ebp]
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 _sprintf
  0014b	83 c4 08	 add	 esp, 8
$LN7@initWorkin:

; 80   : 
; 81   : 			pPos = _tcsrchr(szBuf, g_s);

  0014e	6a 5c		 push	 92			; 0000005cH
  00150	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  0015c	83 c4 08	 add	 esp, 8
  0015f	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pPos$[ebp], eax

; 82   : 			nLen = pPos - szBuf + 1;

  00165	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _pPos$[ebp]
  0016b	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _szBuf$[ebp]
  00171	2b ca		 sub	 ecx, edx
  00173	83 c1 01	 add	 ecx, 1
  00176	89 8d 70 ff ff
	ff		 mov	 DWORD PTR _nLen$[ebp], ecx

; 83   : 			pPos++;

  0017c	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _pPos$[ebp]
  00182	83 c0 01	 add	 eax, 1
  00185	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pPos$[ebp], eax

; 84   : 			nLen2 = _tcslen(pPos);

  0018b	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _pPos$[ebp]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 _strlen
  00197	83 c4 04	 add	 esp, 4
  0019a	89 85 6c ff ff
	ff		 mov	 DWORD PTR _nLen2$[ebp], eax

; 85   : 			g_pProcessName = new (std::nothrow) TCHAR[nLen2 + 1];

  001a0	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  001a5	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _nLen2$[ebp]
  001ab	83 c2 01	 add	 edx, 1
  001ae	52		 push	 edx
  001af	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  001b4	83 c4 08	 add	 esp, 8
  001b7	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  001bd	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  001c3	a3 00 00 00 00	 mov	 DWORD PTR ?g_pProcessName@@3PADA, eax ; g_pProcessName

; 86   : 			if (g_pProcessName) _tcscpy(g_pProcessName, pPos);

  001c8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pProcessName@@3PADA, 0 ; g_pProcessName
  001cf	74 16		 je	 SHORT $LN8@initWorkin
  001d1	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _pPos$[ebp]
  001d7	51		 push	 ecx
  001d8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pProcessName@@3PADA ; g_pProcessName
  001de	52		 push	 edx
  001df	e8 00 00 00 00	 call	 _strcpy
  001e4	83 c4 08	 add	 esp, 8
$LN8@initWorkin:

; 87   : 			pDot = _tcsrchr(g_pProcessName, '.');

  001e7	6a 2e		 push	 46			; 0000002eH
  001e9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pProcessName@@3PADA ; g_pProcessName
  001ee	50		 push	 eax
  001ef	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  001f4	83 c4 08	 add	 esp, 8
  001f7	89 85 64 ff ff
	ff		 mov	 DWORD PTR _pDot$[ebp], eax

; 88   : 			if (pPos) *pDot = 0;

  001fd	83 bd 68 ff ff
	ff 00		 cmp	 DWORD PTR _pPos$[ebp], 0
  00204	74 09		 je	 SHORT $LN4@initWorkin
  00206	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _pDot$[ebp]
  0020c	c6 01 00	 mov	 BYTE PTR [ecx], 0
$LN4@initWorkin:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if (nLen) {

  0020f	83 bd 70 ff ff
	ff 00		 cmp	 DWORD PTR _nLen$[ebp], 0
  00216	0f 84 8f 00 00
	00		 je	 $LN10@initWorkin

; 93   : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen];

  0021c	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00221	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _nLen$[ebp]
  00227	52		 push	 edx
  00228	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0022d	83 c4 08	 add	 esp, 8
  00230	89 85 54 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00236	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0023c	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir@@3PADA, eax ; g_pWorkDir

; 94   : 		if (!g_pWorkDir) {

  00241	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  00248	75 04		 jne	 SHORT $LN11@initWorkin

; 95   : 			//gs_cLogger.Log_Debug(LOG_ERROR, "new g_pWorkDir");
; 96   : 			return false;

  0024a	32 c0		 xor	 al, al
  0024c	eb 5f		 jmp	 SHORT $LN1@initWorkin
$LN11@initWorkin:

; 97   : 		}
; 98   : 		TCHAR *pRear = _tcsrchr((TCHAR *)szBuf, g_s);

  0024e	6a 5c		 push	 92			; 0000005cH
  00250	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00256	51		 push	 ecx
  00257	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  0025c	83 c4 08	 add	 esp, 8
  0025f	89 85 60 ff ff
	ff		 mov	 DWORD PTR _pRear$4[ebp], eax

; 99   : 		nLen = pRear - szBuf + 1;

  00265	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _pRear$4[ebp]
  0026b	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00271	2b d0		 sub	 edx, eax
  00273	83 c2 01	 add	 edx, 1
  00276	89 95 70 ff ff
	ff		 mov	 DWORD PTR _nLen$[ebp], edx

; 100  : 		_tcsncpy(g_pWorkDir, szBuf, nLen);

  0027c	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _nLen$[ebp]
  00282	51		 push	 ecx
  00283	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _szBuf$[ebp]
  00289	52		 push	 edx
  0028a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 __tcsncpy
  00295	83 c4 0c	 add	 esp, 12			; 0000000cH

; 101  : 		g_pWorkDir[nLen] = 0;

  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0029e	03 8d 70 ff ff
	ff		 add	 ecx, DWORD PTR _nLen$[ebp]
  002a4	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 102  : 		return true;

  002a7	b0 01		 mov	 al, 1
  002a9	eb 02		 jmp	 SHORT $LN1@initWorkin
$LN10@initWorkin:

; 103  : 	}
; 104  : 	
; 105  : 	return false;

  002ab	32 c0		 xor	 al, al
$LN1@initWorkin:

; 106  : }

  002ad	52		 push	 edx
  002ae	8b cd		 mov	 ecx, ebp
  002b0	50		 push	 eax
  002b1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@initWorkin
  002b7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002bc	58		 pop	 eax
  002bd	5a		 pop	 edx
  002be	5f		 pop	 edi
  002bf	5e		 pop	 esi
  002c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c3	33 cd		 xor	 ecx, ebp
  002c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ca	81 c4 ac 00 00
	00		 add	 esp, 172		; 000000acH
  002d0	3b ec		 cmp	 ebp, esp
  002d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002d7	8b e5		 mov	 esp, ebp
  002d9	5d		 pop	 ebp
  002da	c3		 ret	 0
  002db	90		 npad	 1
$LN15@initWorkin:
  002dc	01 00 00 00	 DD	 1
  002e0	00 00 00 00	 DD	 $LN14@initWorkin
$LN14@initWorkin:
  002e4	78 ff ff ff	 DD	 -136			; ffffff78H
  002e8	80 00 00 00	 DD	 128			; 00000080H
  002ec	00 00 00 00	 DD	 $LN13@initWorkin
$LN13@initWorkin:
  002f0	73		 DB	 115			; 00000073H
  002f1	7a		 DB	 122			; 0000007aH
  002f2	42		 DB	 66			; 00000042H
  002f3	75		 DB	 117			; 00000075H
  002f4	66		 DB	 102			; 00000066H
  002f5	00		 DB	 0
?initWorkingPath@CEnv@@SA_NXZ ENDP			; CEnv::initWorkingPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
tv71 = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_i$ = -12						; size = 4
_pRear$ = -8						; size = 4
_nLen$ = -4						; size = 4
_upCount$ = 8						; size = 4
?setWorkingDir2@CEnv@@SA_NH@Z PROC			; CEnv::setWorkingDir2

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 129  : 	if (!g_pWorkDir) {

  0001d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  00024	75 07		 jne	 SHORT $LN5@setWorking

; 130  : 		return false;

  00026	32 c0		 xor	 al, al
  00028	e9 0c 01 00 00	 jmp	 $LN1@setWorking
$LN5@setWorking:

; 131  : 	}
; 132  : 	size_t	nLen = (int)_tcslen(g_pWorkDir);

  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 _strlen
  00038	83 c4 04	 add	 esp, 4
  0003b	89 45 fc	 mov	 DWORD PTR _nLen$[ebp], eax

; 133  : 	TCHAR *pRear = g_pWorkDir;

  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00044	89 4d f8	 mov	 DWORD PTR _pRear$[ebp], ecx

; 134  : 	if (g_pWorkDir2) delete g_pWorkDir2;

  00047	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir2@@3PADA, 0 ; g_pWorkDir2
  0004e	74 39		 je	 SHORT $LN6@setWorking
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00056	89 55 f0	 mov	 DWORD PTR $T2[ebp], edx
  00059	6a 01		 push	 1
  0005b	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00064	83 c4 08	 add	 esp, 8
  00067	83 7d f0 00	 cmp	 DWORD PTR $T2[ebp], 0
  0006b	75 09		 jne	 SHORT $LN8@setWorking
  0006d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00074	eb 13		 jmp	 SHORT $LN6@setWorking
$LN8@setWorking:
  00076	c7 05 00 00 00
	00 23 81 00 00	 mov	 DWORD PTR ?g_pWorkDir2@@3PADA, 33059 ; g_pWorkDir2, 00008123H
  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00086	89 4d e8	 mov	 DWORD PTR tv71[ebp], ecx
$LN6@setWorking:

; 135  : 	g_pWorkDir2 = new TCHAR[nLen + 1];

  00089	8b 55 fc	 mov	 edx, DWORD PTR _nLen$[ebp]
  0008c	83 c2 01	 add	 edx, 1
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00095	83 c4 04	 add	 esp, 4
  00098	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  0009b	8b 45 ec	 mov	 eax, DWORD PTR $T1[ebp]
  0009e	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir2@@3PADA, eax ; g_pWorkDir2

; 136  : 	_tcscpy(g_pWorkDir2, g_pWorkDir);

  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  000a9	51		 push	 ecx
  000aa	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  000b0	52		 push	 edx
  000b1	e8 00 00 00 00	 call	 _strcpy
  000b6	83 c4 08	 add	 esp, 8

; 137  : 
; 138  : 	int i;
; 139  : 	for (i = 0; i < upCount; i++) 

  000b9	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c0	eb 09		 jmp	 SHORT $LN4@setWorking
$LN2@setWorking:
  000c2	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000c5	83 c0 01	 add	 eax, 1
  000c8	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@setWorking:
  000cb	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000ce	3b 4d 08	 cmp	 ecx, DWORD PTR _upCount$[ebp]
  000d1	7d 1c		 jge	 SHORT $LN3@setWorking

; 140  : 	{
; 141  : 		pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  000d3	6a 5c		 push	 92			; 0000005cH
  000d5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  000db	52		 push	 edx
  000dc	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  000e1	83 c4 08	 add	 esp, 8
  000e4	89 45 f8	 mov	 DWORD PTR _pRear$[ebp], eax

; 142  : 		*pRear = 0;

  000e7	8b 45 f8	 mov	 eax, DWORD PTR _pRear$[ebp]
  000ea	c6 00 00	 mov	 BYTE PTR [eax], 0

; 143  : 	}

  000ed	eb d3		 jmp	 SHORT $LN2@setWorking
$LN3@setWorking:

; 144  : 	pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  000ef	6a 5c		 push	 92			; 0000005cH
  000f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  000fd	83 c4 08	 add	 esp, 8
  00100	89 45 f8	 mov	 DWORD PTR _pRear$[ebp], eax

; 145  : 	nLen = pRear - g_pWorkDir2 + 1;

  00103	8b 55 f8	 mov	 edx, DWORD PTR _pRear$[ebp]
  00106	2b 15 00 00 00
	00		 sub	 edx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  0010c	83 c2 01	 add	 edx, 1
  0010f	89 55 fc	 mov	 DWORD PTR _nLen$[ebp], edx

; 146  : 
; 147  : 	_tcsncpy(g_pWorkDir2, g_pWorkDir, nLen); g_pWorkDir2[nLen] = 0;

  00112	8b 45 fc	 mov	 eax, DWORD PTR _nLen$[ebp]
  00115	50		 push	 eax
  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0011c	51		 push	 ecx
  0011d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00123	52		 push	 edx
  00124	e8 00 00 00 00	 call	 __tcsncpy
  00129	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00131	03 45 fc	 add	 eax, DWORD PTR _nLen$[ebp]
  00134	c6 00 00	 mov	 BYTE PTR [eax], 0

; 148  : 	return true;

  00137	b0 01		 mov	 al, 1
$LN1@setWorking:

; 149  : }

  00139	83 c4 18	 add	 esp, 24			; 00000018H
  0013c	3b ec		 cmp	 ebp, esp
  0013e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00143	8b e5		 mov	 esp, ebp
  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
?setWorkingDir2@CEnv@@SA_NH@Z ENDP			; CEnv::setWorkingDir2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
tv71 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_nLen$3 = -4						; size = 4
_pPullPath$ = 8						; size = 4
?setWorkingDir@CEnv@@SA_NPAD@Z PROC			; CEnv::setWorkingDir

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 111  : 	if (pPullPath) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _pPullPath$[ebp], 0
  0001b	0f 84 9b 00 00
	00		 je	 $LN2@setWorking

; 112  : 		size_t	nLen = (int)_tcslen(pPullPath);

  00021	8b 45 08	 mov	 eax, DWORD PTR _pPullPath$[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 45 fc	 mov	 DWORD PTR _nLen$3[ebp], eax

; 113  : 		if (!nLen) return false;

  00030	83 7d fc 00	 cmp	 DWORD PTR _nLen$3[ebp], 0
  00034	75 07		 jne	 SHORT $LN3@setWorking
  00036	32 c0		 xor	 al, al
  00038	e9 81 00 00 00	 jmp	 $LN1@setWorking
$LN3@setWorking:

; 114  : 		if (g_pWorkDir) {

  0003d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  00044	74 36		 je	 SHORT $LN4@setWorking

; 115  : 			delete[] g_pWorkDir;

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0004c	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  0004f	8b 55 f8	 mov	 edx, DWORD PTR $T2[ebp]
  00052	52		 push	 edx
  00053	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00058	83 c4 04	 add	 esp, 4
  0005b	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0005f	75 09		 jne	 SHORT $LN7@setWorking
  00061	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
  00068	eb 12		 jmp	 SHORT $LN4@setWorking
$LN7@setWorking:
  0006a	c7 05 00 00 00
	00 23 81 00 00	 mov	 DWORD PTR ?g_pWorkDir@@3PADA, 33059 ; g_pWorkDir, 00008123H
  00074	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00079	89 45 f0	 mov	 DWORD PTR tv71[ebp], eax
$LN4@setWorking:

; 116  : 		}
; 117  : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen + 2];

  0007c	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00081	8b 4d fc	 mov	 ecx, DWORD PTR _nLen$3[ebp]
  00084	83 c1 02	 add	 ecx, 2
  00087	51		 push	 ecx
  00088	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0008d	83 c4 08	 add	 esp, 8
  00090	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00093	8b 55 f4	 mov	 edx, DWORD PTR $T1[ebp]
  00096	89 15 00 00 00
	00		 mov	 DWORD PTR ?g_pWorkDir@@3PADA, edx ; g_pWorkDir

; 118  : 
; 119  : 		if (g_pWorkDir == NULL) return false;

  0009c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  000a3	75 04		 jne	 SHORT $LN5@setWorking
  000a5	32 c0		 xor	 al, al
  000a7	eb 15		 jmp	 SHORT $LN1@setWorking
$LN5@setWorking:

; 120  : 
; 121  : 		_tcscpy(g_pWorkDir, pPullPath);

  000a9	8b 45 08	 mov	 eax, DWORD PTR _pPullPath$[ebp]
  000ac	50		 push	 eax
  000ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  000b3	51		 push	 ecx
  000b4	e8 00 00 00 00	 call	 _strcpy
  000b9	83 c4 08	 add	 esp, 8
$LN2@setWorking:

; 122  : 	}
; 123  : 
; 124  : 	return true;

  000bc	b0 01		 mov	 al, 1
$LN1@setWorking:

; 125  : }

  000be	83 c4 10	 add	 esp, 16			; 00000010H
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
?setWorkingDir@CEnv@@SA_NPAD@Z ENDP			; CEnv::setWorkingDir
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_nLen$ = -4						; size = 4
_fName$ = 8						; size = 4
_fPath$ = 12						; size = 4
?FullName@CEnv@@SAHPBDPAPAD@Z PROC			; CEnv::FullName

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 23   : 	*fPath = NULL;

  00015	8b 45 0c	 mov	 eax, DWORD PTR _fPath$[ebp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 24   : 	int	nLen;
; 25   : 
; 26   : 	nLen = (int)_tcslen(g_pWorkDir) + (int)_tcslen(fName) + 1;

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00024	51		 push	 ecx
  00025	e8 00 00 00 00	 call	 _strlen
  0002a	83 c4 04	 add	 esp, 4
  0002d	8b f0		 mov	 esi, eax
  0002f	8b 55 08	 mov	 edx, DWORD PTR _fName$[ebp]
  00032	52		 push	 edx
  00033	e8 00 00 00 00	 call	 _strlen
  00038	83 c4 04	 add	 esp, 4
  0003b	8d 44 06 01	 lea	 eax, DWORD PTR [esi+eax+1]
  0003f	89 45 fc	 mov	 DWORD PTR _nLen$[ebp], eax

; 27   : 	*fPath = new (std::nothrow) TCHAR[nLen];

  00042	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _nLen$[ebp]
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00056	8b 55 0c	 mov	 edx, DWORD PTR _fPath$[ebp]
  00059	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]
  0005c	89 02		 mov	 DWORD PTR [edx], eax

; 28   : 
; 29   : 	if (*fPath) {

  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _fPath$[ebp]
  00061	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00064	74 1b		 je	 SHORT $LN2@FullName

; 30   : 		nLen = _stprintf(*fPath, g_pWorkDir, fName);

  00066	8b 55 08	 mov	 edx, DWORD PTR _fName$[ebp]
  00069	52		 push	 edx
  0006a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0006f	50		 push	 eax
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _fPath$[ebp]
  00073	8b 11		 mov	 edx, DWORD PTR [ecx]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 _sprintf
  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007e	89 45 fc	 mov	 DWORD PTR _nLen$[ebp], eax
$LN2@FullName:

; 31   : 	}
; 32   : 	return nLen;

  00081	8b 45 fc	 mov	 eax, DWORD PTR _nLen$[ebp]

; 33   : }

  00084	5e		 pop	 esi
  00085	83 c4 08	 add	 esp, 8
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?FullName@CEnv@@SAHPBDPAPAD@Z ENDP			; CEnv::FullName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  00014	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00019	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00022	51		 push	 ecx
  00023	6a 00		 push	 0
  00025	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 __vsprintf_l
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1787 :     return _Result;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1788 : }

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	6a ff		 push	 -1
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vsnprintf_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1459 :     #pragma warning(pop)
; 1460 : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	83 ca 01	 or	 edx, 1
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00040	83 c4 1c	 add	 esp, 28			; 0000001cH
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  0004d	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00051	7d 09		 jge	 SHORT $LN3@vsnprintf_
  00053	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0005a	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005f	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
$LN4@vsnprintf_:
  00062	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1391 : }

  00065	5e		 pop	 esi
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  00015	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  0001a	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001d	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00029	52		 push	 edx
  0002a	8b f4		 mov	 esi, esp
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 __vfprintf_l
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

  00051	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 957  : }

  00054	5e		 pop	 esi
  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 640  : }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPADPADI@Z
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 4
?_tcsrchr@@YAPADPADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __C$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __S$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 __tcsrchr
  00010	83 c4 08	 add	 esp, 8
  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_tcsrchr@@YAPADPADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsrchr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __c$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsrchr
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Source$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __Dst$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1546 : #pragma warning(pop)
; 1547 : }

  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsncpy ENDP
_TEXT	ENDS
END
