; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comQSort.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?SortEx@@YAXPAUSTSortData@@H@Z			; SortEx
EXTRN	_memcpy:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqsort.cpp
_TEXT	SEGMENT
_stVal2$ = -64						; size = 8
_stVal1$ = -48						; size = 8
_nSize$ = -36						; size = 4
_j$ = -32						; size = 4
_i$ = -28						; size = 4
_nMax$ = -24						; size = 4
_nMin$ = -20						; size = 4
_right$ = -16						; size = 4
_left$ = -12						; size = 4
_loopcnt$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_arr$ = 8						; size = 4
_nCount$ = 12						; size = 4
?SortEx@@YAXPAUSTSortData@@H@Z PROC			; SortEx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d bc	 lea	 edi, DWORD PTR [ebp-68]
  0000b	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 6    : 	int loopcnt = nCount >> 1, left, right = nCount - 1;

  00021	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00024	d1 f8		 sar	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _loopcnt$[ebp], eax
  00029	8b 4d 0c	 mov	 ecx, DWORD PTR _nCount$[ebp]
  0002c	83 e9 01	 sub	 ecx, 1
  0002f	89 4d f0	 mov	 DWORD PTR _right$[ebp], ecx

; 7    : 	int nMin, nMax;
; 8    : 	int i, j, nSize = sizeof(STSortData);

  00032	c7 45 dc 08 00
	00 00		 mov	 DWORD PTR _nSize$[ebp], 8

; 9    : 	STSortData stVal1, stVal2;
; 10   : 
; 11   : 	for (i = 0; i < loopcnt; i++)

  00039	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00040	eb 09		 jmp	 SHORT $LN4@SortEx
$LN2@SortEx:
  00042	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  00045	83 c2 01	 add	 edx, 1
  00048	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx
$LN4@SortEx:
  0004b	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  0004e	3b 45 f8	 cmp	 eax, DWORD PTR _loopcnt$[ebp]
  00051	0f 8d 61 03 00
	00		 jge	 $LN1@SortEx

; 12   : 	{
; 13   : 		left = i;

  00057	8b 4d e4	 mov	 ecx, DWORD PTR _i$[ebp]
  0005a	89 4d f4	 mov	 DWORD PTR _left$[ebp], ecx

; 14   : 		//------------------------------------
; 15   : 		nMin = left; nMax = left;

  0005d	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  00060	89 55 ec	 mov	 DWORD PTR _nMin$[ebp], edx
  00063	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  00066	89 45 e8	 mov	 DWORD PTR _nMax$[ebp], eax

; 16   : 		for (j = left + 1; j <= right; j++) {

  00069	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  0006c	83 c1 01	 add	 ecx, 1
  0006f	89 4d e0	 mov	 DWORD PTR _j$[ebp], ecx
  00072	eb 09		 jmp	 SHORT $LN7@SortEx
$LN5@SortEx:
  00074	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  00077	83 c2 01	 add	 edx, 1
  0007a	89 55 e0	 mov	 DWORD PTR _j$[ebp], edx
$LN7@SortEx:
  0007d	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  00080	3b 45 f0	 cmp	 eax, DWORD PTR _right$[ebp]
  00083	7f 38		 jg	 SHORT $LN6@SortEx

; 17   : 			if (arr[nMin].address > arr[j].address)nMin = j;

  00085	8b 4d ec	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00088	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  0008b	8b 45 e0	 mov	 eax, DWORD PTR _j$[ebp]
  0008e	8b 75 08	 mov	 esi, DWORD PTR _arr$[ebp]
  00091	8b 0c ca	 mov	 ecx, DWORD PTR [edx+ecx*8]
  00094	3b 0c c6	 cmp	 ecx, DWORD PTR [esi+eax*8]
  00097	76 08		 jbe	 SHORT $LN8@SortEx
  00099	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  0009c	89 55 ec	 mov	 DWORD PTR _nMin$[ebp], edx
  0009f	eb 1a		 jmp	 SHORT $LN9@SortEx
$LN8@SortEx:

; 18   : 			else if (arr[nMax].address < arr[j].address)nMax = j;

  000a1	8b 45 e8	 mov	 eax, DWORD PTR _nMax$[ebp]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  000a7	8b 55 e0	 mov	 edx, DWORD PTR _j$[ebp]
  000aa	8b 75 08	 mov	 esi, DWORD PTR _arr$[ebp]
  000ad	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  000b0	3b 04 d6	 cmp	 eax, DWORD PTR [esi+edx*8]
  000b3	73 06		 jae	 SHORT $LN9@SortEx
  000b5	8b 4d e0	 mov	 ecx, DWORD PTR _j$[ebp]
  000b8	89 4d e8	 mov	 DWORD PTR _nMax$[ebp], ecx
$LN9@SortEx:

; 19   : 		}

  000bb	eb b7		 jmp	 SHORT $LN5@SortEx
$LN6@SortEx:

; 20   : 		if (nMin == nMax) return;

  000bd	8b 55 ec	 mov	 edx, DWORD PTR _nMin$[ebp]
  000c0	3b 55 e8	 cmp	 edx, DWORD PTR _nMax$[ebp]
  000c3	75 05		 jne	 SHORT $LN11@SortEx
  000c5	e9 ee 02 00 00	 jmp	 $LN1@SortEx
$LN11@SortEx:

; 21   : 
; 22   : 		if (left == nMax) {

  000ca	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  000cd	3b 45 e8	 cmp	 eax, DWORD PTR _nMax$[ebp]
  000d0	0f 85 d1 00 00
	00		 jne	 $LN12@SortEx

; 23   : 			memcpy(&stVal2, &arr[nMax], nSize);

  000d6	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  000d9	51		 push	 ecx
  000da	8b 55 e8	 mov	 edx, DWORD PTR _nMax$[ebp]
  000dd	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  000e0	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  000e3	51		 push	 ecx
  000e4	8d 55 c0	 lea	 edx, DWORD PTR _stVal2$[ebp]
  000e7	52		 push	 edx
  000e8	e8 00 00 00 00	 call	 _memcpy
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 24   : 			if (right == nMin) {

  000f0	8b 45 f0	 mov	 eax, DWORD PTR _right$[ebp]
  000f3	3b 45 ec	 cmp	 eax, DWORD PTR _nMin$[ebp]
  000f6	75 3c		 jne	 SHORT $LN14@SortEx

; 25   : 				memcpy(&arr[left], &arr[nMin], nSize);

  000f8	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  000fb	51		 push	 ecx
  000fc	8b 55 ec	 mov	 edx, DWORD PTR _nMin$[ebp]
  000ff	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  00102	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00105	51		 push	 ecx
  00106	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  00109	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  0010c	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  0010f	51		 push	 ecx
  00110	e8 00 00 00 00	 call	 _memcpy
  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 26   : 				memcpy(&arr[right], &stVal2, nSize);

  00118	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  0011b	52		 push	 edx
  0011c	8d 45 c0	 lea	 eax, DWORD PTR _stVal2$[ebp]
  0011f	50		 push	 eax
  00120	8b 4d f0	 mov	 ecx, DWORD PTR _right$[ebp]
  00123	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  00126	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _memcpy
  0012f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : 			}
; 28   : 			else {

  00132	eb 6e		 jmp	 SHORT $LN15@SortEx
$LN14@SortEx:

; 29   : 				memcpy(&stVal1, &arr[right], nSize);

  00134	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00137	51		 push	 ecx
  00138	8b 55 f0	 mov	 edx, DWORD PTR _right$[ebp]
  0013b	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  0013e	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00141	51		 push	 ecx
  00142	8d 55 d0	 lea	 edx, DWORD PTR _stVal1$[ebp]
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 _memcpy
  0014b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 30   : 				memcpy(&arr[left], &arr[nMin], nSize);

  0014e	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  00151	50		 push	 eax
  00152	8b 4d ec	 mov	 ecx, DWORD PTR _nMin$[ebp]
  00155	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  00158	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  0015b	50		 push	 eax
  0015c	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  0015f	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  00162	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00165	50		 push	 eax
  00166	e8 00 00 00 00	 call	 _memcpy
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 				memcpy(&arr[right], &stVal2, nSize);

  0016e	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00171	51		 push	 ecx
  00172	8d 55 c0	 lea	 edx, DWORD PTR _stVal2$[ebp]
  00175	52		 push	 edx
  00176	8b 45 f0	 mov	 eax, DWORD PTR _right$[ebp]
  00179	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  0017c	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0017f	52		 push	 edx
  00180	e8 00 00 00 00	 call	 _memcpy
  00185	83 c4 0c	 add	 esp, 12			; 0000000cH

; 32   : 				memcpy(&arr[nMin], &stVal1, nSize);

  00188	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  0018b	50		 push	 eax
  0018c	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  0018f	51		 push	 ecx
  00190	8b 55 ec	 mov	 edx, DWORD PTR _nMin$[ebp]
  00193	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  00196	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00199	51		 push	 ecx
  0019a	e8 00 00 00 00	 call	 _memcpy
  0019f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN15@SortEx:

; 33   : 			}

  001a2	e9 03 02 00 00	 jmp	 $LN13@SortEx
$LN12@SortEx:

; 34   : 		}
; 35   : 		else if (left == nMin) {

  001a7	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  001aa	3b 55 ec	 cmp	 edx, DWORD PTR _nMin$[ebp]
  001ad	75 59		 jne	 SHORT $LN16@SortEx

; 36   : 			memcpy(&stVal1, &arr[right], nSize);

  001af	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  001b2	50		 push	 eax
  001b3	8b 4d f0	 mov	 ecx, DWORD PTR _right$[ebp]
  001b6	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  001b9	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  001bc	50		 push	 eax
  001bd	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  001c0	51		 push	 ecx
  001c1	e8 00 00 00 00	 call	 _memcpy
  001c6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 37   : 			memcpy(&arr[right], &arr[nMax], nSize);

  001c9	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  001cc	52		 push	 edx
  001cd	8b 45 e8	 mov	 eax, DWORD PTR _nMax$[ebp]
  001d0	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  001d3	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  001d6	52		 push	 edx
  001d7	8b 45 f0	 mov	 eax, DWORD PTR _right$[ebp]
  001da	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  001dd	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 _memcpy
  001e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   : 			memcpy(&arr[nMax], &stVal1, nSize);

  001e9	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  001ec	50		 push	 eax
  001ed	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  001f0	51		 push	 ecx
  001f1	8b 55 e8	 mov	 edx, DWORD PTR _nMax$[ebp]
  001f4	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  001f7	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  001fa	51		 push	 ecx
  001fb	e8 00 00 00 00	 call	 _memcpy
  00200	83 c4 0c	 add	 esp, 12			; 0000000cH
  00203	e9 a2 01 00 00	 jmp	 $LN13@SortEx
$LN16@SortEx:

; 39   : 		}
; 40   : 		else if (right == nMin) {

  00208	8b 55 f0	 mov	 edx, DWORD PTR _right$[ebp]
  0020b	3b 55 ec	 cmp	 edx, DWORD PTR _nMin$[ebp]
  0020e	0f 85 8d 00 00
	00		 jne	 $LN18@SortEx

; 41   : 			memcpy(&stVal1, &arr[left], nSize);

  00214	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  00217	50		 push	 eax
  00218	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  0021b	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  0021e	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00221	50		 push	 eax
  00222	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  00225	51		 push	 ecx
  00226	e8 00 00 00 00	 call	 _memcpy
  0022b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 42   : 			memcpy(&stVal2, &arr[nMin], nSize);

  0022e	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  00231	52		 push	 edx
  00232	8b 45 ec	 mov	 eax, DWORD PTR _nMin$[ebp]
  00235	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  00238	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0023b	52		 push	 edx
  0023c	8d 45 c0	 lea	 eax, DWORD PTR _stVal2$[ebp]
  0023f	50		 push	 eax
  00240	e8 00 00 00 00	 call	 _memcpy
  00245	83 c4 0c	 add	 esp, 12			; 0000000cH

; 43   : 			memcpy(&arr[right], &arr[nMax], nSize);

  00248	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  0024b	51		 push	 ecx
  0024c	8b 55 e8	 mov	 edx, DWORD PTR _nMax$[ebp]
  0024f	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  00252	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00255	51		 push	 ecx
  00256	8b 55 f0	 mov	 edx, DWORD PTR _right$[ebp]
  00259	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  0025c	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  0025f	51		 push	 ecx
  00260	e8 00 00 00 00	 call	 _memcpy
  00265	83 c4 0c	 add	 esp, 12			; 0000000cH

; 44   : 			memcpy(&arr[left], &stVal2, nSize);

  00268	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  0026b	52		 push	 edx
  0026c	8d 45 c0	 lea	 eax, DWORD PTR _stVal2$[ebp]
  0026f	50		 push	 eax
  00270	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  00273	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  00276	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  00279	50		 push	 eax
  0027a	e8 00 00 00 00	 call	 _memcpy
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 45   : 			memcpy(&arr[nMax], &stVal1, nSize);

  00282	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00285	51		 push	 ecx
  00286	8d 55 d0	 lea	 edx, DWORD PTR _stVal1$[ebp]
  00289	52		 push	 edx
  0028a	8b 45 e8	 mov	 eax, DWORD PTR _nMax$[ebp]
  0028d	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  00290	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00293	52		 push	 edx
  00294	e8 00 00 00 00	 call	 _memcpy
  00299	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029c	e9 09 01 00 00	 jmp	 $LN13@SortEx
$LN18@SortEx:

; 46   : 		}
; 47   : 		else if (right == nMax) {

  002a1	8b 45 f0	 mov	 eax, DWORD PTR _right$[ebp]
  002a4	3b 45 e8	 cmp	 eax, DWORD PTR _nMax$[ebp]
  002a7	75 59		 jne	 SHORT $LN20@SortEx

; 48   : 			memcpy(&stVal1, &arr[left], nSize);

  002a9	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  002ac	51		 push	 ecx
  002ad	8b 55 f4	 mov	 edx, DWORD PTR _left$[ebp]
  002b0	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  002b3	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  002b6	51		 push	 ecx
  002b7	8d 55 d0	 lea	 edx, DWORD PTR _stVal1$[ebp]
  002ba	52		 push	 edx
  002bb	e8 00 00 00 00	 call	 _memcpy
  002c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 49   : 			memcpy(&arr[left], &arr[nMin], nSize);

  002c3	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  002c6	50		 push	 eax
  002c7	8b 4d ec	 mov	 ecx, DWORD PTR _nMin$[ebp]
  002ca	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  002cd	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  002d0	50		 push	 eax
  002d1	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  002d4	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  002d7	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  002da	50		 push	 eax
  002db	e8 00 00 00 00	 call	 _memcpy
  002e0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 50   : 			memcpy(&arr[nMin], &stVal1, nSize);

  002e3	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  002e6	51		 push	 ecx
  002e7	8d 55 d0	 lea	 edx, DWORD PTR _stVal1$[ebp]
  002ea	52		 push	 edx
  002eb	8b 45 ec	 mov	 eax, DWORD PTR _nMin$[ebp]
  002ee	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  002f1	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  002f4	52		 push	 edx
  002f5	e8 00 00 00 00	 call	 _memcpy
  002fa	83 c4 0c	 add	 esp, 12			; 0000000cH

; 51   : 		}
; 52   : 		else {

  002fd	e9 a8 00 00 00	 jmp	 $LN13@SortEx
$LN20@SortEx:

; 53   : 			memcpy(&stVal1, &arr[left], nSize);

  00302	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  00305	50		 push	 eax
  00306	8b 4d f4	 mov	 ecx, DWORD PTR _left$[ebp]
  00309	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  0030c	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  0030f	50		 push	 eax
  00310	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  00313	51		 push	 ecx
  00314	e8 00 00 00 00	 call	 _memcpy
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH

; 54   : 			memcpy(&stVal2, &arr[right], nSize);

  0031c	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  0031f	52		 push	 edx
  00320	8b 45 f0	 mov	 eax, DWORD PTR _right$[ebp]
  00323	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  00326	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00329	52		 push	 edx
  0032a	8d 45 c0	 lea	 eax, DWORD PTR _stVal2$[ebp]
  0032d	50		 push	 eax
  0032e	e8 00 00 00 00	 call	 _memcpy
  00333	83 c4 0c	 add	 esp, 12			; 0000000cH

; 55   : 			memcpy(&arr[right], &arr[nMax], nSize);

  00336	8b 4d dc	 mov	 ecx, DWORD PTR _nSize$[ebp]
  00339	51		 push	 ecx
  0033a	8b 55 e8	 mov	 edx, DWORD PTR _nMax$[ebp]
  0033d	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  00340	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00343	51		 push	 ecx
  00344	8b 55 f0	 mov	 edx, DWORD PTR _right$[ebp]
  00347	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  0034a	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  0034d	51		 push	 ecx
  0034e	e8 00 00 00 00	 call	 _memcpy
  00353	83 c4 0c	 add	 esp, 12			; 0000000cH

; 56   : 			memcpy(&arr[left], &arr[nMin], nSize);

  00356	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  00359	52		 push	 edx
  0035a	8b 45 ec	 mov	 eax, DWORD PTR _nMin$[ebp]
  0035d	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  00360	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  00363	52		 push	 edx
  00364	8b 45 f4	 mov	 eax, DWORD PTR _left$[ebp]
  00367	8b 4d 08	 mov	 ecx, DWORD PTR _arr$[ebp]
  0036a	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0036d	52		 push	 edx
  0036e	e8 00 00 00 00	 call	 _memcpy
  00373	83 c4 0c	 add	 esp, 12			; 0000000cH

; 57   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00376	8b 45 dc	 mov	 eax, DWORD PTR _nSize$[ebp]
  00379	50		 push	 eax
  0037a	8d 4d d0	 lea	 ecx, DWORD PTR _stVal1$[ebp]
  0037d	51		 push	 ecx
  0037e	8b 55 ec	 mov	 edx, DWORD PTR _nMin$[ebp]
  00381	8b 45 08	 mov	 eax, DWORD PTR _arr$[ebp]
  00384	8d 0c d0	 lea	 ecx, DWORD PTR [eax+edx*8]
  00387	51		 push	 ecx
  00388	e8 00 00 00 00	 call	 _memcpy
  0038d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 58   : 			memcpy(&arr[nMax], &stVal2, nSize);

  00390	8b 55 dc	 mov	 edx, DWORD PTR _nSize$[ebp]
  00393	52		 push	 edx
  00394	8d 45 c0	 lea	 eax, DWORD PTR _stVal2$[ebp]
  00397	50		 push	 eax
  00398	8b 4d e8	 mov	 ecx, DWORD PTR _nMax$[ebp]
  0039b	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  0039e	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]
  003a1	50		 push	 eax
  003a2	e8 00 00 00 00	 call	 _memcpy
  003a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@SortEx:

; 59   : 		}
; 60   : 
; 61   : 		//-------------------------------------
; 62   : 		right--;

  003aa	8b 4d f0	 mov	 ecx, DWORD PTR _right$[ebp]
  003ad	83 e9 01	 sub	 ecx, 1
  003b0	89 4d f0	 mov	 DWORD PTR _right$[ebp], ecx

; 63   : 	}

  003b3	e9 8a fc ff ff	 jmp	 $LN2@SortEx
$LN1@SortEx:

; 64   : }

  003b8	52		 push	 edx
  003b9	8b cd		 mov	 ecx, ebp
  003bb	50		 push	 eax
  003bc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@SortEx
  003c2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003c7	58		 pop	 eax
  003c8	5a		 pop	 edx
  003c9	5f		 pop	 edi
  003ca	5e		 pop	 esi
  003cb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003ce	33 cd		 xor	 ecx, ebp
  003d0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d5	83 c4 44	 add	 esp, 68			; 00000044H
  003d8	3b ec		 cmp	 ebp, esp
  003da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003df	8b e5		 mov	 esp, ebp
  003e1	5d		 pop	 ebp
  003e2	c3		 ret	 0
  003e3	90		 npad	 1
$LN26@SortEx:
  003e4	02 00 00 00	 DD	 2
  003e8	00 00 00 00	 DD	 $LN25@SortEx
$LN25@SortEx:
  003ec	d0 ff ff ff	 DD	 -48			; ffffffd0H
  003f0	08 00 00 00	 DD	 8
  003f4	00 00 00 00	 DD	 $LN23@SortEx
  003f8	c0 ff ff ff	 DD	 -64			; ffffffc0H
  003fc	08 00 00 00	 DD	 8
  00400	00 00 00 00	 DD	 $LN24@SortEx
$LN24@SortEx:
  00404	73		 DB	 115			; 00000073H
  00405	74		 DB	 116			; 00000074H
  00406	56		 DB	 86			; 00000056H
  00407	61		 DB	 97			; 00000061H
  00408	6c		 DB	 108			; 0000006cH
  00409	32		 DB	 50			; 00000032H
  0040a	00		 DB	 0
$LN23@SortEx:
  0040b	73		 DB	 115			; 00000073H
  0040c	74		 DB	 116			; 00000074H
  0040d	56		 DB	 86			; 00000056H
  0040e	61		 DB	 97			; 00000061H
  0040f	6c		 DB	 108			; 0000006cH
  00410	31		 DB	 49			; 00000031H
  00411	00		 DB	 0
?SortEx@@YAXPAUSTSortData@@H@Z ENDP			; SortEx
_TEXT	ENDS
END
