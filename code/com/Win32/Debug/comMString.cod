; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comMString.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__tcsncpy
PUBLIC	?ISINCLUDE@@YA_NHH@Z				; ISINCLUDE
PUBLIC	?getIndex@@YAHH@Z				; getIndex
PUBLIC	?getSizeByIndex@@YAHH@Z				; getSizeByIndex
PUBLIC	?newBufByIndex@CMemManager@@QAEPADH@Z		; CMemManager::newBufByIndex
PUBLIC	??0CmString@@QAE@XZ				; CmString::CmString
PUBLIC	??0CmString@@QAE@PBD@Z				; CmString::CmString
PUBLIC	??0CmString@@QAE@H@Z				; CmString::CmString
PUBLIC	??0CmString@@QAE@ABV0@@Z			; CmString::CmString
PUBLIC	??0CmString@@QAE@PBV0@@Z			; CmString::CmString
PUBLIC	??1CmString@@QAE@XZ				; CmString::~CmString
PUBLIC	?c_str@CmString@@QBEPBDXZ			; CmString::c_str
PUBLIC	?capacity_idx@CmString@@QBEHXZ			; CmString::capacity_idx
PUBLIC	??8CmString@@QAE_NPBD@Z				; CmString::operator==
PUBLIC	??4CmString@@QAEAAV0@PBD@Z			; CmString::operator=
PUBLIC	?append@CmString@@QAEAAV1@PBD@Z			; CmString::append
PUBLIC	?replace@CmString@@QAEAAV1@HHPBD@Z		; CmString::replace
PUBLIC	?reserve@CmString@@QAEXH@Z			; CmString::reserve
PUBLIC	?find@CmString@@QAEPADPBDH@Z			; CmString::find
PUBLIC	?find_next@CmString@@QAEPADPBDH@Z		; CmString::find_next
PUBLIC	?compare@CmString@@QAEHPBD@Z			; CmString::compare
PUBLIC	?compare@CmString@@QAEHHHPBD@Z			; CmString::compare
PUBLIC	?__autoclassinit2@CmString@@QAEXI@Z		; CmString::__autoclassinit2
PUBLIC	??_GCmString@@QAEPAXI@Z				; CmString::`scalar deleting destructor'
PUBLIC	??0CStringList@@QAE@XZ				; CStringList::CStringList
PUBLIC	??1CStringList@@QAE@XZ				; CStringList::~CStringList
PUBLIC	?del@CStringList@@QAE_NPAVCmString@@@Z		; CStringList::del
PUBLIC	?del@CStringList@@QAE_NH@Z			; CStringList::del
PUBLIC	?__alloc@CStringList@@AAEHH@Z			; CStringList::__alloc
PUBLIC	?_DEL@CStringList@@AAEXH@Z			; CStringList::_DEL
PUBLIC	?__add@CStringList@@AAEPAVCmString@@PADH@Z	; CStringList::__add
PUBLIC	?newIdx@CStringList@@AAEHXZ			; CStringList::newIdx
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	?delBufByIndex@CMemManager@@QAEXPADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__newBuf@CMemManager@@AAEPADHI@Z:PROC		; CMemManager::__newBuf
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?g_nSizeList@@3QBHB:BYTE			; g_nSizeList
EXTRN	?gs_pMMgr@@3PAVCMemManager@@A:DWORD		; gs_pMMgr
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
xdata$x	SEGMENT
__unwindtable$?__add@CStringList@@AAEPAVCmString@@PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__add@CStringList@@AAEPAVCmString@@PADH@Z$0
__ehfuncinfo$?__add@CStringList@@AAEPAVCmString@@PADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__add@CStringList@@AAEPAVCmString@@PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1CmString@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_i$ = -12						; size = 4
_nIdx$ = -8						; size = 4
_this$ = -4						; size = 4
?newIdx@CStringList@@AAEHXZ PROC			; CStringList::newIdx
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 253  : 	int nIdx = m_nLast, i;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00024	89 4d f8	 mov	 DWORD PTR _nIdx$[ebp], ecx

; 254  : 	for (i = 0; i < m_nListCnt; i++)

  00027	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0002e	eb 09		 jmp	 SHORT $LN4@newIdx
$LN2@newIdx:
  00030	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00033	83 c2 01	 add	 edx, 1
  00036	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN4@newIdx:
  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  0003f	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00041	7d 30		 jge	 SHORT $LN3@newIdx

; 255  : 	{
; 256  : 		if (nIdx >= m_nListCnt) nIdx = 0;

  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	8b 45 f8	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00049	3b 02		 cmp	 eax, DWORD PTR [edx]
  0004b	7c 07		 jl	 SHORT $LN5@newIdx
  0004d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nIdx$[ebp], 0
$LN5@newIdx:

; 257  : 		if (!m_pList[nIdx]) {

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005a	8b 45 f8	 mov	 eax, DWORD PTR _nIdx$[ebp]
  0005d	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00061	75 05		 jne	 SHORT $LN6@newIdx

; 258  : 			return nIdx;

  00063	8b 45 f8	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00066	eb 3d		 jmp	 SHORT $LN1@newIdx
$LN6@newIdx:

; 259  : 		}
; 260  : 		nIdx++;

  00068	8b 4d f8	 mov	 ecx, DWORD PTR _nIdx$[ebp]
  0006b	83 c1 01	 add	 ecx, 1
  0006e	89 4d f8	 mov	 DWORD PTR _nIdx$[ebp], ecx

; 261  : 	}

  00071	eb bd		 jmp	 SHORT $LN2@newIdx
$LN3@newIdx:

; 262  : 	// realloc
; 263  : 	if (!__alloc(m_nListCnt + UNIT_ADD_SIZE)) {

  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	8b 02		 mov	 eax, DWORD PTR [edx]
  00078	83 c0 20	 add	 eax, 32			; 00000020H
  0007b	50		 push	 eax
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	e8 00 00 00 00	 call	 ?__alloc@CStringList@@AAEHH@Z ; CStringList::__alloc
  00084	85 c0		 test	 eax, eax
  00086	75 05		 jne	 SHORT $LN7@newIdx

; 264  : 		return -1;

  00088	83 c8 ff	 or	 eax, -1
  0008b	eb 18		 jmp	 SHORT $LN1@newIdx
$LN7@newIdx:

; 265  : 	}
; 266  : 	nIdx = m_nListCnt;

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	8b 11		 mov	 edx, DWORD PTR [ecx]
  00092	89 55 f8	 mov	 DWORD PTR _nIdx$[ebp], edx

; 267  : 	m_nListCnt += UNIT_ADD_SIZE;

  00095	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009a	83 c1 20	 add	 ecx, 32			; 00000020H
  0009d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a0	89 0a		 mov	 DWORD PTR [edx], ecx

; 268  : 	return nIdx;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR _nIdx$[ebp]
$LN1@newIdx:

; 269  : }

  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
?newIdx@CStringList@@AAEHXZ ENDP			; CStringList::newIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
tv79 = -32						; size = 4
$T2 = -28						; size = 4
$T3 = -24						; size = 4
_pNewString$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pString$ = 8						; size = 4
_nIdx$ = 12						; size = 4
?__add@CStringList@@AAEPAVCmString@@PADH@Z PROC		; CStringList::__add
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__add@CStringList@@AAEPAVCmString@@PADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00039	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 243  : 	if (0 > nIdx) return NULL;

  0003c	83 7d 0c 00	 cmp	 DWORD PTR _nIdx$[ebp], 0
  00040	7d 04		 jge	 SHORT $LN2@add
  00042	33 c0		 xor	 eax, eax
  00044	eb 7c		 jmp	 SHORT $LN1@add
$LN2@add:

; 244  : 	CmString *pNewString = new CmString(pString);

  00046	6a 08		 push	 8
  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4
  00050	89 45 e4	 mov	 DWORD PTR $T2[ebp], eax
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005a	83 7d e4 00	 cmp	 DWORD PTR $T2[ebp], 0
  0005e	74 1b		 je	 SHORT $LN4@add
  00060	6a 08		 push	 8
  00062	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  00065	e8 00 00 00 00	 call	 ?__autoclassinit2@CmString@@QAEXI@Z
  0006a	8b 45 08	 mov	 eax, DWORD PTR _pString$[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d e4	 mov	 ecx, DWORD PTR $T2[ebp]
  00071	e8 00 00 00 00	 call	 ??0CmString@@QAE@PBD@Z	; CmString::CmString
  00076	89 45 e0	 mov	 DWORD PTR tv79[ebp], eax
  00079	eb 07		 jmp	 SHORT $LN5@add
$LN4@add:
  0007b	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN5@add:
  00082	8b 4d e0	 mov	 ecx, DWORD PTR tv79[ebp]
  00085	89 4d e8	 mov	 DWORD PTR $T3[ebp], ecx
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8b 55 e8	 mov	 edx, DWORD PTR $T3[ebp]
  00092	89 55 ec	 mov	 DWORD PTR _pNewString$[ebp], edx

; 245  : 	m_pList[nIdx] = pNewString;

  00095	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00098	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0009b	8b 55 0c	 mov	 edx, DWORD PTR _nIdx$[ebp]
  0009e	8b 45 ec	 mov	 eax, DWORD PTR _pNewString$[ebp]
  000a1	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 246  : 	m_nLast = nIdx + 1;

  000a4	8b 4d 0c	 mov	 ecx, DWORD PTR _nIdx$[ebp]
  000a7	83 c1 01	 add	 ecx, 1
  000aa	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ad	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 247  : 	m_nUseCnt++;

  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b6	83 c1 01	 add	 ecx, 1
  000b9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 248  : 	return pNewString;

  000bf	8b 45 ec	 mov	 eax, DWORD PTR _pNewString$[ebp]
$LN1@add:

; 249  : }

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	83 c4 20	 add	 esp, 32			; 00000020H
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?__add@CStringList@@AAEPAVCmString@@PADH@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 e4	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?__add@CStringList@@AAEPAVCmString@@PADH@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__add@CStringList@@AAEPAVCmString@@PADH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__add@CStringList@@AAEPAVCmString@@PADH@Z ENDP		; CStringList::__add
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?_DEL@CStringList@@AAEXH@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?_DEL@CStringList@@AAEXH@Z PROC				; CStringList::_DEL, COMDAT
; _this$ = ecx

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00020	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00023	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00027	74 59		 je	 SHORT $LN1@DEL
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002f	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00032	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00035	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00038	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  0003e	83 7d f8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00042	74 0f		 je	 SHORT $LN4@DEL
  00044	6a 01		 push	 1
  00046	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  00049	e8 00 00 00 00	 call	 ??_GCmString@@QAEPAXI@Z
  0004e	89 45 f0	 mov	 DWORD PTR tv75[ebp], eax
  00051	eb 07		 jmp	 SHORT $LN5@DEL
$LN4@DEL:
  00053	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
$LN5@DEL:
  0005a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00063	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0
  0006a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00070	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00079	83 ea 01	 sub	 edx, 1
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN1@DEL:
  00082	83 c4 10	 add	 esp, 16			; 00000010H
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?_DEL@CStringList@@AAEXH@Z ENDP				; CStringList::_DEL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_pList$ = -8						; size = 4
_this$ = -4						; size = 4
_nMaxCount$ = 8						; size = 4
?__alloc@CStringList@@AAEHH@Z PROC			; CStringList::__alloc
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 224  : 	CmString** pList = (CmString**)calloc(nMaxCount, sizeof(CmString*));

  00018	8b f4		 mov	 esi, esp
  0001a	6a 04		 push	 4
  0001c	8b 45 08	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00026	83 c4 08	 add	 esp, 8
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	89 45 f8	 mov	 DWORD PTR _pList$[ebp], eax

; 225  : 	if (!pList) {

  00033	83 7d f8 00	 cmp	 DWORD PTR _pList$[ebp], 0
  00037	75 04		 jne	 SHORT $LN2@alloc

; 226  : 		return 0;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 4a		 jmp	 SHORT $LN1@alloc
$LN2@alloc:

; 227  : 	}
; 228  : 
; 229  : 	if (m_pList) {

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  00044	74 35		 je	 SHORT $LN3@alloc

; 230  : 		memcpy(pList, m_pList, m_nListCnt * sizeof(CmString*));

  00046	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00049	8b 02		 mov	 eax, DWORD PTR [edx]
  0004b	c1 e0 02	 shl	 eax, 2
  0004e	50		 push	 eax
  0004f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00052	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00055	52		 push	 edx
  00056	8b 45 f8	 mov	 eax, DWORD PTR _pList$[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memcpy
  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 231  : 		free(m_pList);

  00062	8b f4		 mov	 esi, esp
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0006a	52		 push	 edx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00071	83 c4 04	 add	 esp, 4
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@alloc:

; 232  : 	}
; 233  : 	m_pList = pList;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 4d f8	 mov	 ecx, DWORD PTR _pList$[ebp]
  00081	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 234  : 	return nMaxCount;

  00084	8b 45 08	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
$LN1@alloc:

; 235  : }

  00087	5e		 pop	 esi
  00088	83 c4 08	 add	 esp, 8
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?__alloc@CStringList@@AAEHH@Z ENDP			; CStringList::__alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?del@CStringList@@QAE_NH@Z PROC				; CStringList::del
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 287  : 	if (!ISINCLUDE(i, m_nListCnt)) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 ?ISINCLUDE@@YA_NHH@Z	; ISINCLUDE
  0001d	83 c4 08	 add	 esp, 8
  00020	0f b6 c0	 movzx	 eax, al
  00023	85 c0		 test	 eax, eax
  00025	75 04		 jne	 SHORT $LN2@del

; 288  : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 289  : 		return false;

  00027	32 c0		 xor	 al, al
  00029	eb 0e		 jmp	 SHORT $LN1@del
$LN2@del:

; 290  : 	}
; 291  : 	_DEL(i);

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  0002e	51		 push	 ecx
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AAEXH@Z ; CStringList::_DEL

; 292  : 	return true;

  00037	b0 01		 mov	 al, 1
$LN1@del:

; 293  : }

  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
?del@CStringList@@QAE_NH@Z ENDP				; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?del@CStringList@@QAE_NPAVCmString@@@Z PROC		; CStringList::del
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 274  : 	int i;
; 275  : 	for (i = 0; i < m_nListCnt; i++) {

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@del
$LN2@del:
  00020	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@del:
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0002f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00031	7d 23		 jge	 SHORT $LN3@del

; 276  : 		if (m_pList[i] == p) {

  00033	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00036	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00039	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0003c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0003f	3b 45 08	 cmp	 eax, DWORD PTR _p$[ebp]
  00042	75 10		 jne	 SHORT $LN5@del

; 277  : 			_DEL(i);

  00044	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00047	51		 push	 ecx
  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AAEXH@Z ; CStringList::_DEL

; 278  : 			return true;

  00050	b0 01		 mov	 al, 1
  00052	eb 04		 jmp	 SHORT $LN1@del
$LN5@del:

; 279  : 		}
; 280  : 	}

  00054	eb ca		 jmp	 SHORT $LN2@del
$LN3@del:

; 281  : 	//gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 282  : 	return false;

  00056	32 c0		 xor	 al, al
$LN1@del:

; 283  : }

  00058	83 c4 08	 add	 esp, 8
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
?del@CStringList@@QAE_NPAVCmString@@@Z ENDP		; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
tv80 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??1CStringList@@QAE@XZ PROC				; CStringList::~CStringList
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 210  : 	if (!m_pList) return;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00025	75 05		 jne	 SHORT $LN5@CStringLis
  00027	e9 9a 00 00 00	 jmp	 $LN7@CStringLis
$LN5@CStringLis:

; 211  : 	int i;
; 212  : 	for (i = 0; i < m_nListCnt; i++) {

  0002c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00033	eb 09		 jmp	 SHORT $LN4@CStringLis
$LN2@CStringLis:
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00038	83 c1 01	 add	 ecx, 1
  0003b	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$LN4@CStringLis:
  0003e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00041	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00044	3b 02		 cmp	 eax, DWORD PTR [edx]
  00046	7d 52		 jge	 SHORT $LN3@CStringLis

; 213  : 		if (m_pList[i]) {

  00048	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00051	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00055	74 41		 je	 SHORT $LN6@CStringLis

; 214  : 			delete m_pList[i];

  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00060	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00063	89 4d f0	 mov	 DWORD PTR $T1[ebp], ecx
  00066	8b 55 f0	 mov	 edx, DWORD PTR $T1[ebp]
  00069	89 55 f4	 mov	 DWORD PTR $T2[ebp], edx
  0006c	83 7d f4 00	 cmp	 DWORD PTR $T2[ebp], 0
  00070	74 0f		 je	 SHORT $LN8@CStringLis
  00072	6a 01		 push	 1
  00074	8b 4d f4	 mov	 ecx, DWORD PTR $T2[ebp]
  00077	e8 00 00 00 00	 call	 ??_GCmString@@QAEPAXI@Z
  0007c	89 45 ec	 mov	 DWORD PTR tv80[ebp], eax
  0007f	eb 07		 jmp	 SHORT $LN9@CStringLis
$LN8@CStringLis:
  00081	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN9@CStringLis:

; 215  : 			m_pList[i] = NULL;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008e	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00091	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN6@CStringLis:

; 216  : 		}
; 217  : 	}

  00098	eb 9b		 jmp	 SHORT $LN2@CStringLis
$LN3@CStringLis:

; 218  : 	free(m_pList);

  0009a	8b f4		 mov	 esi, esp
  0009c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0009f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000a2	51		 push	 ecx
  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000a9	83 c4 04	 add	 esp, 4
  000ac	3b f4		 cmp	 esi, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 219  : 	m_pList = NULL;

  000b3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 220  : 	m_nListCnt = 0;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN7@CStringLis:

; 221  : }

  000c6	5e		 pop	 esi
  000c7	83 c4 14	 add	 esp, 20			; 00000014H
  000ca	3b ec		 cmp	 ebp, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
??1CStringList@@QAE@XZ ENDP				; CStringList::~CStringList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStringList@@QAE@XZ PROC				; CStringList::CStringList
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 205  : 	m_nListCnt = 0; m_nLast = 0; m_nDelIdx = 0; m_pList = NULL; m_nUseCnt = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00017	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001a	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00021	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00024	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00035	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 206  : }

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??0CStringList@@QAE@XZ ENDP				; CStringList::CStringList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCmString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCmString@@QAEPAXI@Z PROC				; CmString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CmString@@QAE@XZ	; CmString::~CmString
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GCmString@@QAEPAXI@Z ENDP				; CmString::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__autoclassinit2@CmString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_classSize$ = 8						; size = 4
?__autoclassinit2@CmString@@QAEXI@Z PROC		; CmString::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _classSize$[ebp]
  00011	50		 push	 eax
  00012	6a 00		 push	 0
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	51		 push	 ecx
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?__autoclassinit2@CmString@@QAEXI@Z ENDP		; CmString::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_nLen$ = -16						; size = 4
_idx$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_len$ = 12						; size = 4
_str$ = 16						; size = 4
?compare@CmString@@QAEHHHPBD@Z PROC			; CmString::compare
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 190  : 	int i, idx=index, nLen = (int)_tcslen(str);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _index$[ebp]
  0001d	89 45 f4	 mov	 DWORD PTR _idx$[ebp], eax
  00020	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 _strlen
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 f0	 mov	 DWORD PTR _nLen$[ebp], eax

; 191  : 	if (nLen < len)  len = nLen;

  0002f	8b 55 f0	 mov	 edx, DWORD PTR _nLen$[ebp]
  00032	3b 55 0c	 cmp	 edx, DWORD PTR _len$[ebp]
  00035	7d 06		 jge	 SHORT $LN5@compare
  00037	8b 45 f0	 mov	 eax, DWORD PTR _nLen$[ebp]
  0003a	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
$LN5@compare:

; 192  : 
; 193  : 	for (i = 0; i < len; i++) {

  0003d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00044	eb 09		 jmp	 SHORT $LN4@compare
$LN2@compare:
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00049	83 c1 01	 add	 ecx, 1
  0004c	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
$LN4@compare:
  0004f	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00052	3b 55 0c	 cmp	 edx, DWORD PTR _len$[ebp]
  00055	7d 4b		 jge	 SHORT $LN3@compare

; 194  : 		if (m_pValue[idx] != str[i]) {

  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 55 f4	 mov	 edx, DWORD PTR _idx$[ebp]
  0005f	0f be 04 11	 movsx	 eax, BYTE PTR [ecx+edx]
  00063	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  00066	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00069	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  0006c	3b c2		 cmp	 eax, edx
  0006e	74 27		 je	 SHORT $LN6@compare

; 195  : 			if (m_pValue[idx] > str[i]) return 1;

  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	8b 55 f4	 mov	 edx, DWORD PTR _idx$[ebp]
  00078	0f be 04 11	 movsx	 eax, BYTE PTR [ecx+edx]
  0007c	8b 4d 10	 mov	 ecx, DWORD PTR _str$[ebp]
  0007f	03 4d f8	 add	 ecx, DWORD PTR _i$[ebp]
  00082	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00085	3b c2		 cmp	 eax, edx
  00087	7e 09		 jle	 SHORT $LN7@compare
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	eb 14		 jmp	 SHORT $LN1@compare
  00090	eb 05		 jmp	 SHORT $LN6@compare
$LN7@compare:

; 196  : 			else return -1;

  00092	83 c8 ff	 or	 eax, -1
  00095	eb 0d		 jmp	 SHORT $LN1@compare
$LN6@compare:

; 197  : 		}
; 198  : 		idx++;

  00097	8b 45 f4	 mov	 eax, DWORD PTR _idx$[ebp]
  0009a	83 c0 01	 add	 eax, 1
  0009d	89 45 f4	 mov	 DWORD PTR _idx$[ebp], eax

; 199  : 	}

  000a0	eb a4		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 200  : 	return 0;

  000a2	33 c0		 xor	 eax, eax
$LN1@compare:

; 201  : }

  000a4	83 c4 10	 add	 esp, 16			; 00000010H
  000a7	3b ec		 cmp	 ebp, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c2 0c 00	 ret	 12			; 0000000cH
?compare@CmString@@QAEHHHPBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_orignLen$ = -16					; size = 4
_i$ = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?compare@CmString@@QAEHPBD@Z PROC			; CmString::compare
; _this$ = ecx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 176  : 	size_t nLen = _tcslen(str),i, orignLen = _tcslen(m_pValue);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strlen
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _strlen
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f0	 mov	 DWORD PTR _orignLen$[ebp], eax

; 177  : 	if (nLen > orignLen)  nLen = orignLen;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  0003d	3b 45 f0	 cmp	 eax, DWORD PTR _orignLen$[ebp]
  00040	76 06		 jbe	 SHORT $LN5@compare
  00042	8b 4d f0	 mov	 ecx, DWORD PTR _orignLen$[ebp]
  00045	89 4d f8	 mov	 DWORD PTR _nLen$[ebp], ecx
$LN5@compare:

; 178  : 
; 179  : 	for (i = 0; i < nLen; i++) {

  00048	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004f	eb 09		 jmp	 SHORT $LN4@compare
$LN2@compare:
  00051	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00054	83 c2 01	 add	 edx, 1
  00057	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN4@compare:
  0005a	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	3b 45 f8	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00060	73 42		 jae	 SHORT $LN3@compare

; 180  : 		if (m_pValue[i] != str[i]) {

  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	8b 11		 mov	 edx, DWORD PTR [ecx]
  00067	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0006a	0f be 0c 02	 movsx	 ecx, BYTE PTR [edx+eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00071	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  00074	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00077	3b c8		 cmp	 ecx, eax
  00079	74 27		 je	 SHORT $LN6@compare

; 181  : 			if (m_pValue[i] > str[i]) return 1;

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00080	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  00083	0f be 0c 02	 movsx	 ecx, BYTE PTR [edx+eax]
  00087	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0008a	03 55 f4	 add	 edx, DWORD PTR _i$[ebp]
  0008d	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00090	3b c8		 cmp	 ecx, eax
  00092	7e 09		 jle	 SHORT $LN7@compare
  00094	b8 01 00 00 00	 mov	 eax, 1
  00099	eb 0b		 jmp	 SHORT $LN1@compare
  0009b	eb 05		 jmp	 SHORT $LN6@compare
$LN7@compare:

; 182  : 			else return -1;

  0009d	83 c8 ff	 or	 eax, -1
  000a0	eb 04		 jmp	 SHORT $LN1@compare
$LN6@compare:

; 183  : 		}
; 184  : 	}

  000a2	eb ad		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 185  : 	return 0;

  000a4	33 c0		 xor	 eax, eax
$LN1@compare:

; 186  : }

  000a6	83 c4 10	 add	 esp, 16			; 00000010H
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
?compare@CmString@@QAEHPBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
tv78 = -28						; size = 4
tv77 = -24						; size = 4
tv76 = -20						; size = 4
_nLen$ = -16						; size = 4
_nIdx$ = -12						; size = 4
_pPos$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_index$ = 12						; size = 4
?find_next@CmString@@QAEPADPBDH@Z PROC			; CmString::find_next
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	TCHAR *pPos = m_pValue+index;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	03 4d 0c	 add	 ecx, DWORD PTR _index$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR _pPos$[ebp], ecx

; 134  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIdx$[ebp], 0
  00035	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _strlen
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 f0	 mov	 DWORD PTR _nLen$[ebp], eax
$LN2@find_next:

; 135  : 	while (*pPos) {

  00044	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  00047	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 74		 je	 SHORT $LN3@find_next
$LN4@find_next:

; 136  : 		while (*pPos == str[nIdx++]) {

  0004e	8b 55 f8	 mov	 edx, DWORD PTR _pPos$[ebp]
  00051	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00054	89 45 ec	 mov	 DWORD PTR tv76[ebp], eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0005a	03 4d f4	 add	 ecx, DWORD PTR _nIdx$[ebp]
  0005d	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00060	89 55 e8	 mov	 DWORD PTR tv77[ebp], edx
  00063	8b 45 f4	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f4	 mov	 DWORD PTR _nIdx$[ebp], eax
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR tv76[ebp]
  0006f	3b 4d e8	 cmp	 ecx, DWORD PTR tv77[ebp]
  00072	75 09		 jne	 SHORT $LN9@find_next
  00074	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  0007b	eb 07		 jmp	 SHORT $LN10@find_next
$LN9@find_next:
  0007d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN10@find_next:
  00084	83 7d e4 00	 cmp	 DWORD PTR tv78[ebp], 0
  00088	74 26		 je	 SHORT $LN5@find_next

; 137  : 			pPos++;

  0008a	8b 55 f8	 mov	 edx, DWORD PTR _pPos$[ebp]
  0008d	83 c2 01	 add	 edx, 1
  00090	89 55 f8	 mov	 DWORD PTR _pPos$[ebp], edx

; 138  : 			if (nIdx >= nLen) return pPos;

  00093	8b 45 f4	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00096	3b 45 f0	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00099	7c 05		 jl	 SHORT $LN6@find_next
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  0009e	eb 24		 jmp	 SHORT $LN1@find_next
$LN6@find_next:

; 139  : 			if (!*pPos) return NULL;

  000a0	8b 4d f8	 mov	 ecx, DWORD PTR _pPos$[ebp]
  000a3	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000a6	85 d2		 test	 edx, edx
  000a8	75 04		 jne	 SHORT $LN7@find_next
  000aa	33 c0		 xor	 eax, eax
  000ac	eb 16		 jmp	 SHORT $LN1@find_next
$LN7@find_next:

; 140  : 		}

  000ae	eb 9e		 jmp	 SHORT $LN4@find_next
$LN5@find_next:

; 141  : 		nIdx = 0;

  000b0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIdx$[ebp], 0

; 142  : 		pPos++;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  000ba	83 c0 01	 add	 eax, 1
  000bd	89 45 f8	 mov	 DWORD PTR _pPos$[ebp], eax

; 143  : 	}

  000c0	eb 82		 jmp	 SHORT $LN2@find_next
$LN3@find_next:

; 144  : 
; 145  : 	return NULL;

  000c2	33 c0		 xor	 eax, eax
$LN1@find_next:

; 146  : }

  000c4	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
?find_next@CmString@@QAEPADPBDH@Z ENDP			; CmString::find_next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
tv78 = -28						; size = 4
tv77 = -24						; size = 4
tv76 = -20						; size = 4
_nLen$ = -16						; size = 4
_nIdx$ = -12						; size = 4
_pPos$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
_index$ = 12						; size = 4
?find@CmString@@QAEPADPBDH@Z PROC			; CmString::find
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  : 	TCHAR *pPos = m_pValue + index;

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	03 4d 0c	 add	 ecx, DWORD PTR _index$[ebp]
  0002b	89 4d f8	 mov	 DWORD PTR _pPos$[ebp], ecx

; 151  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0002e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIdx$[ebp], 0
  00035	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  00038	52		 push	 edx
  00039	e8 00 00 00 00	 call	 _strlen
  0003e	83 c4 04	 add	 esp, 4
  00041	89 45 f0	 mov	 DWORD PTR _nLen$[ebp], eax
$LN2@find:

; 152  : 	while (*pPos) {

  00044	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  00047	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 7a		 je	 SHORT $LN3@find
$LN4@find:

; 153  : 		while (*pPos == str[nIdx++]) {

  0004e	8b 55 f8	 mov	 edx, DWORD PTR _pPos$[ebp]
  00051	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00054	89 45 ec	 mov	 DWORD PTR tv76[ebp], eax
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0005a	03 4d f4	 add	 ecx, DWORD PTR _nIdx$[ebp]
  0005d	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00060	89 55 e8	 mov	 DWORD PTR tv77[ebp], edx
  00063	8b 45 f4	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 f4	 mov	 DWORD PTR _nIdx$[ebp], eax
  0006c	8b 4d ec	 mov	 ecx, DWORD PTR tv76[ebp]
  0006f	3b 4d e8	 cmp	 ecx, DWORD PTR tv77[ebp]
  00072	75 09		 jne	 SHORT $LN9@find
  00074	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
  0007b	eb 07		 jmp	 SHORT $LN10@find
$LN9@find:
  0007d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
$LN10@find:
  00084	83 7d e4 00	 cmp	 DWORD PTR tv78[ebp], 0
  00088	74 29		 je	 SHORT $LN5@find

; 154  : 			pPos++;

  0008a	8b 55 f8	 mov	 edx, DWORD PTR _pPos$[ebp]
  0008d	83 c2 01	 add	 edx, 1
  00090	89 55 f8	 mov	 DWORD PTR _pPos$[ebp], edx

; 155  : 			if (nIdx >= nLen) return pPos-nLen;

  00093	8b 45 f4	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00096	3b 45 f0	 cmp	 eax, DWORD PTR _nLen$[ebp]
  00099	7c 08		 jl	 SHORT $LN6@find
  0009b	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  0009e	2b 45 f0	 sub	 eax, DWORD PTR _nLen$[ebp]
  000a1	eb 27		 jmp	 SHORT $LN1@find
$LN6@find:

; 156  : 			if (!*pPos) return NULL;

  000a3	8b 4d f8	 mov	 ecx, DWORD PTR _pPos$[ebp]
  000a6	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000a9	85 d2		 test	 edx, edx
  000ab	75 04		 jne	 SHORT $LN7@find
  000ad	33 c0		 xor	 eax, eax
  000af	eb 19		 jmp	 SHORT $LN1@find
$LN7@find:

; 157  : 		}

  000b1	eb 9b		 jmp	 SHORT $LN4@find
$LN5@find:

; 158  : 		nIdx = 0;

  000b3	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nIdx$[ebp], 0

; 159  : 		pPos++;

  000ba	8b 45 f8	 mov	 eax, DWORD PTR _pPos$[ebp]
  000bd	83 c0 01	 add	 eax, 1
  000c0	89 45 f8	 mov	 DWORD PTR _pPos$[ebp], eax

; 160  : 	}

  000c3	e9 7c ff ff ff	 jmp	 $LN2@find
$LN3@find:

; 161  : 
; 162  : 	return NULL;

  000c8	33 c0		 xor	 eax, eax
$LN1@find:

; 163  : }

  000ca	83 c4 1c	 add	 esp, 28			; 0000001cH
  000cd	3b ec		 cmp	 ebp, esp
  000cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c2 08 00	 ret	 8
?find@CmString@@QAEPADPBDH@Z ENDP			; CmString::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?reserve@CmString@@QAEXH@Z PROC				; CmString::reserve
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	if (getSizeByIndex(m_nSftIdx) > n) {

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b 45 08	 cmp	 eax, DWORD PTR _n$[ebp]
  00020	7e 04		 jle	 SHORT $LN2@reserve

; 120  : 		return;

  00022	eb 54		 jmp	 SHORT $LN1@reserve

; 121  : 	}
; 122  : 	else {

  00024	eb 52		 jmp	 SHORT $LN1@reserve
$LN2@reserve:

; 123  : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002c	50		 push	 eax
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	52		 push	 edx
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00039	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 124  : 		m_nSftIdx = getIndex(n);

  0003e	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00047	83 c4 04	 add	 esp, 4
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 125  : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00050	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00053	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00056	50		 push	 eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0005d	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	89 01		 mov	 DWORD PTR [ecx], eax

; 126  : 		m_pValue[0] = 0;

  00067	ba 01 00 00 00	 mov	 edx, 1
  0006c	6b c2 00	 imul	 eax, edx, 0
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	8b 11		 mov	 edx, DWORD PTR [ecx]
  00074	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
$LN1@reserve:

; 127  : 	}
; 128  : }

  00078	83 c4 04	 add	 esp, 4
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
?reserve@CmString@@QAEXH@Z ENDP				; CmString::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_newBuf$ = -28						; size = 4
_newIdx$ = -24						; size = 4
_oSize$ = -20						; size = 4
_size$ = -16						; size = 4
_nOLen$ = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_len$ = 12						; size = 4
_str$ = 16						; size = 4
?replace@CmString@@QAEAAV1@HHPBD@Z PROC			; CmString::replace
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 100  : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00023	8b 45 10	 mov	 eax, DWORD PTR _str$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _strlen
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _strlen
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f4	 mov	 DWORD PTR _nOLen$[ebp], eax

; 101  : 	int size = nLen * g_nChSize, oSize = nOLen * g_nChSize;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  00046	89 45 f0	 mov	 DWORD PTR _size$[ebp], eax
  00049	8b 4d f4	 mov	 ecx, DWORD PTR _nOLen$[ebp]
  0004c	89 4d ec	 mov	 DWORD PTR _oSize$[ebp], ecx

; 102  : 
; 103  : 	int newIdx = getIndex(size + oSize - len + 1);

  0004f	8b 55 f0	 mov	 edx, DWORD PTR _size$[ebp]
  00052	03 55 ec	 add	 edx, DWORD PTR _oSize$[ebp]
  00055	2b 55 0c	 sub	 edx, DWORD PTR _len$[ebp]
  00058	83 c2 01	 add	 edx, 1
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00061	83 c4 04	 add	 esp, 4
  00064	89 45 e8	 mov	 DWORD PTR _newIdx$[ebp], eax

; 104  : 	TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  00067	8b 45 e8	 mov	 eax, DWORD PTR _newIdx$[ebp]
  0006a	50		 push	 eax
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00071	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  00076	89 45 e4	 mov	 DWORD PTR _newBuf$[ebp], eax

; 105  : 
; 106  : 	if (index) _tcsncpy(newBuf, m_pValue, index);

  00079	83 7d 08 00	 cmp	 DWORD PTR _index$[ebp], 0
  0007d	74 16		 je	 SHORT $LN2@replace
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _index$[ebp]
  00082	51		 push	 ecx
  00083	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	50		 push	 eax
  00089	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 __tcsncpy
  00092	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@replace:

; 107  : 	_tcsncpy(newBuf + index, str, len);

  00095	8b 55 0c	 mov	 edx, DWORD PTR _len$[ebp]
  00098	52		 push	 edx
  00099	8b 45 10	 mov	 eax, DWORD PTR _str$[ebp]
  0009c	50		 push	 eax
  0009d	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$[ebp]
  000a0	03 4d 08	 add	 ecx, DWORD PTR _index$[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 __tcsncpy
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 108  : 	_tcscpy(newBuf + index + len, m_pValue + index + len);

  000ac	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000af	8b 02		 mov	 eax, DWORD PTR [edx]
  000b1	03 45 08	 add	 eax, DWORD PTR _index$[ebp]
  000b4	03 45 0c	 add	 eax, DWORD PTR _len$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$[ebp]
  000bb	03 4d 08	 add	 ecx, DWORD PTR _index$[ebp]
  000be	03 4d 0c	 add	 ecx, DWORD PTR _len$[ebp]
  000c1	51		 push	 ecx
  000c2	e8 00 00 00 00	 call	 _strcpy
  000c7	83 c4 08	 add	 esp, 8

; 109  : 
; 110  : 	gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000ca	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cd	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d0	50		 push	 eax
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d6	52		 push	 edx
  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000dd	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 111  : 	m_pValue = newBuf;

  000e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$[ebp]
  000e8	89 08		 mov	 DWORD PTR [eax], ecx

; 112  : 	m_nSftIdx = newIdx;

  000ea	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ed	8b 45 e8	 mov	 eax, DWORD PTR _newIdx$[ebp]
  000f0	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 113  : 	return *this;

  000f3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 114  : }

  000f6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f9	3b ec		 cmp	 ebp, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 0c 00	 ret	 12			; 0000000cH
?replace@CmString@@QAEAAV1@HHPBD@Z ENDP			; CmString::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_newBuf$1 = -28						; size = 4
_newIdx$2 = -24						; size = 4
_oSize$ = -20						; size = 4
_size$ = -16						; size = 4
_nOLen$ = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
?append@CmString@@QAEAAV1@PBD@Z PROC			; CmString::append
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000e	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00011	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00014	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00017	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001a	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001d	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00020	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 76   : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00023	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _strlen
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 _strlen
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f4	 mov	 DWORD PTR _nOLen$[ebp], eax

; 77   : 	int size = nLen * g_nChSize , oSize = nOLen * g_nChSize;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  00046	89 45 f0	 mov	 DWORD PTR _size$[ebp], eax
  00049	8b 4d f4	 mov	 ecx, DWORD PTR _nOLen$[ebp]
  0004c	89 4d ec	 mov	 DWORD PTR _oSize$[ebp], ecx

; 78   : 
; 79   : 	if (getSizeByIndex(m_nSftIdx) > size + oSize + 1) {

  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0005b	83 c4 04	 add	 esp, 4
  0005e	8b 4d ec	 mov	 ecx, DWORD PTR _oSize$[ebp]
  00061	8b 55 f0	 mov	 edx, DWORD PTR _size$[ebp]
  00064	8d 4c 0a 01	 lea	 ecx, DWORD PTR [edx+ecx+1]
  00068	3b c1		 cmp	 eax, ecx
  0006a	7e 17		 jle	 SHORT $LN2@append

; 80   : 		_tcscpy(m_pValue + nOLen, str);

  0006c	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0006f	52		 push	 edx
  00070	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00073	8b 08		 mov	 ecx, DWORD PTR [eax]
  00075	03 4d f4	 add	 ecx, DWORD PTR _nOLen$[ebp]
  00078	51		 push	 ecx
  00079	e8 00 00 00 00	 call	 _strcpy
  0007e	83 c4 08	 add	 esp, 8

; 81   : 	}
; 82   : 	else {

  00081	eb 76		 jmp	 SHORT $LN3@append
$LN2@append:

; 83   : 		int newIdx = getIndex(size + oSize + 1);

  00083	8b 55 ec	 mov	 edx, DWORD PTR _oSize$[ebp]
  00086	8b 45 f0	 mov	 eax, DWORD PTR _size$[ebp]
  00089	8d 4c 10 01	 lea	 ecx, DWORD PTR [eax+edx+1]
  0008d	51		 push	 ecx
  0008e	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00093	83 c4 04	 add	 esp, 4
  00096	89 45 e8	 mov	 DWORD PTR _newIdx$2[ebp], eax

; 84   : 		TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  00099	8b 55 e8	 mov	 edx, DWORD PTR _newIdx$2[ebp]
  0009c	52		 push	 edx
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000a3	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  000a8	89 45 e4	 mov	 DWORD PTR _newBuf$1[ebp], eax

; 85   : 		_tcscpy(newBuf, m_pValue);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	51		 push	 ecx
  000b1	8b 55 e4	 mov	 edx, DWORD PTR _newBuf$1[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _strcpy
  000ba	83 c4 08	 add	 esp, 8

; 86   : 		_tcscpy(newBuf + nOLen, str);

  000bd	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$1[ebp]
  000c4	03 4d f4	 add	 ecx, DWORD PTR _nOLen$[ebp]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _strcpy
  000cd	83 c4 08	 add	 esp, 8

; 87   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000d0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d3	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000d6	50		 push	 eax
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dc	52		 push	 edx
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000e3	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 88   : 		m_pValue = newBuf;

  000e8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 4d e4	 mov	 ecx, DWORD PTR _newBuf$1[ebp]
  000ee	89 08		 mov	 DWORD PTR [eax], ecx

; 89   : 		m_nSftIdx = newIdx;

  000f0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f3	8b 45 e8	 mov	 eax, DWORD PTR _newIdx$2[ebp]
  000f6	89 42 04	 mov	 DWORD PTR [edx+4], eax
$LN3@append:

; 90   : 
; 91   : 	}
; 92   : 
; 93   : 	return *this;

  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 94   : }

  000fc	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ff	3b ec		 cmp	 ebp, esp
  00101	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00106	8b e5		 mov	 esp, ebp
  00108	5d		 pop	 ebp
  00109	c2 04 00	 ret	 4
?append@CmString@@QAEAAV1@PBD@Z ENDP			; CmString::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??4CmString@@QAEAAV0@PBD@Z PROC				; CmString::operator=
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   : 	int size = STRING_SIZE(str);

  00017	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _strlen
  00020	83 c4 04	 add	 esp, 4
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 54   : 
; 55   : 	if (m_nSftIdx) {

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00030	74 7d		 je	 SHORT $LN2@operator

; 56   : 		if (getSizeByIndex(m_nSftIdx) > size) {

  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0003e	83 c4 04	 add	 esp, 4
  00041	3b 45 f8	 cmp	 eax, DWORD PTR _size$[ebp]
  00044	7e 14		 jle	 SHORT $LN4@operator

; 57   : 			_tcscpy(m_pValue, str);

  00046	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00049	51		 push	 ecx
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004d	8b 02		 mov	 eax, DWORD PTR [edx]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 _strcpy
  00055	83 c4 08	 add	 esp, 8

; 58   : 		}
; 59   : 		else {

  00058	eb 53		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 60   : 			gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00060	52		 push	 edx
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	51		 push	 ecx
  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0006d	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 61   : 			m_nSftIdx = getIndex(size);

  00072	8b 55 f8	 mov	 edx, DWORD PTR _size$[ebp]
  00075	52		 push	 edx
  00076	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0007b	83 c4 04	 add	 esp, 4
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 62   : 			m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00084	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00087	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008a	50		 push	 eax
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00091	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	89 01		 mov	 DWORD PTR [ecx], eax

; 63   : 			_tcscpy(m_pValue, str);

  0009b	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  0009e	52		 push	 edx
  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 _strcpy
  000aa	83 c4 08	 add	 esp, 8
$LN5@operator:

; 64   : 		}
; 65   : 	}
; 66   : 	else {

  000ad	eb 3b		 jmp	 SHORT $LN3@operator
$LN2@operator:

; 67   : 		m_nSftIdx = getIndex(size);

  000af	8b 55 f8	 mov	 edx, DWORD PTR _size$[ebp]
  000b2	52		 push	 edx
  000b3	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  000b8	83 c4 04	 add	 esp, 4
  000bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 68   : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  000c1	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000c7	50		 push	 eax
  000c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000ce	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	89 01		 mov	 DWORD PTR [ecx], eax

; 69   : 		_tcscpy(m_pValue, str);

  000d8	8b 55 08	 mov	 edx, DWORD PTR _str$[ebp]
  000db	52		 push	 edx
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e1	51		 push	 ecx
  000e2	e8 00 00 00 00	 call	 _strcpy
  000e7	83 c4 08	 add	 esp, 8
$LN3@operator:

; 70   : 	}	
; 71   : 	return *this;

  000ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 72   : }

  000ed	83 c4 08	 add	 esp, 8
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
??4CmString@@QAEAAV0@PBD@Z ENDP				; CmString::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_orignLen$ = -16					; size = 4
_i$ = -12						; size = 4
_nLen$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??8CmString@@QAE_NPBD@Z PROC				; CmString::operator==
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 166  : 	size_t nLen = _tcslen(str), i, orignLen = _tcslen(m_pValue);

  0001a	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 _strlen
  00023	83 c4 04	 add	 esp, 4
  00026	89 45 f8	 mov	 DWORD PTR _nLen$[ebp], eax
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _strlen
  00034	83 c4 04	 add	 esp, 4
  00037	89 45 f0	 mov	 DWORD PTR _orignLen$[ebp], eax

; 167  : 	if (nLen != orignLen) return false;

  0003a	8b 45 f8	 mov	 eax, DWORD PTR _nLen$[ebp]
  0003d	3b 45 f0	 cmp	 eax, DWORD PTR _orignLen$[ebp]
  00040	74 04		 je	 SHORT $LN5@operator
  00042	32 c0		 xor	 al, al
  00044	eb 3b		 jmp	 SHORT $LN1@operator
$LN5@operator:

; 168  : 	for (i = 0; i < nLen; i++) {

  00046	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0004f	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00052	83 c1 01	 add	 ecx, 1
  00055	89 4d f4	 mov	 DWORD PTR _i$[ebp], ecx
$LN4@operator:
  00058	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0005b	3b 55 f8	 cmp	 edx, DWORD PTR _nLen$[ebp]
  0005e	73 1f		 jae	 SHORT $LN3@operator

; 169  : 		if (m_pValue[i] != str[i]) return false;

  00060	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  00068	0f be 04 11	 movsx	 eax, BYTE PTR [ecx+edx]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  0006f	03 4d f4	 add	 ecx, DWORD PTR _i$[ebp]
  00072	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00075	3b c2		 cmp	 eax, edx
  00077	74 04		 je	 SHORT $LN6@operator
  00079	32 c0		 xor	 al, al
  0007b	eb 04		 jmp	 SHORT $LN1@operator
$LN6@operator:

; 170  : 	}

  0007d	eb d0		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 171  : 	return true;

  0007f	b0 01		 mov	 al, 1
$LN1@operator:

; 172  : }

  00081	83 c4 10	 add	 esp, 16			; 00000010H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
??8CmString@@QAE_NPBD@Z ENDP				; CmString::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?capacity_idx@CmString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity_idx@CmString@@QBEHXZ PROC			; CmString::capacity_idx, COMDAT
; _this$ = ecx

; 37   : 	inline int capacity_idx() const {return m_nSftIdx;}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?capacity_idx@CmString@@QBEHXZ ENDP			; CmString::capacity_idx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?c_str@CmString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?c_str@CmString@@QBEPBDXZ PROC				; CmString::c_str, COMDAT
; _this$ = ecx

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?c_str@CmString@@QBEPBDXZ ENDP				; CmString::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CmString@@QAE@XZ PROC				; CmString::~CmString
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CmString@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	if (m_pValue) {

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	74 2b		 je	 SHORT $LN3@CmString

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00035	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003b	52		 push	 edx
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	51		 push	 ecx
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00048	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  0004d	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00050	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 45   : 		m_nSftIdx = 0;

  00056	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00059	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN3@CmString:

; 46   : 	}
; 47   : }

  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	83 c4 10	 add	 esp, 16			; 00000010H
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1CmString@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CmString@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CmString@@QAE@XZ ENDP				; CmString::~CmString
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??0CmString@@QAE@PBV0@@Z PROC				; CmString::CmString
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 35   : 	m_nSftIdx = str->capacity_idx();

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00011	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QBEHXZ ; CmString::capacity_idx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 36   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00022	50		 push	 eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00029	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	89 01		 mov	 DWORD PTR [ecx], eax

; 37   : 	_tcscpy(m_pValue, str->c_str());

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00036	e8 00 00 00 00	 call	 ?c_str@CmString@@QBEPBDXZ ; CmString::c_str
  0003b	50		 push	 eax
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 02		 mov	 eax, DWORD PTR [edx]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8

; 38   : }

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??0CmString@@QAE@PBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??0CmString@@QAE@ABV0@@Z PROC				; CmString::CmString
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   : 	m_nSftIdx = str.capacity_idx();

  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00011	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QBEHXZ ; CmString::capacity_idx
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 29   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00022	50		 push	 eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00029	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	89 01		 mov	 DWORD PTR [ecx], eax

; 30   : 	_tcscpy(m_pValue, str.c_str());

  00033	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00036	e8 00 00 00 00	 call	 ?c_str@CmString@@QBEPBDXZ ; CmString::c_str
  0003b	50		 push	 eax
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 02		 mov	 eax, DWORD PTR [edx]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _strcpy
  00047	83 c4 08	 add	 esp, 8

; 31   : }

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
??0CmString@@QAE@ABV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0CmString@@QAE@H@Z PROC				; CmString::CmString
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 21   : 	m_nSftIdx = getIndex(size);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00017	83 c4 04	 add	 esp, 4
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 22   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	50		 push	 eax
  00027	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0002d	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 23   : 	m_pValue[0] = 0;

  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	6b c2 00	 imul	 eax, edx, 0
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 11		 mov	 edx, DWORD PTR [ecx]
  00044	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 24   : }

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 c4 04	 add	 esp, 4
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0CmString@@QAE@H@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_str$ = 8						; size = 4
??0CmString@@QAE@PBD@Z PROC				; CmString::CmString
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 13   : 	int size = STRING_SIZE(str);

  00017	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 _strlen
  00020	83 c4 04	 add	 esp, 4
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _size$[ebp], eax

; 14   : 	m_nSftIdx = getIndex(size);

  00029	8b 4d f8	 mov	 ecx, DWORD PTR _size$[ebp]
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00032	83 c4 04	 add	 esp, 4
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 15   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00041	51		 push	 ecx
  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00048	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QAEPADH@Z ; CMemManager::newBufByIndex
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	89 02		 mov	 DWORD PTR [edx], eax

; 16   : 	_tcscpy(m_pValue, str);

  00052	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00055	50		 push	 eax
  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	52		 push	 edx
  0005c	e8 00 00 00 00	 call	 _strcpy
  00061	83 c4 08	 add	 esp, 8

; 17   : }

  00064	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
??0CmString@@QAE@PBD@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CmString@@QAE@XZ PROC				; CmString::CmString
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 7    : 	m_nSftIdx = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 8    : 	m_pValue = NULL;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 9    : }

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CmString@@QAE@XZ ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?newBufByIndex@CMemManager@@QAEPADH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nIdx$ = 8						; size = 4
?newBufByIndex@CMemManager@@QAEPADH@Z PROC		; CMemManager::newBufByIndex, COMDAT
; _this$ = ecx

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	8b 45 08	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00013	50		 push	 eax
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00017	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?newBufByIndex@CMemManager@@QAEPADH@Z ENDP		; CMemManager::newBufByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getSizeByIndex@@YAHH@Z
_TEXT	SEGMENT
_nIdx$ = 8						; size = 4
?getSizeByIndex@@YAHH@Z PROC				; getSizeByIndex, COMDAT

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00006	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?g_nSizeList@@3QBHB[eax*4]
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?getSizeByIndex@@YAHH@Z ENDP				; getSizeByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
tv73 = -24						; size = 4
_$S1$ = -16						; size = 8
_m$ = -4						; size = 4
_s$ = 8							; size = 4
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	f2 0f 2a 45 08	 cvtsi2sd xmm0, DWORD PTR _s$[ebp]
  00022	f2 0f 11 45 f0	 movsd	 QWORD PTR _$S1$[ebp], xmm0
  00027	b8 04 00 00 00	 mov	 eax, 4
  0002c	c1 e0 00	 shl	 eax, 0
  0002f	8b 4c 05 f0	 mov	 ecx, DWORD PTR _$S1$[ebp+eax]
  00033	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00036	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0003c	89 4d fc	 mov	 DWORD PTR _m$[ebp], ecx
  0003f	ba 01 00 00 00	 mov	 edx, 1
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _m$[ebp]
  00047	d3 e2		 shl	 edx, cl
  00049	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004c	2b c2		 sub	 eax, edx
  0004e	23 45 08	 and	 eax, DWORD PTR _s$[ebp]
  00051	74 09		 je	 SHORT $LN3@getIndex
  00053	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0005a	eb 07		 jmp	 SHORT $LN4@getIndex
$LN3@getIndex:
  0005c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@getIndex:
  00063	8b 45 fc	 mov	 eax, DWORD PTR _m$[ebp]
  00066	03 45 e8	 add	 eax, DWORD PTR tv73[ebp]
  00069	52		 push	 edx
  0006a	8b cd		 mov	 ecx, ebp
  0006c	50		 push	 eax
  0006d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@getIndex
  00073	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00078	58		 pop	 eax
  00079	5a		 pop	 edx
  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
  0007e	66 90		 npad	 2
$LN7@getIndex:
  00080	01 00 00 00	 DD	 1
  00084	00 00 00 00	 DD	 $LN6@getIndex
$LN6@getIndex:
  00088	f0 ff ff ff	 DD	 -16			; fffffff0H
  0008c	08 00 00 00	 DD	 8
  00090	00 00 00 00	 DD	 $LN5@getIndex
$LN5@getIndex:
  00094	24		 DB	 36			; 00000024H
  00095	53		 DB	 83			; 00000053H
  00096	31		 DB	 49			; 00000031H
  00097	00		 DB	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_max$ = 12						; size = 4
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 00	 cmp	 DWORD PTR _i$[ebp], 0
  00007	7c 0c		 jl	 SHORT $LN2@ISINCLUDE
  00009	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  0000c	3b 45 0c	 cmp	 eax, DWORD PTR _max$[ebp]
  0000f	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  00011	b0 01		 mov	 al, 1
  00013	eb 02		 jmp	 SHORT $LN1@ISINCLUDE
$LN2@ISINCLUDE:
  00015	32 c0		 xor	 al, al
$LN1@ISINCLUDE:
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Source$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __Dst$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1546 : #pragma warning(pop)
; 1547 : }

  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsncpy ENDP
_TEXT	ENDS
END
