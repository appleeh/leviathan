; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comDateTime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG80955 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG80956 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG80963 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG80964 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG80975 DB	'ERROR _localtime_s', 0aH, 00H
$SG80976 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG80977 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG80985 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG80986 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG80987 DB	'gm time and date : %s', 0aH, 00H
	ORG $+1
$SG81036 DB	'+00:00', 00H
	ORG $+1
$SG81038 DB	'+09:00', 00H
	ORG $+1
$SG81052 DB	'ERROR _localtime_s', 0aH, 00H
$SG81079 DB	'%d', 00H
	ORG $+1
$SG81101 DB	'%04d%c%02d%c%02d', 00H
	ORG $+3
$SG81102 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81108 DB	'%d', 00H
	ORG $+1
$SG81109 DB	'%s', 00H
	ORG $+1
$SG81112 DB	'%s%c%02d%c%02d', 00H
	ORG $+1
$SG81113 DB	'%0s%02d%02d', 00H
$SG81120 DB	'%02d:%02d:%02d', 00H
	ORG $+1
$SG81121 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81131 DB	'CDateTime::addDateString', 00H
	ORG $+3
$SG81132 DB	'%s %d ERROR _localtime_s', 0aH, 00H
	ORG $+2
$SG81135 DB	'%04d%c%02d%c%02d', 00H
	ORG $+3
$SG81136 DB	'%04d%02d%02d', 00H
CONST	ENDS
_DATA	SEGMENT
?g_nTimeSize@@3HA DD 08H				; g_nTimeSize
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	__vsnprintf_l
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	?m_Sleep@Misc@@SAXH@Z				; Misc::m_Sleep
PUBLIC	?u_Sleep@Misc@@SAXH@Z				; Misc::u_Sleep
PUBLIC	?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z	; Misc::timespec_diff
PUBLIC	?getmillisec@Misc@@SAXPAUtimespec@@@Z		; Misc::getmillisec
PUBLIC	?getFileTime@Misc@@SAXPAUtimespec@@_N@Z		; Misc::getFileTime
PUBLIC	??0CFileTime@@QAE@XZ				; CFileTime::CFileTime
PUBLIC	??1CFileTime@@QAE@XZ				; CFileTime::~CFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPAD@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPA_J@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z	; CFileTime::setFileTime
PUBLIC	?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z ; CFileTime::isCompare
PUBLIC	?getDate@CFileTime@@QAEHXZ			; CFileTime::getDate
PUBLIC	?getTime@CFileTime@@QAEHXZ			; CFileTime::getTime
PUBLIC	??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z	; CDateTime::CDateTime
PUBLIC	??1CDateTime@@QAE@XZ				; CDateTime::~CDateTime
PUBLIC	?SetTimeValue@CDateTime@@QAEXPA_J@Z		; CDateTime::SetTimeValue
PUBLIC	?SetSecondsValue@CDateTime@@QAEXH@Z		; CDateTime::SetSecondsValue
PUBLIC	?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
PUBLIC	?DateString@CDateTime@@QAEPBDD@Z		; CDateTime::DateString
PUBLIC	?DateString2@CDateTime@@QAEPBDD@Z		; CDateTime::DateString2
PUBLIC	?TimeString@CDateTime@@QAEPBD_N@Z		; CDateTime::TimeString
PUBLIC	?addDateString@CDateTime@@QAEPBDHD@Z		; CDateTime::addDateString
PUBLIC	?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z	; CDateTime::setString
PUBLIC	?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z	; CDateTime::uptoSeconds
PUBLIC	?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z	; CDateTime::uptoMilliSeconds
PUBLIC	?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
PUBLIC	?initTimeZone@@YAXXZ				; initTimeZone
PUBLIC	?getTimeInterval@@YAXPAUSTTime@@00H@Z		; getTimeInterval
PUBLIC	?getCurrentTime@@YAXPAUSTTime@@@Z		; getCurrentTime
PUBLIC	?setLocalFileTime@@YA_NPA_JPAH1@Z		; setLocalFileTime
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__asctime:PROC
EXTRN	__imp___gmtime64:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetTimeZoneInformation@4:PROC
EXTRN	__imp__FileTimeToSystemTime@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__aulldiv:PROC
EXTRN	__aullrem:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_stTZ@@3USTTimeZone@@A DB 010H DUP (?)		; g_stTZ
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_err$ = -80						; size = 4
_szDate$ = -72						; size = 16
_ltm$ = -52						; size = 4
_tmTime$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
_fileTime$ = 8						; size = 4
_pDate$ = 12						; size = 4
_pTime$ = 16						; size = 4
?setLocalFileTime@@YA_NPA_JPAH1@Z PROC			; setLocalFileTime

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000b	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 98   : 	struct	tm	tmTime, *ltm = &tmTime;

  00021	8d 45 d4	 lea	 eax, DWORD PTR _tmTime$[ebp]
  00024	89 45 cc	 mov	 DWORD PTR _ltm$[ebp], eax

; 99   : 	TCHAR szDate[16];
; 100  : #ifndef WIN32
; 101  : 	ltm = localtime(&fileTime);
; 102  : #else
; 103  : 	errno_t err = localtime_s(ltm, fileTime);

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _fileTime$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 cc	 mov	 edx, DWORD PTR _ltm$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 _localtime_s
  00034	83 c4 08	 add	 esp, 8
  00037	89 45 b0	 mov	 DWORD PTR _err$[ebp], eax

; 104  : 	if (err) { _tprintf(_T("ERROR _localtime_s\n")); return false; }

  0003a	83 7d b0 00	 cmp	 DWORD PTR _err$[ebp], 0
  0003e	74 14		 je	 SHORT $LN2@setLocalFi
  00040	68 00 00 00 00	 push	 OFFSET $SG80975
  00045	e8 00 00 00 00	 call	 _printf
  0004a	83 c4 04	 add	 esp, 4
  0004d	32 c0		 xor	 al, al
  0004f	e9 86 00 00 00	 jmp	 $LN1@setLocalFi
$LN2@setLocalFi:

; 105  : #endif
; 106  : 	tmTime.tm_year += 1900;

  00054	8b 45 e8	 mov	 eax, DWORD PTR _tmTime$[ebp+20]
  00057	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0005c	89 45 e8	 mov	 DWORD PTR _tmTime$[ebp+20], eax

; 107  : 	tmTime.tm_mon += 1;

  0005f	8b 4d e4	 mov	 ecx, DWORD PTR _tmTime$[ebp+16]
  00062	83 c1 01	 add	 ecx, 1
  00065	89 4d e4	 mov	 DWORD PTR _tmTime$[ebp+16], ecx

; 108  : 
; 109  : 	_stprintf(szDate, "%04d%02d%02d", tmTime.tm_year, tmTime.tm_mon, tmTime.tm_mday);

  00068	8b 55 e0	 mov	 edx, DWORD PTR _tmTime$[ebp+12]
  0006b	52		 push	 edx
  0006c	8b 45 e4	 mov	 eax, DWORD PTR _tmTime$[ebp+16]
  0006f	50		 push	 eax
  00070	8b 4d e8	 mov	 ecx, DWORD PTR _tmTime$[ebp+20]
  00073	51		 push	 ecx
  00074	68 00 00 00 00	 push	 OFFSET $SG80976
  00079	8d 55 b8	 lea	 edx, DWORD PTR _szDate$[ebp]
  0007c	52		 push	 edx
  0007d	e8 00 00 00 00	 call	 _sprintf
  00082	83 c4 14	 add	 esp, 20			; 00000014H

; 110  : 	*pDate = atoi(szDate);

  00085	8b f4		 mov	 esi, esp
  00087	8d 45 b8	 lea	 eax, DWORD PTR _szDate$[ebp]
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	8b 4d 0c	 mov	 ecx, DWORD PTR _pDate$[ebp]
  0009e	89 01		 mov	 DWORD PTR [ecx], eax

; 111  : 	_stprintf(szDate, "%02d%02d%02d", tmTime.tm_hour, tmTime.tm_min, tmTime.tm_sec);

  000a0	8b 55 d4	 mov	 edx, DWORD PTR _tmTime$[ebp]
  000a3	52		 push	 edx
  000a4	8b 45 d8	 mov	 eax, DWORD PTR _tmTime$[ebp+4]
  000a7	50		 push	 eax
  000a8	8b 4d dc	 mov	 ecx, DWORD PTR _tmTime$[ebp+8]
  000ab	51		 push	 ecx
  000ac	68 00 00 00 00	 push	 OFFSET $SG80977
  000b1	8d 55 b8	 lea	 edx, DWORD PTR _szDate$[ebp]
  000b4	52		 push	 edx
  000b5	e8 00 00 00 00	 call	 _sprintf
  000ba	83 c4 14	 add	 esp, 20			; 00000014H

; 112  : 	*pTime = atoi(szDate);

  000bd	8b f4		 mov	 esi, esp
  000bf	8d 45 b8	 lea	 eax, DWORD PTR _szDate$[ebp]
  000c2	50		 push	 eax
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000c9	83 c4 04	 add	 esp, 4
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d3	8b 4d 10	 mov	 ecx, DWORD PTR _pTime$[ebp]
  000d6	89 01		 mov	 DWORD PTR [ecx], eax

; 113  : 
; 114  : 	return true;

  000d8	b0 01		 mov	 al, 1
$LN1@setLocalFi:

; 115  : }

  000da	52		 push	 edx
  000db	8b cd		 mov	 ecx, ebp
  000dd	50		 push	 eax
  000de	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@setLocalFi
  000e4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e9	58		 pop	 eax
  000ea	5a		 pop	 edx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000f0	33 cd		 xor	 ecx, ebp
  000f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f7	83 c4 50	 add	 esp, 80			; 00000050H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
  00105	0f 1f 00	 npad	 3
$LN7@setLocalFi:
  00108	02 00 00 00	 DD	 2
  0010c	00 00 00 00	 DD	 $LN6@setLocalFi
$LN6@setLocalFi:
  00110	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00114	24 00 00 00	 DD	 36			; 00000024H
  00118	00 00 00 00	 DD	 $LN4@setLocalFi
  0011c	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00120	10 00 00 00	 DD	 16			; 00000010H
  00124	00 00 00 00	 DD	 $LN5@setLocalFi
$LN5@setLocalFi:
  00128	73		 DB	 115			; 00000073H
  00129	7a		 DB	 122			; 0000007aH
  0012a	44		 DB	 68			; 00000044H
  0012b	61		 DB	 97			; 00000061H
  0012c	74		 DB	 116			; 00000074H
  0012d	65		 DB	 101			; 00000065H
  0012e	00		 DB	 0
$LN4@setLocalFi:
  0012f	74		 DB	 116			; 00000074H
  00130	6d		 DB	 109			; 0000006dH
  00131	54		 DB	 84			; 00000054H
  00132	69		 DB	 105			; 00000069H
  00133	6d		 DB	 109			; 0000006dH
  00134	65		 DB	 101			; 00000065H
  00135	00		 DB	 0
?setLocalFileTime@@YA_NPA_JPAH1@Z ENDP			; setLocalFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_sysTm$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_pTime$ = 8						; size = 4
?getCurrentTime@@YAXPAUSTTime@@@Z PROC			; getCurrentTime

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00026	33 c5		 xor	 eax, ebp
  00028	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 466  : #ifndef WIN32
; 467  : 	struct	tm	ltm;
; 468  : 	ltm = &_tm;
; 469  : 	struct timespec tp;
; 470  : 	clock_gettime(CLOCK_REALTIME, &tp);
; 471  : 	pTime->nLast = tp.tv_nsec % MILLISEC_PER_SEC;
; 472  : 	time_t t = time(NULL);
; 473  : 	errno_t err = localtime_s(&ltm, &t);
; 474  : 	pTime->nHour = ltm.tm_hour;
; 475  : 	pTime->nMinute = ltm.tm_min;
; 476  : 	pTime->nSec = ltm.tm_sec;
; 477  : #else
; 478  : 	SYSTEMTIME	sysTm;
; 479  : 	GetSystemTime(&sysTm);

  0002b	8b f4		 mov	 esi, esp
  0002d	8d 45 e8	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 480  : 	pTime->nHour = sysTm.wHour;

  0003e	0f b7 4d f0	 movzx	 ecx, WORD PTR _sysTm$[ebp+8]
  00042	8b 55 08	 mov	 edx, DWORD PTR _pTime$[ebp]
  00045	89 0a		 mov	 DWORD PTR [edx], ecx

; 481  : 	pTime->nMinute = sysTm.wMinute;

  00047	0f b7 45 f2	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  0004b	8b 4d 08	 mov	 ecx, DWORD PTR _pTime$[ebp]
  0004e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 482  : 	pTime->nSec = sysTm.wSecond;

  00051	0f b7 55 f4	 movzx	 edx, WORD PTR _sysTm$[ebp+12]
  00055	8b 45 08	 mov	 eax, DWORD PTR _pTime$[ebp]
  00058	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 483  : 	pTime->nLast = sysTm.wMilliseconds;

  0005b	0f b7 4d f6	 movzx	 ecx, WORD PTR _sysTm$[ebp+14]
  0005f	8b 55 08	 mov	 edx, DWORD PTR _pTime$[ebp]
  00062	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 484  : #endif
; 485  : }

  00065	52		 push	 edx
  00066	8b cd		 mov	 ecx, ebp
  00068	50		 push	 eax
  00069	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@getCurrent
  0006f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00074	58		 pop	 eax
  00075	5a		 pop	 edx
  00076	5e		 pop	 esi
  00077	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0007a	33 cd		 xor	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00081	83 c4 1c	 add	 esp, 28			; 0000001cH
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
  0008f	90		 npad	 1
$LN5@getCurrent:
  00090	01 00 00 00	 DD	 1
  00094	00 00 00 00	 DD	 $LN4@getCurrent
$LN4@getCurrent:
  00098	e8 ff ff ff	 DD	 -24			; ffffffe8H
  0009c	10 00 00 00	 DD	 16			; 00000010H
  000a0	00 00 00 00	 DD	 $LN3@getCurrent
$LN3@getCurrent:
  000a4	73		 DB	 115			; 00000073H
  000a5	79		 DB	 121			; 00000079H
  000a6	73		 DB	 115			; 00000073H
  000a7	54		 DB	 84			; 00000054H
  000a8	6d		 DB	 109			; 0000006dH
  000a9	00		 DB	 0
?getCurrentTime@@YAXPAUSTTime@@@Z ENDP			; getCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_nValue$ = -4						; size = 4
_pTime1$ = 8						; size = 4
_pTime2$ = 12						; size = 4
_pTimeTarget$ = 16					; size = 4
_nLastLen$ = 20						; size = 4
?getTimeInterval@@YAXPAUSTTime@@00H@Z PROC		; getTimeInterval

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 489  : 	int nValue = 0, i;

  00014	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _nValue$[ebp], 0

; 490  : 	if (pTime2->nLast < pTime1->nLast) {

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pTime1$[ebp]
  00021	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00024	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00027	7d 50		 jge	 SHORT $LN5@getTimeInt

; 491  : 		nValue = 1;

  00029	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _nValue$[ebp], 1

; 492  : 		for (i = 0; i < nLastLen; i++)

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00037	eb 09		 jmp	 SHORT $LN4@getTimeInt
$LN2@getTimeInt:
  00039	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0003c	83 c0 01	 add	 eax, 1
  0003f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@getTimeInt:
  00042	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00045	3b 4d 14	 cmp	 ecx, DWORD PTR _nLastLen$[ebp]
  00048	7d 09		 jge	 SHORT $LN3@getTimeInt

; 493  : 		{
; 494  : 			nValue = nValue * 10;

  0004a	6b 55 fc 0a	 imul	 edx, DWORD PTR _nValue$[ebp], 10
  0004e	89 55 fc	 mov	 DWORD PTR _nValue$[ebp], edx

; 495  : 		}

  00051	eb e6		 jmp	 SHORT $LN2@getTimeInt
$LN3@getTimeInt:

; 496  : 		pTimeTarget->nLast = (pTime2->nLast + nValue) - pTime1->nLast;

  00053	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  00056	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00059	03 4d fc	 add	 ecx, DWORD PTR _nValue$[ebp]
  0005c	8b 55 08	 mov	 edx, DWORD PTR _pTime1$[ebp]
  0005f	2b 4a 0c	 sub	 ecx, DWORD PTR [edx+12]
  00062	8b 45 10	 mov	 eax, DWORD PTR _pTimeTarget$[ebp]
  00065	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 497  : 		pTime2->nSec -= 1;

  00068	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  0006b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006e	83 ea 01	 sub	 edx, 1
  00071	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  00074	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 498  : 	}
; 499  : 	else {

  00077	eb 12		 jmp	 SHORT $LN6@getTimeInt
$LN5@getTimeInt:

; 500  : 		pTimeTarget->nLast = pTime2->nLast - pTime1->nLast;

  00079	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  0007c	8b 55 08	 mov	 edx, DWORD PTR _pTime1$[ebp]
  0007f	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00082	2b 42 0c	 sub	 eax, DWORD PTR [edx+12]
  00085	8b 4d 10	 mov	 ecx, DWORD PTR _pTimeTarget$[ebp]
  00088	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN6@getTimeInt:

; 501  : 	}
; 502  : 
; 503  : 	if (pTime2->nSec < pTime1->nSec) {

  0008b	8b 55 0c	 mov	 edx, DWORD PTR _pTime2$[ebp]
  0008e	8b 45 08	 mov	 eax, DWORD PTR _pTime1$[ebp]
  00091	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00094	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00097	7d 26		 jge	 SHORT $LN7@getTimeInt

; 504  : 		pTimeTarget->nSec = (pTime2->nSec + 60) - pTime1->nSec;

  00099	8b 55 0c	 mov	 edx, DWORD PTR _pTime2$[ebp]
  0009c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009f	83 c0 3c	 add	 eax, 60			; 0000003cH
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _pTime1$[ebp]
  000a5	2b 41 08	 sub	 eax, DWORD PTR [ecx+8]
  000a8	8b 55 10	 mov	 edx, DWORD PTR _pTimeTarget$[ebp]
  000ab	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 505  : 		pTime2->nMinute -= 1;

  000ae	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  000b1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b4	83 e9 01	 sub	 ecx, 1
  000b7	8b 55 0c	 mov	 edx, DWORD PTR _pTime2$[ebp]
  000ba	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 506  : 	}
; 507  : 	else {

  000bd	eb 12		 jmp	 SHORT $LN8@getTimeInt
$LN7@getTimeInt:

; 508  : 		pTimeTarget->nSec = pTime2->nSec - pTime1->nSec;

  000bf	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _pTime1$[ebp]
  000c5	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000c8	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  000cb	8b 45 10	 mov	 eax, DWORD PTR _pTimeTarget$[ebp]
  000ce	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN8@getTimeInt:

; 509  : 	}
; 510  : 
; 511  : 	if (pTime2->nMinute < pTime1->nMinute) {

  000d1	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  000d4	8b 55 08	 mov	 edx, DWORD PTR _pTime1$[ebp]
  000d7	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000da	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  000dd	7d 24		 jge	 SHORT $LN9@getTimeInt

; 512  : 		pTimeTarget->nMinute = (pTime2->nMinute + 60) - pTime1->nMinute;

  000df	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  000e2	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e5	83 c2 3c	 add	 edx, 60			; 0000003cH
  000e8	8b 45 08	 mov	 eax, DWORD PTR _pTime1$[ebp]
  000eb	2b 50 04	 sub	 edx, DWORD PTR [eax+4]
  000ee	8b 4d 10	 mov	 ecx, DWORD PTR _pTimeTarget$[ebp]
  000f1	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 513  : 		pTime2->nHour -= 1;

  000f4	8b 55 0c	 mov	 edx, DWORD PTR _pTime2$[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	83 e8 01	 sub	 eax, 1
  000fc	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  000ff	89 01		 mov	 DWORD PTR [ecx], eax

; 514  : 	}
; 515  : 	else {

  00101	eb 12		 jmp	 SHORT $LN10@getTimeInt
$LN9@getTimeInt:

; 516  : 		pTimeTarget->nMinute = pTime2->nMinute - pTime1->nMinute;

  00103	8b 55 0c	 mov	 edx, DWORD PTR _pTime2$[ebp]
  00106	8b 45 08	 mov	 eax, DWORD PTR _pTime1$[ebp]
  00109	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0010c	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0010f	8b 55 10	 mov	 edx, DWORD PTR _pTimeTarget$[ebp]
  00112	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN10@getTimeInt:

; 517  : 	}
; 518  : 	pTimeTarget->nHour = pTime2->nHour - pTime1->nHour;

  00115	8b 45 0c	 mov	 eax, DWORD PTR _pTime2$[ebp]
  00118	8b 4d 08	 mov	 ecx, DWORD PTR _pTime1$[ebp]
  0011b	8b 10		 mov	 edx, DWORD PTR [eax]
  0011d	2b 11		 sub	 edx, DWORD PTR [ecx]
  0011f	8b 45 10	 mov	 eax, DWORD PTR _pTimeTarget$[ebp]
  00122	89 10		 mov	 DWORD PTR [eax], edx

; 519  : }

  00124	8b e5		 mov	 esp, ebp
  00126	5d		 pop	 ebp
  00127	c3		 ret	 0
?getTimeInterval@@YAXPAUSTTime@@00H@Z ENDP		; getTimeInterval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_tzi$ = -180						; size = 172
__$ArrayPad$ = -4					; size = 4
?initTimeZone@@YAXXZ PROC				; initTimeZone

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b8 00 00
	00		 sub	 esp, 184		; 000000b8H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd 48 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-184]
  00011	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 25   : #ifndef WIN32
; 26   : 	//struct timespec tp;
; 27   : 	//clock_gettime(CLOCK_REALTIME, &tp); 
; 28   : 	//m_tmval.tv_sec = tp.tv_sec;
; 29   : 	//m_tmval.tv_usec = tp.tv_nsec/1000000L;
; 30   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 31   : 	//struct timezone tz;
; 32   : 	//gettimeofday(&m_tmval, &tz);
; 33   : 	//m_tm = *localtime((const time_t*)&m_tmval.tv_sec);
; 34   : 	//gettimeofday(&m_tmval, NULL);
; 35   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 36   : #else
; 37   : 	TIME_ZONE_INFORMATION tzi;
; 38   : 	GetTimeZoneInformation(&tzi);

  00027	8b f4		 mov	 esi, esp
  00029	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _tzi$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTimeZoneInformation@4
  00036	3b f4		 cmp	 esi, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 	g_stTZ.nTZHour = (-tzi.Bias) / 60;

  0003d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _tzi$[ebp]
  00043	f7 d8		 neg	 eax
  00045	99		 cdq
  00046	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0004b	f7 f9		 idiv	 ecx
  0004d	a3 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A, eax

; 40   : 	g_stTZ.nTZMin = (-tzi.Bias) % 60;

  00052	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _tzi$[ebp]
  00058	f7 d8		 neg	 eax
  0005a	99		 cdq
  0005b	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00060	f7 f9		 idiv	 ecx
  00062	89 15 04 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+4, edx

; 41   : 	g_stTZ.nTZSec = (tzi.Bias) * 60;

  00068	6b 95 4c ff ff
	ff 3c		 imul	 edx, DWORD PTR _tzi$[ebp], 60
  0006f	89 15 08 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+8, edx

; 42   : 	g_stTZ.nTZType = 0;

  00075	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+12, 0

; 43   : #endif
; 44   : }

  0007f	52		 push	 edx
  00080	8b cd		 mov	 ecx, ebp
  00082	50		 push	 eax
  00083	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@initTimeZo
  00089	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008e	58		 pop	 eax
  0008f	5a		 pop	 edx
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00095	33 cd		 xor	 ecx, ebp
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	81 c4 b8 00 00
	00		 add	 esp, 184		; 000000b8H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	0f 1f 00	 npad	 3
$LN5@initTimeZo:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN4@initTimeZo
$LN4@initTimeZo:
  000b8	4c ff ff ff	 DD	 -180			; ffffff4cH
  000bc	ac 00 00 00	 DD	 172			; 000000acH
  000c0	00 00 00 00	 DD	 $LN3@initTimeZo
$LN3@initTimeZo:
  000c4	74		 DB	 116			; 00000074H
  000c5	7a		 DB	 122			; 0000007aH
  000c6	69		 DB	 105			; 00000069H
  000c7	00		 DB	 0
?initTimeZone@@YAXXZ ENDP				; initTimeZone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv66 = -9						; size = 1
_ltm$ = -8						; size = 4
_this$ = -4						; size = 4
_nTz$ = 8						; size = 4
_nType$ = 12						; size = 4
?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z PROC ; CDateTime::uptoMicroseconds
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 261  : 	struct	tm	*ltm = &m_tm;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR _ltm$[ebp], eax

; 262  : 	//long divisor;
; 263  : 
; 264  : #ifndef WIN32
; 265  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 266  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 267  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%divisor;
; 268  : 	if(nType == DT_MICROSEC) m_tmval.tv_nsec = m_tmval.tv_nsec%MICROSEC_PER_SEC;
; 269  : #else
; 270  : 	Misc::getFileTime(&m_tmval, nType == DT_MICROSEC?true:false);

  00024	83 7d 0c 03	 cmp	 DWORD PTR _nType$[ebp], 3
  00028	75 06		 jne	 SHORT $LN3@uptoMicros
  0002a	c6 45 f7 01	 mov	 BYTE PTR tv66[ebp], 1
  0002e	eb 04		 jmp	 SHORT $LN4@uptoMicros
$LN3@uptoMicros:
  00030	c6 45 f7 00	 mov	 BYTE PTR tv66[ebp], 0
$LN4@uptoMicros:
  00034	0f b6 4d f7	 movzx	 ecx, BYTE PTR tv66[ebp]
  00038	51		 push	 ecx
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	83 c2 28	 add	 edx, 40			; 00000028H
  0003f	52		 push	 edx
  00040	e8 00 00 00 00	 call	 ?getFileTime@Misc@@SAXPAUtimespec@@_N@Z ; Misc::getFileTime
  00045	83 c4 08	 add	 esp, 8

; 271  : 	uptoSeconds(nTz, m_tmval.tv_sec);

  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  0004e	51		 push	 ecx
  0004f	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00052	52		 push	 edx
  00053	8b 45 08	 mov	 eax, DWORD PTR _nTz$[ebp]
  00056	50		 push	 eax
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 272  : #endif
; 273  : 	//_stprintf(szBuf, _T("%04d/%02d/%02d %02d:%02d:%02d , %d\n"), m_tm.tm_year, m_tm.tm_mon, m_tm.tm_wday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_usec);
; 274  : 	//_tprintf(szBuf);
; 275  : }

  0005f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 08 00	 ret	 8
?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ENDP ; CDateTime::uptoMicroseconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_sysTm$ = -32						; size = 16
_ltm$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nTz$ = 8						; size = 4
?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z PROC	; CDateTime::uptoMilliSeconds
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00031	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 228  : 	// only UTC
; 229  : 	struct	tm	*ltm = &m_tm;

  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	89 45 f4	 mov	 DWORD PTR _ltm$[ebp], eax

; 230  : #ifndef WIN32
; 231  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 232  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 233  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%MILLISEC_PER_SEC;
; 234  : #else
; 235  : 	//GetSystemTime(&sysTm);
; 236  : //	time_t t = time(NULL);
; 237  : 	SYSTEMTIME	sysTm;
; 238  : 	if (nTz == TZ_UTC) {

  0003a	83 7d 08 01	 cmp	 DWORD PTR _nTz$[ebp], 1
  0003e	75 15		 jne	 SHORT $LN2@uptoMilliS

; 239  : 		GetSystemTime(&sysTm);

  00040	8b f4		 mov	 esi, esp
  00042	8d 4d e0	 lea	 ecx, DWORD PTR _sysTm$[ebp]
  00045	51		 push	 ecx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 240  : 	}
; 241  : 	else {//if (nTz == TZ_KST)

  00053	eb 13		 jmp	 SHORT $LN3@uptoMilliS
$LN2@uptoMilliS:

; 242  : 		GetLocalTime(&sysTm);

  00055	8b f4		 mov	 esi, esp
  00057	8d 55 e0	 lea	 edx, DWORD PTR _sysTm$[ebp]
  0005a	52		 push	 edx
  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@uptoMilliS:

; 243  : 	}
; 244  : 	m_tm.tm_year = sysTm.wYear;

  00068	0f b7 45 e0	 movzx	 eax, WORD PTR _sysTm$[ebp]
  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 245  : 	m_tm.tm_mon = sysTm.wMonth;

  00072	0f b7 55 e2	 movzx	 edx, WORD PTR _sysTm$[ebp+2]
  00076	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00079	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 246  : 	m_tm.tm_mday = sysTm.wDay;

  0007c	0f b7 4d e6	 movzx	 ecx, WORD PTR _sysTm$[ebp+6]
  00080	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00083	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 247  : 	m_tm.tm_wday = sysTm.wDayOfWeek;

  00086	0f b7 45 e4	 movzx	 eax, WORD PTR _sysTm$[ebp+4]
  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 248  : 	m_tm.tm_hour = sysTm.wHour;

  00090	0f b7 55 e8	 movzx	 edx, WORD PTR _sysTm$[ebp+8]
  00094	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00097	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 249  : 	m_tm.tm_min = sysTm.wMinute;

  0009a	0f b7 4d ea	 movzx	 ecx, WORD PTR _sysTm$[ebp+10]
  0009e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 250  : 	m_tm.tm_sec = sysTm.wSecond;

  000a4	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	89 01		 mov	 DWORD PTR [ecx], eax

; 251  : 	//uptoSeconds(nTz, t);
; 252  : 	m_tmval.tv_sec = 0;

  000ad	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b0	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
  000b7	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0

; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;

  000be	0f b7 45 ee	 movzx	 eax, WORD PTR _sysTm$[ebp+14]
  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c5	89 41 30	 mov	 DWORD PTR [ecx+48], eax

; 255  : #endif
; 256  : }

  000c8	52		 push	 edx
  000c9	8b cd		 mov	 ecx, ebp
  000cb	50		 push	 eax
  000cc	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@uptoMilliS
  000d2	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d7	58		 pop	 eax
  000d8	5a		 pop	 edx
  000d9	5e		 pop	 esi
  000da	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000dd	33 cd		 xor	 ecx, ebp
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	83 c4 24	 add	 esp, 36			; 00000024H
  000e7	3b ec		 cmp	 ebp, esp
  000e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c2 04 00	 ret	 4
$LN7@uptoMilliS:
  000f4	01 00 00 00	 DD	 1
  000f8	00 00 00 00	 DD	 $LN6@uptoMilliS
$LN6@uptoMilliS:
  000fc	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00100	10 00 00 00	 DD	 16			; 00000010H
  00104	00 00 00 00	 DD	 $LN5@uptoMilliS
$LN5@uptoMilliS:
  00108	73		 DB	 115			; 00000073H
  00109	79		 DB	 121			; 00000079H
  0010a	73		 DB	 115			; 00000073H
  0010b	54		 DB	 84			; 00000054H
  0010c	6d		 DB	 109			; 0000006dH
  0010d	00		 DB	 0
?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z ENDP	; CDateTime::uptoMilliSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_err$1 = -12						; size = 4
_ltm$ = -8						; size = 4
_this$ = -4						; size = 4
_nTz$ = 8						; size = 4
_t$ = 12						; size = 8
?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z PROC	; CDateTime::uptoSeconds
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 201  : 	struct	tm	*ltm;
; 202  : 	if (nTz == TZ_UTC) {

  0001e	83 7d 08 01	 cmp	 DWORD PTR _nTz$[ebp], 1
  00022	75 23		 jne	 SHORT $LN2@uptoSecond

; 203  : #ifndef WIN32
; 204  : 		ltm = gmtime_r(&t, ltm);
; 205  : #else
; 206  : 		ltm = gmtime(&t);

  00024	8d 45 0c	 lea	 eax, DWORD PTR _t$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _gmtime
  0002d	83 c4 04	 add	 esp, 4
  00030	89 45 f8	 mov	 DWORD PTR _ltm$[ebp], eax

; 207  : #endif
; 208  : 		memcpy(&m_tm, ltm, sizeof(m_tm));

  00033	6a 24		 push	 36			; 00000024H
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _ltm$[ebp]
  00038	51		 push	 ecx
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _memcpy
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  : 	}
; 210  : 	else {//if (nTz == TZ_KST) {

  00045	eb 2c		 jmp	 SHORT $LN3@uptoSecond
$LN2@uptoSecond:

; 211  : 		ltm = &m_tm;

  00047	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	89 45 f8	 mov	 DWORD PTR _ltm$[ebp], eax

; 212  : #ifndef WIN32
; 213  : 		ltm = localtime(&t);
; 214  : #else
; 215  : 		errno_t err = localtime_s(ltm, &t);

  0004d	8d 4d 0c	 lea	 ecx, DWORD PTR _t$[ebp]
  00050	51		 push	 ecx
  00051	8b 55 f8	 mov	 edx, DWORD PTR _ltm$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _localtime_s
  0005a	83 c4 08	 add	 esp, 8
  0005d	89 45 f4	 mov	 DWORD PTR _err$1[ebp], eax

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  00060	83 7d f4 00	 cmp	 DWORD PTR _err$1[ebp], 0
  00064	74 0d		 je	 SHORT $LN3@uptoSecond
  00066	68 00 00 00 00	 push	 OFFSET $SG81052
  0006b	e8 00 00 00 00	 call	 _printf
  00070	83 c4 04	 add	 esp, 4
$LN3@uptoSecond:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;

  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00079	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 220  : 	m_tm.tm_mon += 1;

  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0008b	83 c1 01	 add	 ecx, 1
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00091	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 221  : 	m_tmval.tv_sec = t;

  00094	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00097	8b 4d 0c	 mov	 ecx, DWORD PTR _t$[ebp]
  0009a	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  0009d	8b 55 10	 mov	 edx, DWORD PTR _t$[ebp+4]
  000a0	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 222  : 	m_tmval.tv_nsec = 0;

  000a3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a6	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0

; 223  : }

  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b0	3b ec		 cmp	 ebp, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 0c 00	 ret	 12			; 0000000cH
?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ENDP	; CDateTime::uptoSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv64 = -32						; size = 4
_pyear$1 = -24						; size = 6
_nLen$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pTarget$ = 8						; size = 4
_pFormat$ = 12						; size = 4
_nFormat$ = 16						; size = 4
?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z PROC	; CDateTime::setString
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 279  : 	int nLen=0;

  00030	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nLen$[ebp], 0

; 280  : 	switch (nFormat)

  00037	8b 45 10	 mov	 eax, DWORD PTR _nFormat$[ebp]
  0003a	89 45 e0	 mov	 DWORD PTR tv64[ebp], eax
  0003d	8b 4d e0	 mov	 ecx, DWORD PTR tv64[ebp]
  00040	83 e9 01	 sub	 ecx, 1
  00043	89 4d e0	 mov	 DWORD PTR tv64[ebp], ecx
  00046	83 7d e0 08	 cmp	 DWORD PTR tv64[ebp], 8
  0004a	0f 87 20 01 00
	00		 ja	 $LN9@setString
  00050	8b 55 e0	 mov	 edx, DWORD PTR tv64[ebp]
  00053	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@setString[edx]
  0005a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN15@setString[eax*4]
$LN4@setString:

; 281  : 	{
; 282  : 	case LOG_DATE_DDHHMMSS :
; 283  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00061	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	52		 push	 edx
  00067	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006d	51		 push	 ecx
  0006e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00074	50		 push	 eax
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0007b	52		 push	 edx
  0007c	8b 45 0c	 mov	 eax, DWORD PTR _pFormat$[ebp]
  0007f	50		 push	 eax
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _pTarget$[ebp]
  00083	51		 push	 ecx
  00084	e8 00 00 00 00	 call	 _sprintf
  00089	83 c4 18	 add	 esp, 24			; 00000018H
  0008c	89 45 f4	 mov	 DWORD PTR _nLen$[ebp], eax

; 284  : 		break;

  0008f	e9 1f 01 00 00	 jmp	 $LN2@setString
$LN5@setString:

; 285  : 	case LOG_DATE_YYMMDDHHMMSS:
; 286  : 	case LOG_DATE_YYMMDDHHMMSS3:
; 287  : 	case LOG_DATE_YYMMDDHHMMSS6:
; 288  : 	case LOG_DATE_YYMMDDHHMMSS9:
; 289  : 		{
; 290  : 			TCHAR pyear[6];
; 291  : 			_stprintf(pyear, _T("%d"), m_tm.tm_year);

  00094	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009a	50		 push	 eax
  0009b	68 00 00 00 00	 push	 OFFSET $SG81079
  000a0	8d 4d e8	 lea	 ecx, DWORD PTR _pyear$1[ebp]
  000a3	51		 push	 ecx
  000a4	e8 00 00 00 00	 call	 _sprintf
  000a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 292  : 			if (nFormat == LOG_DATE_YYMMDDHHMMSS) {

  000ac	83 7d 10 05	 cmp	 DWORD PTR _nFormat$[ebp], 5
  000b0	75 3b		 jne	 SHORT $LN6@setString

; 293  : 				nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  000b2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8b 02		 mov	 eax, DWORD PTR [edx]
  000b7	50		 push	 eax
  000b8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000be	52		 push	 edx
  000bf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000c2	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c5	51		 push	 ecx
  000c6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000c9	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000cc	50		 push	 eax
  000cd	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000d3	52		 push	 edx
  000d4	8d 45 ea	 lea	 eax, DWORD PTR _pyear$1[ebp+2]
  000d7	50		 push	 eax
  000d8	8b 4d 0c	 mov	 ecx, DWORD PTR _pFormat$[ebp]
  000db	51		 push	 ecx
  000dc	8b 55 08	 mov	 edx, DWORD PTR _pTarget$[ebp]
  000df	52		 push	 edx
  000e0	e8 00 00 00 00	 call	 _sprintf
  000e5	83 c4 20	 add	 esp, 32			; 00000020H
  000e8	89 45 f4	 mov	 DWORD PTR _nLen$[ebp], eax
  000eb	eb 40		 jmp	 SHORT $LN7@setString
$LN6@setString:

; 294  : 			}
; 295  : 			else nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  000ed	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000f0	8b 48 30	 mov	 ecx, DWORD PTR [eax+48]
  000f3	51		 push	 ecx
  000f4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	8b 02		 mov	 eax, DWORD PTR [edx]
  000f9	50		 push	 eax
  000fa	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00100	52		 push	 edx
  00101	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00104	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00107	51		 push	 ecx
  00108	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0010b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0010e	50		 push	 eax
  0010f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00115	52		 push	 edx
  00116	8d 45 ea	 lea	 eax, DWORD PTR _pyear$1[ebp+2]
  00119	50		 push	 eax
  0011a	8b 4d 0c	 mov	 ecx, DWORD PTR _pFormat$[ebp]
  0011d	51		 push	 ecx
  0011e	8b 55 08	 mov	 edx, DWORD PTR _pTarget$[ebp]
  00121	52		 push	 edx
  00122	e8 00 00 00 00	 call	 _sprintf
  00127	83 c4 24	 add	 esp, 36			; 00000024H
  0012a	89 45 f4	 mov	 DWORD PTR _nLen$[ebp], eax
$LN7@setString:

; 296  : 		}
; 297  : 		break;

  0012d	e9 81 00 00 00	 jmp	 $LN2@setString
$LN8@setString:

; 298  : 	case LOG_DATE_YYYYMMDDHHMMSS:
; 299  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00132	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00135	8b 08		 mov	 ecx, DWORD PTR [eax]
  00137	51		 push	 ecx
  00138	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0013e	50		 push	 eax
  0013f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00142	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00145	52		 push	 edx
  00146	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00149	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0014c	51		 push	 ecx
  0014d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00150	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00153	50		 push	 eax
  00154	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0015a	52		 push	 edx
  0015b	8b 45 0c	 mov	 eax, DWORD PTR _pFormat$[ebp]
  0015e	50		 push	 eax
  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _pTarget$[ebp]
  00162	51		 push	 ecx
  00163	e8 00 00 00 00	 call	 _sprintf
  00168	83 c4 20	 add	 esp, 32			; 00000020H
  0016b	89 45 f4	 mov	 DWORD PTR _nLen$[ebp], eax

; 300  : 		break;

  0016e	eb 43		 jmp	 SHORT $LN2@setString
$LN9@setString:

; 301  : 	case LOG_DATE_YYYYMMDDHHMMSS3:
; 302  : 	case LOG_DATE_YYYYMMDDHHMMSS6:
; 303  : 	case LOG_DATE_YYYYMMDDHHMMSS9:
; 304  : 	default:
; 305  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  00170	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00173	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00176	50		 push	 eax
  00177	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017c	52		 push	 edx
  0017d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00180	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00183	51		 push	 ecx
  00184	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00187	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0018a	50		 push	 eax
  0018b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00191	52		 push	 edx
  00192	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00195	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00198	51		 push	 ecx
  00199	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0019f	50		 push	 eax
  001a0	8b 4d 0c	 mov	 ecx, DWORD PTR _pFormat$[ebp]
  001a3	51		 push	 ecx
  001a4	8b 55 08	 mov	 edx, DWORD PTR _pTarget$[ebp]
  001a7	52		 push	 edx
  001a8	e8 00 00 00 00	 call	 _sprintf
  001ad	83 c4 24	 add	 esp, 36			; 00000024H
  001b0	89 45 f4	 mov	 DWORD PTR _nLen$[ebp], eax
$LN2@setString:

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;

  001b3	8b 45 f4	 mov	 eax, DWORD PTR _nLen$[ebp]

; 309  : }

  001b6	52		 push	 edx
  001b7	8b cd		 mov	 ecx, ebp
  001b9	50		 push	 eax
  001ba	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@setString
  001c0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001c5	58		 pop	 eax
  001c6	5a		 pop	 edx
  001c7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ca	33 cd		 xor	 ecx, ebp
  001cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d1	83 c4 20	 add	 esp, 32			; 00000020H
  001d4	3b ec		 cmp	 ebp, esp
  001d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001db	8b e5		 mov	 esp, ebp
  001dd	5d		 pop	 ebp
  001de	c2 0c 00	 ret	 12			; 0000000cH
  001e1	0f 1f 00	 npad	 3
$LN14@setString:
  001e4	01 00 00 00	 DD	 1
  001e8	00 00 00 00	 DD	 $LN13@setString
$LN13@setString:
  001ec	e8 ff ff ff	 DD	 -24			; ffffffe8H
  001f0	06 00 00 00	 DD	 6
  001f4	00 00 00 00	 DD	 $LN12@setString
$LN12@setString:
  001f8	70		 DB	 112			; 00000070H
  001f9	79		 DB	 121			; 00000079H
  001fa	65		 DB	 101			; 00000065H
  001fb	61		 DB	 97			; 00000061H
  001fc	72		 DB	 114			; 00000072H
  001fd	00		 DB	 0
  001fe	66 90		 npad	 2
$LN15@setString:
  00200	00 00 00 00	 DD	 $LN8@setString
  00204	00 00 00 00	 DD	 $LN5@setString
  00208	00 00 00 00	 DD	 $LN4@setString
  0020c	00 00 00 00	 DD	 $LN9@setString
$LN11@setString:
  00210	00		 DB	 0
  00211	03		 DB	 3
  00212	03		 DB	 3
  00213	03		 DB	 3
  00214	01		 DB	 1
  00215	01		 DB	 1
  00216	01		 DB	 1
  00217	01		 DB	 1
  00218	02		 DB	 2
?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z ENDP	; CDateTime::setString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_err$ = -72						; size = 4
_t$ = -64						; size = 36
_timer$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nAddDay$ = 8						; size = 4
_f$ = 12						; size = 1
?addDateString@CDateTime@@QAEPBDHD@Z PROC		; CDateTime::addDateString
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000c	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 _time
  0002d	83 c4 04	 add	 esp, 4
  00030	8b c8		 mov	 ecx, eax
  00032	8b f2		 mov	 esi, edx
  00034	6b 55 08 18	 imul	 edx, DWORD PTR _nAddDay$[ebp], 24
  00038	6b c2 3c	 imul	 eax, edx, 60
  0003b	6b c0 3c	 imul	 eax, eax, 60
  0003e	99		 cdq
  0003f	03 c8		 add	 ecx, eax
  00041	13 f2		 adc	 esi, edx
  00043	89 4d ec	 mov	 DWORD PTR _timer$[ebp], ecx
  00046	89 75 f0	 mov	 DWORD PTR _timer$[ebp+4], esi

; 373  : 	struct tm t;
; 374  : 
; 375  : 	errno_t err = localtime_s(&t, &timer);

  00049	8d 4d ec	 lea	 ecx, DWORD PTR _timer$[ebp]
  0004c	51		 push	 ecx
  0004d	8d 55 c0	 lea	 edx, DWORD PTR _t$[ebp]
  00050	52		 push	 edx
  00051	e8 00 00 00 00	 call	 _localtime_s
  00056	83 c4 08	 add	 esp, 8
  00059	89 45 b8	 mov	 DWORD PTR _err$[ebp], eax

; 376  : 	if (err) _tprintf(_T("%s %d ERROR _localtime_s\n"), __FUNCTION__, __LINE__);

  0005c	83 7d b8 00	 cmp	 DWORD PTR _err$[ebp], 0
  00060	74 17		 je	 SHORT $LN2@addDateStr
  00062	68 78 01 00 00	 push	 376			; 00000178H
  00067	68 00 00 00 00	 push	 OFFSET $SG81131
  0006c	68 00 00 00 00	 push	 OFFSET $SG81132
  00071	e8 00 00 00 00	 call	 _printf
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@addDateStr:

; 377  : 
; 378  : 	if (f) {

  00079	0f be 45 0c	 movsx	 eax, BYTE PTR _f$[ebp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 35		 je	 SHORT $LN3@addDateStr

; 379  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", t.tm_year + 1900, f, t.tm_mon+1, f, t.tm_mday);

  00081	8b 4d cc	 mov	 ecx, DWORD PTR _t$[ebp+12]
  00084	51		 push	 ecx
  00085	0f be 55 0c	 movsx	 edx, BYTE PTR _f$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 d0	 mov	 eax, DWORD PTR _t$[ebp+16]
  0008d	83 c0 01	 add	 eax, 1
  00090	50		 push	 eax
  00091	0f be 4d 0c	 movsx	 ecx, BYTE PTR _f$[ebp]
  00095	51		 push	 ecx
  00096	8b 55 d4	 mov	 edx, DWORD PTR _t$[ebp+20]
  00099	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  0009f	52		 push	 edx
  000a0	68 00 00 00 00	 push	 OFFSET $SG81135
  000a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	83 c0 38	 add	 eax, 56			; 00000038H
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _sprintf
  000b1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 380  : 	}
; 381  : 	else {

  000b4	eb 28		 jmp	 SHORT $LN4@addDateStr
$LN3@addDateStr:

; 382  : 		_stprintf(m_szDate, "%04d%02d%02d", t.tm_year + 1900, t.tm_mon + 1, t.tm_mday);

  000b6	8b 4d cc	 mov	 ecx, DWORD PTR _t$[ebp+12]
  000b9	51		 push	 ecx
  000ba	8b 55 d0	 mov	 edx, DWORD PTR _t$[ebp+16]
  000bd	83 c2 01	 add	 edx, 1
  000c0	52		 push	 edx
  000c1	8b 45 d4	 mov	 eax, DWORD PTR _t$[ebp+20]
  000c4	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  000c9	50		 push	 eax
  000ca	68 00 00 00 00	 push	 OFFSET $SG81136
  000cf	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d2	83 c1 38	 add	 ecx, 56			; 00000038H
  000d5	51		 push	 ecx
  000d6	e8 00 00 00 00	 call	 _sprintf
  000db	83 c4 14	 add	 esp, 20			; 00000014H
$LN4@addDateStr:

; 383  : 	}
; 384  : 	return m_szDate;

  000de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000e1	83 c0 38	 add	 eax, 56			; 00000038H

; 385  : }

  000e4	52		 push	 edx
  000e5	8b cd		 mov	 ecx, ebp
  000e7	50		 push	 eax
  000e8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@addDateStr
  000ee	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000f3	58		 pop	 eax
  000f4	5a		 pop	 edx
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	83 c4 48	 add	 esp, 72			; 00000048H
  00104	3b ec		 cmp	 ebp, esp
  00106	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 08 00	 ret	 8
  00111	0f 1f 00	 npad	 3
$LN9@addDateStr:
  00114	02 00 00 00	 DD	 2
  00118	00 00 00 00	 DD	 $LN8@addDateStr
$LN8@addDateStr:
  0011c	ec ff ff ff	 DD	 -20			; ffffffecH
  00120	08 00 00 00	 DD	 8
  00124	00 00 00 00	 DD	 $LN6@addDateStr
  00128	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0012c	24 00 00 00	 DD	 36			; 00000024H
  00130	00 00 00 00	 DD	 $LN7@addDateStr
$LN7@addDateStr:
  00134	74		 DB	 116			; 00000074H
  00135	00		 DB	 0
$LN6@addDateStr:
  00136	74		 DB	 116			; 00000074H
  00137	69		 DB	 105			; 00000069H
  00138	6d		 DB	 109			; 0000006dH
  00139	65		 DB	 101			; 00000065H
  0013a	72		 DB	 114			; 00000072H
  0013b	00		 DB	 0
?addDateString@CDateTime@@QAEPBDHD@Z ENDP		; CDateTime::addDateString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 1
?TimeString@CDateTime@@QAEPBD_N@Z PROC			; CDateTime::TimeString
; _this$ = ecx

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 360  : 	if (f) {

  0000e	0f b6 45 08	 movzx	 eax, BYTE PTR _f$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 2a		 je	 SHORT $LN2@TimeString

; 361  : 		_stprintf(m_szTime, "%02d:%02d:%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001b	52		 push	 edx
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00022	51		 push	 ecx
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	50		 push	 eax
  0002a	68 00 00 00 00	 push	 OFFSET $SG81120
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	83 c1 44	 add	 ecx, 68			; 00000044H
  00035	51		 push	 ecx
  00036	e8 00 00 00 00	 call	 _sprintf
  0003b	83 c4 14	 add	 esp, 20			; 00000014H

; 362  : 	}
; 363  : 	else {

  0003e	eb 28		 jmp	 SHORT $LN3@TimeString
$LN2@TimeString:

; 364  : 		_stprintf(m_szTime, "%02d%02d%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004c	52		 push	 edx
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00053	51		 push	 ecx
  00054	68 00 00 00 00	 push	 OFFSET $SG81121
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	83 c2 44	 add	 edx, 68			; 00000044H
  0005f	52		 push	 edx
  00060	e8 00 00 00 00	 call	 _sprintf
  00065	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@TimeString:

; 365  : 	}
; 366  : 	return m_szTime;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	83 c0 44	 add	 eax, 68			; 00000044H

; 367  : 
; 368  : }

  0006e	83 c4 04	 add	 esp, 4
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?TimeString@CDateTime@@QAEPBD_N@Z ENDP			; CDateTime::TimeString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_pyear$ = -20						; size = 6
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 1
?DateString2@CDateTime@@QAEPBDD@Z PROC			; CDateTime::DateString2
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000e	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00011	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00014	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00017	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001a	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00027	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 349  : 	char pyear[6];
; 350  : 	sprintf(pyear, "%d", m_tm.tm_year);

  0002a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00030	51		 push	 ecx
  00031	68 00 00 00 00	 push	 OFFSET $SG81108
  00036	8d 55 ec	 lea	 edx, DWORD PTR _pyear$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _sprintf
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 351  : 	sprintf(pyear, "%s", pyear + 2);

  00042	8d 45 ee	 lea	 eax, DWORD PTR _pyear$[ebp+2]
  00045	50		 push	 eax
  00046	68 00 00 00 00	 push	 OFFSET $SG81109
  0004b	8d 4d ec	 lea	 ecx, DWORD PTR _pyear$[ebp]
  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 _sprintf
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH

; 352  : 
; 353  : 	if(f)_stprintf(m_szDate, "%s%c%02d%c%02d", pyear, f, m_tm.tm_mon, f, m_tm.tm_mday);

  00057	0f be 55 08	 movsx	 edx, BYTE PTR _f$[ebp]
  0005b	85 d2		 test	 edx, edx
  0005d	74 32		 je	 SHORT $LN2@DateString
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00065	51		 push	 ecx
  00066	0f be 55 08	 movsx	 edx, BYTE PTR _f$[ebp]
  0006a	52		 push	 edx
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00071	51		 push	 ecx
  00072	0f be 55 08	 movsx	 edx, BYTE PTR _f$[ebp]
  00076	52		 push	 edx
  00077	8d 45 ec	 lea	 eax, DWORD PTR _pyear$[ebp]
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET $SG81112
  00080	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	83 c1 38	 add	 ecx, 56			; 00000038H
  00086	51		 push	 ecx
  00087	e8 00 00 00 00	 call	 _sprintf
  0008c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0008f	eb 26		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 354  : 	else _stprintf(m_szDate, "%0s%02d%02d", pyear, m_tm.tm_mon, m_tm.tm_mday);

  00091	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00094	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00097	50		 push	 eax
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0009e	52		 push	 edx
  0009f	8d 45 ec	 lea	 eax, DWORD PTR _pyear$[ebp]
  000a2	50		 push	 eax
  000a3	68 00 00 00 00	 push	 OFFSET $SG81113
  000a8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 c1 38	 add	 ecx, 56			; 00000038H
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _sprintf
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@DateString:

; 355  : 	return m_szDate;

  000b7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	83 c0 38	 add	 eax, 56			; 00000038H

; 356  : }

  000bd	52		 push	 edx
  000be	8b cd		 mov	 ecx, ebp
  000c0	50		 push	 eax
  000c1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@DateString
  000c7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cc	58		 pop	 eax
  000cd	5a		 pop	 edx
  000ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	83 c4 18	 add	 esp, 24			; 00000018H
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
$LN7@DateString:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN6@DateString
$LN6@DateString:
  000f0	ec ff ff ff	 DD	 -20			; ffffffecH
  000f4	06 00 00 00	 DD	 6
  000f8	00 00 00 00	 DD	 $LN5@DateString
$LN5@DateString:
  000fc	70		 DB	 112			; 00000070H
  000fd	79		 DB	 121			; 00000079H
  000fe	65		 DB	 101			; 00000065H
  000ff	61		 DB	 97			; 00000061H
  00100	72		 DB	 114			; 00000072H
  00101	00		 DB	 0
?DateString2@CDateTime@@QAEPBDD@Z ENDP			; CDateTime::DateString2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_f$ = 8							; size = 1
?DateString@CDateTime@@QAEPBDD@Z PROC			; CDateTime::DateString
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  : 	if (f) {

  0000e	0f be 45 08	 movsx	 eax, BYTE PTR _f$[ebp]
  00012	85 c0		 test	 eax, eax
  00014	74 35		 je	 SHORT $LN2@DateString

; 338  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", m_tm.tm_year, f, m_tm.tm_mon, f, m_tm.tm_mday);

  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001c	52		 push	 edx
  0001d	0f be 45 08	 movsx	 eax, BYTE PTR _f$[ebp]
  00021	50		 push	 eax
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00028	52		 push	 edx
  00029	0f be 45 08	 movsx	 eax, BYTE PTR _f$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	52		 push	 edx
  00035	68 00 00 00 00	 push	 OFFSET $SG81101
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	83 c0 38	 add	 eax, 56			; 00000038H
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 _sprintf
  00046	83 c4 1c	 add	 esp, 28			; 0000001cH

; 339  : 	}
; 340  : 	else {

  00049	eb 29		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 341  : 		_stprintf(m_szDate, "%04d%02d%02d", m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday);

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00051	52		 push	 edx
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00058	51		 push	 ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET $SG81102
  00065	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00068	83 c1 38	 add	 ecx, 56			; 00000038H
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _sprintf
  00071	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@DateString:

; 342  : 	}
; 343  : 	return m_szDate;

  00074	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00077	83 c0 38	 add	 eax, 56			; 00000038H

; 344  : }

  0007a	83 c4 04	 add	 esp, 4
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?DateString@CDateTime@@QAEPBDD@Z ENDP			; CDateTime::DateString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv74 = -20						; size = 4
_t$1 = -16						; size = 8
_ltm$ = -8						; size = 4
_this$ = -4						; size = 4
_nType$ = 8						; size = 4
_nTz$ = 12						; size = 4
?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z PROC ; CDateTime::SetCurrentTime
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 180  : 	struct	tm	*ltm = &m_tm;

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	89 45 f8	 mov	 DWORD PTR _ltm$[ebp], eax

; 181  : 	m_szTimezone[0] = 0;

  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	6b d1 00	 imul	 edx, ecx, 0
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	c6 44 10 5c 00	 mov	 BYTE PTR [eax+edx+92], 0

; 182  : 
; 183  : 	if (nTz) {

  00033	83 7d 0c 00	 cmp	 DWORD PTR _nTz$[ebp], 0
  00037	74 36		 je	 SHORT $LN4@SetCurrent

; 184  : 		if (nTz == TZ_UTC) {

  00039	83 7d 0c 01	 cmp	 DWORD PTR _nTz$[ebp], 1
  0003d	75 16		 jne	 SHORT $LN5@SetCurrent

; 185  : 			_tcscpy(m_szTimezone, _T("+00:00"));

  0003f	68 00 00 00 00	 push	 OFFSET $SG81036
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	83 c1 5c	 add	 ecx, 92			; 0000005cH
  0004a	51		 push	 ecx
  0004b	e8 00 00 00 00	 call	 _strcpy
  00050	83 c4 08	 add	 esp, 8
  00053	eb 1a		 jmp	 SHORT $LN4@SetCurrent
$LN5@SetCurrent:

; 186  : 		}
; 187  : 		else if (nTz == TZ_KST) {

  00055	83 7d 0c 02	 cmp	 DWORD PTR _nTz$[ebp], 2
  00059	75 14		 jne	 SHORT $LN4@SetCurrent

; 188  : 			_tcscpy(m_szTimezone, _T("+09:00"));

  0005b	68 00 00 00 00	 push	 OFFSET $SG81038
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	83 c2 5c	 add	 edx, 92			; 0000005cH
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _strcpy
  0006c	83 c4 08	 add	 esp, 8
$LN4@SetCurrent:

; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	switch (nType) {

  0006f	8b 45 08	 mov	 eax, DWORD PTR _nType$[ebp]
  00072	89 45 ec	 mov	 DWORD PTR tv74[ebp], eax
  00075	8b 4d ec	 mov	 ecx, DWORD PTR tv74[ebp]
  00078	83 e9 01	 sub	 ecx, 1
  0007b	89 4d ec	 mov	 DWORD PTR tv74[ebp], ecx
  0007e	83 7d ec 03	 cmp	 DWORD PTR tv74[ebp], 3
  00082	77 4e		 ja	 SHORT $LN1@SetCurrent
  00084	8b 55 ec	 mov	 edx, DWORD PTR tv74[ebp]
  00087	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN12@SetCurrent[edx*4]
$LN8@SetCurrent:

; 193  : 	case DT_SEC: { time_t t = time(NULL);  uptoSeconds(nTz, t);	break; }

  0008e	6a 00		 push	 0
  00090	e8 00 00 00 00	 call	 _time
  00095	83 c4 04	 add	 esp, 4
  00098	89 45 f0	 mov	 DWORD PTR _t$1[ebp], eax
  0009b	89 55 f4	 mov	 DWORD PTR _t$1[ebp+4], edx
  0009e	8b 45 f4	 mov	 eax, DWORD PTR _t$1[ebp+4]
  000a1	50		 push	 eax
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _t$1[ebp]
  000a5	51		 push	 ecx
  000a6	8b 55 0c	 mov	 edx, DWORD PTR _nTz$[ebp]
  000a9	52		 push	 edx
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ad	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds
  000b2	eb 1e		 jmp	 SHORT $LN1@SetCurrent
$LN9@SetCurrent:

; 194  : 	case DT_MILLISEC: uptoMilliSeconds(nTz);	break;

  000b4	8b 45 0c	 mov	 eax, DWORD PTR _nTz$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000bb	e8 00 00 00 00	 call	 ?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z ; CDateTime::uptoMilliSeconds
  000c0	eb 10		 jmp	 SHORT $LN1@SetCurrent
$LN10@SetCurrent:

; 195  : 	case DT_MICROSEC: case DT_NANOSEC: uptoMicroseconds(nTz, nType); break;

  000c2	8b 4d 08	 mov	 ecx, DWORD PTR _nType$[ebp]
  000c5	51		 push	 ecx
  000c6	8b 55 0c	 mov	 edx, DWORD PTR _nTz$[ebp]
  000c9	52		 push	 edx
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	e8 00 00 00 00	 call	 ?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
$LN1@SetCurrent:

; 196  : 	}
; 197  : }

  000d2	83 c4 14	 add	 esp, 20			; 00000014H
  000d5	3b ec		 cmp	 ebp, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c2 08 00	 ret	 8
  000e2	66 90		 npad	 2
$LN12@SetCurrent:
  000e4	00 00 00 00	 DD	 $LN8@SetCurrent
  000e8	00 00 00 00	 DD	 $LN9@SetCurrent
  000ec	00 00 00 00	 DD	 $LN10@SetCurrent
  000f0	00 00 00 00	 DD	 $LN10@SetCurrent
?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ENDP ; CDateTime::SetCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nSec$ = 8						; size = 4
?SetSecondsValue@CDateTime@@QAEXH@Z PROC		; CDateTime::SetSecondsValue
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 324  : 	m_tm.tm_year = 0;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 325  : 	m_tm.tm_mon = 0;

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 326  : 	m_tm.tm_mday = nSec/86400; //(24 * 3600)

  00022	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00025	99		 cdq
  00026	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0002b	f7 f9		 idiv	 ecx
  0002d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00030	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 327  : 	nSec = nSec % 86400;

  00033	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00036	99		 cdq
  00037	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0003c	f7 f9		 idiv	 ecx
  0003e	89 55 08	 mov	 DWORD PTR _nSec$[ebp], edx

; 328  : 	m_tm.tm_hour = nSec/3600;

  00041	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00044	99		 cdq
  00045	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0004a	f7 f9		 idiv	 ecx
  0004c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004f	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 329  : 	nSec = nSec % 3600;

  00052	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00055	99		 cdq
  00056	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0005b	f7 f9		 idiv	 ecx
  0005d	89 55 08	 mov	 DWORD PTR _nSec$[ebp], edx

; 330  : 	m_tm.tm_min = nSec / 60;

  00060	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00063	99		 cdq
  00064	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00069	f7 f9		 idiv	 ecx
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 331  : 	nSec = nSec % 60;

  00071	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00074	99		 cdq
  00075	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0007a	f7 f9		 idiv	 ecx
  0007c	89 55 08	 mov	 DWORD PTR _nSec$[ebp], edx

; 332  : 	m_tm.tm_sec = nSec;

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00082	8b 45 08	 mov	 eax, DWORD PTR _nSec$[ebp]
  00085	89 02		 mov	 DWORD PTR [edx], eax

; 333  : }

  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?SetSecondsValue@CDateTime@@QAEXH@Z ENDP		; CDateTime::SetSecondsValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ltmVal$ = 8						; size = 4
?SetTimeValue@CDateTime@@QAEXPA_J@Z PROC		; CDateTime::SetTimeValue
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 319  : 	uptoSeconds(TZ_NONE, *ltmVal);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _ltmVal$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	52		 push	 edx
  00018	6a 00		 push	 0
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 320  : }

  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
?SetTimeValue@CDateTime@@QAEXPA_J@Z ENDP		; CDateTime::SetTimeValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDateTime@@QAE@XZ PROC				; CDateTime::~CDateTime
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 313  :     
; 314  : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CDateTime@@QAE@XZ ENDP				; CDateTime::~CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nType$ = 8						; size = 4
_nTz$ = 12						; size = 4
??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z PROC		; CDateTime::CDateTime
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 174  : 	if (nType == DT_NONE) return;

  0000e	83 7d 08 00	 cmp	 DWORD PTR _nType$[ebp], 0
  00012	75 02		 jne	 SHORT $LN2@CDateTime
  00014	eb 10		 jmp	 SHORT $LN1@CDateTime
$LN2@CDateTime:

; 175  : 	SetCurrentTime(nType, nTz);

  00016	8b 45 0c	 mov	 eax, DWORD PTR _nTz$[ebp]
  00019	50		 push	 eax
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _nType$[ebp]
  0001d	51		 push	 ecx
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	e8 00 00 00 00	 call	 ?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
$LN1@CDateTime:

; 176  : }

  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z ENDP		; CDateTime::CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getTime@CFileTime@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTime@CFileTime@@QAEHXZ PROC				; CFileTime::getTime, COMDAT
; _this$ = ecx

; 197  : 	inline int getTime() { return m_nTime; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?getTime@CFileTime@@QAEHXZ ENDP				; CFileTime::getTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getDate@CFileTime@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDate@CFileTime@@QAEHXZ PROC				; CFileTime::getDate, COMDAT
; _this$ = ecx

; 196  : 	inline int getDate() { return m_nDate; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 00		 mov	 eax, DWORD PTR [eax]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?getDate@CFileTime@@QAEHXZ ENDP				; CFileTime::getDate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv64 = -8						; size = 4
_this$ = -4						; size = 4
_pCompare$ = 8						; size = 4
_eOP$ = 12						; size = 4
?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z PROC	; CFileTime::isCompare
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  : 	switch (eOP)

  00017	8b 45 0c	 mov	 eax, DWORD PTR _eOP$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR tv64[ebp], eax
  0001d	8b 4d f8	 mov	 ecx, DWORD PTR tv64[ebp]
  00020	83 e9 01	 sub	 ecx, 1
  00023	89 4d f8	 mov	 DWORD PTR tv64[ebp], ecx
  00026	83 7d f8 05	 cmp	 DWORD PTR tv64[ebp], 5
  0002a	0f 87 71 01 00
	00		 ja	 $LN2@isCompare
  00030	8b 55 f8	 mov	 edx, DWORD PTR tv64[ebp]
  00033	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN25@isCompare[edx*4]
$LN4@isCompare:

; 147  : 	{
; 148  : 	case eOperator_EQ: if (pCompare->getDate() == m_nDate && pCompare->getTime() == m_nTime) return true; return false;

  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0003d	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00047	75 17		 jne	 SHORT $LN5@isCompare
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0004c	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  00051	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00054	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00057	75 07		 jne	 SHORT $LN5@isCompare
  00059	b0 01		 mov	 al, 1
  0005b	e9 43 01 00 00	 jmp	 $LN1@isCompare
$LN5@isCompare:
  00060	32 c0		 xor	 al, al
  00062	e9 3c 01 00 00	 jmp	 $LN1@isCompare
$LN6@isCompare:

; 149  : 	case eOperator_NE: if (pCompare->getDate() != m_nDate && pCompare->getTime() != m_nTime) return true; return false;

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0006a	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00074	74 17		 je	 SHORT $LN7@isCompare
  00076	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  00079	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  0007e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00081	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00084	74 07		 je	 SHORT $LN7@isCompare
  00086	b0 01		 mov	 al, 1
  00088	e9 16 01 00 00	 jmp	 $LN1@isCompare
$LN7@isCompare:
  0008d	32 c0		 xor	 al, al
  0008f	e9 0f 01 00 00	 jmp	 $LN1@isCompare
$LN8@isCompare:

; 150  : 	case eOperator_GT:
; 151  : 		if (pCompare->getDate() < m_nDate) return true;

  00094	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  00097	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000a1	7d 07		 jge	 SHORT $LN9@isCompare
  000a3	b0 01		 mov	 al, 1
  000a5	e9 f9 00 00 00	 jmp	 $LN1@isCompare
$LN9@isCompare:

; 152  : 		if (pCompare->getDate() > m_nDate) return false;

  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  000ad	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	3b 02		 cmp	 eax, DWORD PTR [edx]
  000b7	7e 07		 jle	 SHORT $LN10@isCompare
  000b9	32 c0		 xor	 al, al
  000bb	e9 e3 00 00 00	 jmp	 $LN1@isCompare
$LN10@isCompare:

; 153  : 		if (pCompare->getTime() < m_nTime) return true; return false;

  000c0	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  000c3	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000ce	7d 07		 jge	 SHORT $LN11@isCompare
  000d0	b0 01		 mov	 al, 1
  000d2	e9 cc 00 00 00	 jmp	 $LN1@isCompare
$LN11@isCompare:
  000d7	32 c0		 xor	 al, al
  000d9	e9 c5 00 00 00	 jmp	 $LN1@isCompare
$LN12@isCompare:

; 154  : 	case eOperator_LT:
; 155  : 		if (pCompare->getDate() > m_nDate) return true;

  000de	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  000e1	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e9	3b 02		 cmp	 eax, DWORD PTR [edx]
  000eb	7e 07		 jle	 SHORT $LN13@isCompare
  000ed	b0 01		 mov	 al, 1
  000ef	e9 af 00 00 00	 jmp	 $LN1@isCompare
$LN13@isCompare:

; 156  : 		if (pCompare->getDate() < m_nDate) return false;

  000f4	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  000f7	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  000fc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ff	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00101	7d 07		 jge	 SHORT $LN14@isCompare
  00103	32 c0		 xor	 al, al
  00105	e9 99 00 00 00	 jmp	 $LN1@isCompare
$LN14@isCompare:

; 157  : 		if (pCompare->getTime() > m_nTime) return true; return false;

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0010d	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  00112	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00115	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00118	7e 07		 jle	 SHORT $LN15@isCompare
  0011a	b0 01		 mov	 al, 1
  0011c	e9 82 00 00 00	 jmp	 $LN1@isCompare
$LN15@isCompare:
  00121	32 c0		 xor	 al, al
  00123	eb 7e		 jmp	 SHORT $LN1@isCompare
$LN16@isCompare:

; 158  : 	case eOperator_GE:
; 159  : 		if (pCompare->getDate() < m_nDate) return true;

  00125	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  00128	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00130	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00132	7d 04		 jge	 SHORT $LN17@isCompare
  00134	b0 01		 mov	 al, 1
  00136	eb 6b		 jmp	 SHORT $LN1@isCompare
$LN17@isCompare:

; 160  : 		if (pCompare->getDate() > m_nDate) return false;

  00138	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0013b	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  00140	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00143	3b 02		 cmp	 eax, DWORD PTR [edx]
  00145	7e 04		 jle	 SHORT $LN18@isCompare
  00147	32 c0		 xor	 al, al
  00149	eb 58		 jmp	 SHORT $LN1@isCompare
$LN18@isCompare:

; 161  : 		if (pCompare->getTime() <= m_nTime) return true; return false;

  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0014e	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  00153	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00156	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00159	7f 04		 jg	 SHORT $LN19@isCompare
  0015b	b0 01		 mov	 al, 1
  0015d	eb 44		 jmp	 SHORT $LN1@isCompare
$LN19@isCompare:
  0015f	32 c0		 xor	 al, al
  00161	eb 40		 jmp	 SHORT $LN1@isCompare
$LN20@isCompare:

; 162  : 	case eOperator_LE:
; 163  : 		if (pCompare->getDate() > m_nDate) return true;

  00163	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  00166	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  0016b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0016e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00170	7e 04		 jle	 SHORT $LN21@isCompare
  00172	b0 01		 mov	 al, 1
  00174	eb 2d		 jmp	 SHORT $LN1@isCompare
$LN21@isCompare:

; 164  : 		if (pCompare->getDate() < m_nDate) return false;

  00176	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  00179	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QAEHXZ ; CFileTime::getDate
  0017e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00181	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00183	7d 04		 jge	 SHORT $LN22@isCompare
  00185	32 c0		 xor	 al, al
  00187	eb 1a		 jmp	 SHORT $LN1@isCompare
$LN22@isCompare:

; 165  : 		if (pCompare->getTime() >= m_nTime) return true; return false;

  00189	8b 4d 08	 mov	 ecx, DWORD PTR _pCompare$[ebp]
  0018c	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QAEHXZ ; CFileTime::getTime
  00191	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00194	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00197	7c 04		 jl	 SHORT $LN23@isCompare
  00199	b0 01		 mov	 al, 1
  0019b	eb 06		 jmp	 SHORT $LN1@isCompare
$LN23@isCompare:
  0019d	32 c0		 xor	 al, al
  0019f	eb 02		 jmp	 SHORT $LN1@isCompare
$LN2@isCompare:

; 166  : 	}
; 167  : 	return false;

  001a1	32 c0		 xor	 al, al
$LN1@isCompare:

; 168  : }

  001a3	83 c4 08	 add	 esp, 8
  001a6	3b ec		 cmp	 ebp, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	8b e5		 mov	 esp, ebp
  001af	5d		 pop	 ebp
  001b0	c2 08 00	 ret	 8
  001b3	90		 npad	 1
$LN25@isCompare:
  001b4	00 00 00 00	 DD	 $LN4@isCompare
  001b8	00 00 00 00	 DD	 $LN6@isCompare
  001bc	00 00 00 00	 DD	 $LN8@isCompare
  001c0	00 00 00 00	 DD	 $LN12@isCompare
  001c4	00 00 00 00	 DD	 $LN16@isCompare
  001c8	00 00 00 00	 DD	 $LN20@isCompare
?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z ENDP	; CFileTime::isCompare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_sysTm$ = -52						; size = 16
_szDate$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pftWrite$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z PROC	; CFileTime::setFileTime
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c8	 lea	 edi, DWORD PTR [ebp-56]
  0000c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 85   : 	TCHAR szDate[16];
; 86   : 
; 87   : 	SYSTEMTIME	sysTm;
; 88   : 	FileTimeToSystemTime(pftWrite, &sysTm);

  00026	8b f4		 mov	 esi, esp
  00028	8d 45 cc	 lea	 eax, DWORD PTR _sysTm$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _pftWrite$[ebp]
  0002f	51		 push	 ecx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8
  00036	3b f4		 cmp	 esi, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 89   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  0003d	0f b7 55 d2	 movzx	 edx, WORD PTR _sysTm$[ebp+6]
  00041	52		 push	 edx
  00042	0f b7 45 ce	 movzx	 eax, WORD PTR _sysTm$[ebp+2]
  00046	50		 push	 eax
  00047	0f b7 4d cc	 movzx	 ecx, WORD PTR _sysTm$[ebp]
  0004b	51		 push	 ecx
  0004c	68 00 00 00 00	 push	 OFFSET $SG80963
  00051	8d 55 e4	 lea	 edx, DWORD PTR _szDate$[ebp]
  00054	52		 push	 edx
  00055	e8 00 00 00 00	 call	 _sprintf
  0005a	83 c4 14	 add	 esp, 20			; 00000014H

; 90   : 	m_nDate = atoi(szDate);

  0005d	8b f4		 mov	 esi, esp
  0005f	8d 45 e4	 lea	 eax, DWORD PTR _szDate$[ebp]
  00062	50		 push	 eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00069	83 c4 04	 add	 esp, 4
  0006c	3b f4		 cmp	 esi, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	89 01		 mov	 DWORD PTR [ecx], eax

; 91   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  00078	0f b7 55 d8	 movzx	 edx, WORD PTR _sysTm$[ebp+12]
  0007c	52		 push	 edx
  0007d	0f b7 45 d6	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  00081	50		 push	 eax
  00082	0f b7 4d d4	 movzx	 ecx, WORD PTR _sysTm$[ebp+8]
  00086	51		 push	 ecx
  00087	68 00 00 00 00	 push	 OFFSET $SG80964
  0008c	8d 55 e4	 lea	 edx, DWORD PTR _szDate$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _sprintf
  00095	83 c4 14	 add	 esp, 20			; 00000014H

; 92   : 	m_nTime = atoi(szDate);

  00098	8b f4		 mov	 esi, esp
  0009a	8d 45 e4	 lea	 eax, DWORD PTR _szDate$[ebp]
  0009d	50		 push	 eax
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000a4	83 c4 04	 add	 esp, 4
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 93   : 	return 1;

  000b4	b8 01 00 00 00	 mov	 eax, 1

; 94   : }

  000b9	52		 push	 edx
  000ba	8b cd		 mov	 ecx, ebp
  000bc	50		 push	 eax
  000bd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@setFileTim
  000c3	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c8	58		 pop	 eax
  000c9	5a		 pop	 edx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cf	33 cd		 xor	 ecx, ebp
  000d1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d6	83 c4 38	 add	 esp, 56			; 00000038H
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
  000e6	66 90		 npad	 2
$LN6@setFileTim:
  000e8	02 00 00 00	 DD	 2
  000ec	00 00 00 00	 DD	 $LN5@setFileTim
$LN5@setFileTim:
  000f0	e4 ff ff ff	 DD	 -28			; ffffffe4H
  000f4	10 00 00 00	 DD	 16			; 00000010H
  000f8	00 00 00 00	 DD	 $LN3@setFileTim
  000fc	cc ff ff ff	 DD	 -52			; ffffffccH
  00100	10 00 00 00	 DD	 16			; 00000010H
  00104	00 00 00 00	 DD	 $LN4@setFileTim
$LN4@setFileTim:
  00108	73		 DB	 115			; 00000073H
  00109	79		 DB	 121			; 00000079H
  0010a	73		 DB	 115			; 00000073H
  0010b	54		 DB	 84			; 00000054H
  0010c	6d		 DB	 109			; 0000006dH
  0010d	00		 DB	 0
$LN3@setFileTim:
  0010e	73		 DB	 115			; 00000073H
  0010f	7a		 DB	 122			; 0000007aH
  00110	44		 DB	 68			; 00000044H
  00111	61		 DB	 97			; 00000061H
  00112	74		 DB	 116			; 00000074H
  00113	65		 DB	 101			; 00000065H
  00114	00		 DB	 0
?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z ENDP	; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_szDate$ = -76						; size = 16
_sMtm$ = -52						; size = 36
_gm_timeInfo$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_fileTime$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPA_J@Z PROC			; CFileTime::setFileTime
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0000c	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 119  : 	struct	tm *gm_timeInfo, sMtm;
; 120  : 	TCHAR szDate[16];
; 121  : #ifndef WIN32
; 122  : 	gm_timeInfo = gmtime_r(&fileTime, gm_timeInfo);
; 123  : #else
; 124  : 	gm_timeInfo = gmtime(fileTime);

  00026	8b 45 08	 mov	 eax, DWORD PTR _fileTime$[ebp]
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _gmtime
  0002f	83 c4 04	 add	 esp, 4
  00032	89 45 f4	 mov	 DWORD PTR _gm_timeInfo$[ebp], eax

; 125  : 	memcpy(&sMtm, gm_timeInfo, sizeof(sMtm));

  00035	6a 24		 push	 36			; 00000024H
  00037	8b 4d f4	 mov	 ecx, DWORD PTR _gm_timeInfo$[ebp]
  0003a	51		 push	 ecx
  0003b	8d 55 cc	 lea	 edx, DWORD PTR _sMtm$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _memcpy
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH

; 126  : #endif
; 127  : 	sMtm.tm_year += 1900;

  00047	8b 45 e0	 mov	 eax, DWORD PTR _sMtm$[ebp+20]
  0004a	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0004f	89 45 e0	 mov	 DWORD PTR _sMtm$[ebp+20], eax

; 128  : 	sMtm.tm_mon += 1;

  00052	8b 4d dc	 mov	 ecx, DWORD PTR _sMtm$[ebp+16]
  00055	83 c1 01	 add	 ecx, 1
  00058	89 4d dc	 mov	 DWORD PTR _sMtm$[ebp+16], ecx

; 129  : 
; 130  : 	_stprintf(szDate, "%04d%02d%02d", sMtm.tm_year, sMtm.tm_mon, sMtm.tm_mday);

  0005b	8b 55 d8	 mov	 edx, DWORD PTR _sMtm$[ebp+12]
  0005e	52		 push	 edx
  0005f	8b 45 dc	 mov	 eax, DWORD PTR _sMtm$[ebp+16]
  00062	50		 push	 eax
  00063	8b 4d e0	 mov	 ecx, DWORD PTR _sMtm$[ebp+20]
  00066	51		 push	 ecx
  00067	68 00 00 00 00	 push	 OFFSET $SG80985
  0006c	8d 55 b4	 lea	 edx, DWORD PTR _szDate$[ebp]
  0006f	52		 push	 edx
  00070	e8 00 00 00 00	 call	 _sprintf
  00075	83 c4 14	 add	 esp, 20			; 00000014H

; 131  : 	m_nDate = atoi(szDate);

  00078	8b f4		 mov	 esi, esp
  0007a	8d 45 b4	 lea	 eax, DWORD PTR _szDate$[ebp]
  0007d	50		 push	 eax
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00084	83 c4 04	 add	 esp, 4
  00087	3b f4		 cmp	 esi, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	89 01		 mov	 DWORD PTR [ecx], eax

; 132  : 	_stprintf(szDate, "%02d%02d%02d", sMtm.tm_hour, sMtm.tm_min, sMtm.tm_sec);

  00093	8b 55 cc	 mov	 edx, DWORD PTR _sMtm$[ebp]
  00096	52		 push	 edx
  00097	8b 45 d0	 mov	 eax, DWORD PTR _sMtm$[ebp+4]
  0009a	50		 push	 eax
  0009b	8b 4d d4	 mov	 ecx, DWORD PTR _sMtm$[ebp+8]
  0009e	51		 push	 ecx
  0009f	68 00 00 00 00	 push	 OFFSET $SG80986
  000a4	8d 55 b4	 lea	 edx, DWORD PTR _szDate$[ebp]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _sprintf
  000ad	83 c4 14	 add	 esp, 20			; 00000014H

; 133  : 	m_nTime = atoi(szDate);

  000b0	8b f4		 mov	 esi, esp
  000b2	8d 45 b4	 lea	 eax, DWORD PTR _szDate$[ebp]
  000b5	50		 push	 eax
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000bc	83 c4 04	 add	 esp, 4
  000bf	3b f4		 cmp	 esi, esp
  000c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 134  : 	printf("gm time and date : %s\n", asctime(gm_timeInfo));

  000cc	8b f4		 mov	 esi, esp
  000ce	8b 55 f4	 mov	 edx, DWORD PTR _gm_timeInfo$[ebp]
  000d1	52		 push	 edx
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__asctime
  000d8	83 c4 04	 add	 esp, 4
  000db	3b f4		 cmp	 esi, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET $SG80987
  000e8	e8 00 00 00 00	 call	 _printf
  000ed	83 c4 08	 add	 esp, 8

; 135  : 
; 136  : 	return 1;

  000f0	b8 01 00 00 00	 mov	 eax, 1

; 137  : }

  000f5	52		 push	 edx
  000f6	8b cd		 mov	 ecx, ebp
  000f8	50		 push	 eax
  000f9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@setFileTim
  000ff	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00104	58		 pop	 eax
  00105	5a		 pop	 edx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010b	33 cd		 xor	 ecx, ebp
  0010d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00112	83 c4 50	 add	 esp, 80			; 00000050H
  00115	3b ec		 cmp	 ebp, esp
  00117	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
  00122	66 90		 npad	 2
$LN6@setFileTim:
  00124	02 00 00 00	 DD	 2
  00128	00 00 00 00	 DD	 $LN5@setFileTim
$LN5@setFileTim:
  0012c	cc ff ff ff	 DD	 -52			; ffffffccH
  00130	24 00 00 00	 DD	 36			; 00000024H
  00134	00 00 00 00	 DD	 $LN3@setFileTim
  00138	b4 ff ff ff	 DD	 -76			; ffffffb4H
  0013c	10 00 00 00	 DD	 16			; 00000010H
  00140	00 00 00 00	 DD	 $LN4@setFileTim
$LN4@setFileTim:
  00144	73		 DB	 115			; 00000073H
  00145	7a		 DB	 122			; 0000007aH
  00146	44		 DB	 68			; 00000044H
  00147	61		 DB	 97			; 00000061H
  00148	74		 DB	 116			; 00000074H
  00149	65		 DB	 101			; 00000065H
  0014a	00		 DB	 0
$LN3@setFileTim:
  0014b	73		 DB	 115			; 00000073H
  0014c	4d		 DB	 77			; 0000004dH
  0014d	74		 DB	 116			; 00000074H
  0014e	6d		 DB	 109			; 0000006dH
  0014f	00		 DB	 0
?setFileTime@CFileTime@@QAEHPA_J@Z ENDP			; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_sysTm$ = -120						; size = 16
_hFile$ = -100						; size = 4
_ftWrite$ = -92						; size = 8
_szDate$ = -76						; size = 16
_ltm$ = -56						; size = 4
_m_tm$ = -48						; size = 36
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pFilePath$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPAD@Z PROC			; CFileTime::setFileTime
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0000c	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	struct	tm	m_tm, *ltm = &m_tm;

  00026	8d 45 d0	 lea	 eax, DWORD PTR _m_tm$[ebp]
  00029	89 45 c8	 mov	 DWORD PTR _ltm$[ebp], eax

; 53   : 	TCHAR szDate[16];
; 54   : 	FILETIME ftWrite;
; 55   : 	HANDLE hFile = CreateFile(pFilePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

  0002c	8b f4		 mov	 esi, esp
  0002e	6a 00		 push	 0
  00030	68 80 00 00 00	 push	 128			; 00000080H
  00035	6a 03		 push	 3
  00037	6a 00		 push	 0
  00039	6a 01		 push	 1
  0003b	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _pFilePath$[ebp]
  00043	51		 push	 ecx
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	89 45 9c	 mov	 DWORD PTR _hFile$[ebp], eax

; 56   : 	if (hFile == INVALID_HANDLE_VALUE) {

  00054	83 7d 9c ff	 cmp	 DWORD PTR _hFile$[ebp], -1
  00058	75 08		 jne	 SHORT $LN2@setFileTim

; 57   : 		return -1;

  0005a	83 c8 ff	 or	 eax, -1
  0005d	e9 cf 00 00 00	 jmp	 $LN1@setFileTim
$LN2@setFileTim:

; 58   : 	}
; 59   : 
; 60   : 	if (!GetFileTime(hFile, NULL, NULL, &ftWrite)) {

  00062	8b f4		 mov	 esi, esp
  00064	8d 55 a4	 lea	 edx, DWORD PTR _ftWrite$[ebp]
  00067	52		 push	 edx
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	8b 45 9c	 mov	 eax, DWORD PTR _hFile$[ebp]
  0006f	50		 push	 eax
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007d	85 c0		 test	 eax, eax
  0007f	75 0a		 jne	 SHORT $LN3@setFileTim

; 61   : 		return -2;

  00081	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00086	e9 a6 00 00 00	 jmp	 $LN1@setFileTim
$LN3@setFileTim:

; 62   : 	}
; 63   : 
; 64   : 	//SYSTEMTIME	sysTm, localTime;
; 65   : 	SYSTEMTIME	sysTm;
; 66   : 	FileTimeToSystemTime(&ftWrite, &sysTm);  // UTC SystemTime

  0008b	8b f4		 mov	 esi, esp
  0008d	8d 4d 88	 lea	 ecx, DWORD PTR _sysTm$[ebp]
  00090	51		 push	 ecx
  00091	8d 55 a4	 lea	 edx, DWORD PTR _ftWrite$[ebp]
  00094	52		 push	 edx
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 67   : 	//SystemTimeToTzSpecificLocalTime(NULL, &sysTm, &localTime);	// KTC LocalTime
; 68   : 
; 69   : 	//_stprintf(szDate, "%04d%02d%02d", localTime.wYear, localTime.wMonth, localTime.wDay);
; 70   : 	//m_nDate = atoi(szDate);
; 71   : 	//_stprintf(szDate, "%02d%02d%02d", localTime.wHour, localTime.wMinute, localTime.wSecond);
; 72   : 	//m_nTime = atoi(szDate);
; 73   : 
; 74   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  000a2	0f b7 45 8e	 movzx	 eax, WORD PTR _sysTm$[ebp+6]
  000a6	50		 push	 eax
  000a7	0f b7 4d 8a	 movzx	 ecx, WORD PTR _sysTm$[ebp+2]
  000ab	51		 push	 ecx
  000ac	0f b7 55 88	 movzx	 edx, WORD PTR _sysTm$[ebp]
  000b0	52		 push	 edx
  000b1	68 00 00 00 00	 push	 OFFSET $SG80955
  000b6	8d 45 b4	 lea	 eax, DWORD PTR _szDate$[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 _sprintf
  000bf	83 c4 14	 add	 esp, 20			; 00000014H

; 75   : 	m_nDate = atoi(szDate);

  000c2	8b f4		 mov	 esi, esp
  000c4	8d 4d b4	 lea	 ecx, DWORD PTR _szDate$[ebp]
  000c7	51		 push	 ecx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000ce	83 c4 04	 add	 esp, 4
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000db	89 02		 mov	 DWORD PTR [edx], eax

; 76   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  000dd	0f b7 45 94	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  000e1	50		 push	 eax
  000e2	0f b7 4d 92	 movzx	 ecx, WORD PTR _sysTm$[ebp+10]
  000e6	51		 push	 ecx
  000e7	0f b7 55 90	 movzx	 edx, WORD PTR _sysTm$[ebp+8]
  000eb	52		 push	 edx
  000ec	68 00 00 00 00	 push	 OFFSET $SG80956
  000f1	8d 45 b4	 lea	 eax, DWORD PTR _szDate$[ebp]
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 _sprintf
  000fa	83 c4 14	 add	 esp, 20			; 00000014H

; 77   : 	m_nTime = atoi(szDate);

  000fd	8b f4		 mov	 esi, esp
  000ff	8d 4d b4	 lea	 ecx, DWORD PTR _szDate$[ebp]
  00102	51		 push	 ecx
  00103	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00109	83 c4 04	 add	 esp, 4
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00113	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00116	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 78   : 
; 79   : 	CloseHandle(hFile);

  00119	8b f4		 mov	 esi, esp
  0011b	8b 45 9c	 mov	 eax, DWORD PTR _hFile$[ebp]
  0011e	50		 push	 eax
  0011f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 80   : 	return 1;

  0012c	b8 01 00 00 00	 mov	 eax, 1
$LN1@setFileTim:

; 81   : }

  00131	52		 push	 edx
  00132	8b cd		 mov	 ecx, ebp
  00134	50		 push	 eax
  00135	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@setFileTim
  0013b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00140	58		 pop	 eax
  00141	5a		 pop	 edx
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00147	33 cd		 xor	 ecx, ebp
  00149	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014e	83 c4 7c	 add	 esp, 124		; 0000007cH
  00151	3b ec		 cmp	 ebp, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c2 04 00	 ret	 4
  0015e	66 90		 npad	 2
$LN10@setFileTim:
  00160	04 00 00 00	 DD	 4
  00164	00 00 00 00	 DD	 $LN9@setFileTim
$LN9@setFileTim:
  00168	d0 ff ff ff	 DD	 -48			; ffffffd0H
  0016c	24 00 00 00	 DD	 36			; 00000024H
  00170	00 00 00 00	 DD	 $LN5@setFileTim
  00174	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00178	10 00 00 00	 DD	 16			; 00000010H
  0017c	00 00 00 00	 DD	 $LN6@setFileTim
  00180	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00184	08 00 00 00	 DD	 8
  00188	00 00 00 00	 DD	 $LN7@setFileTim
  0018c	88 ff ff ff	 DD	 -120			; ffffff88H
  00190	10 00 00 00	 DD	 16			; 00000010H
  00194	00 00 00 00	 DD	 $LN8@setFileTim
$LN8@setFileTim:
  00198	73		 DB	 115			; 00000073H
  00199	79		 DB	 121			; 00000079H
  0019a	73		 DB	 115			; 00000073H
  0019b	54		 DB	 84			; 00000054H
  0019c	6d		 DB	 109			; 0000006dH
  0019d	00		 DB	 0
$LN7@setFileTim:
  0019e	66		 DB	 102			; 00000066H
  0019f	74		 DB	 116			; 00000074H
  001a0	57		 DB	 87			; 00000057H
  001a1	72		 DB	 114			; 00000072H
  001a2	69		 DB	 105			; 00000069H
  001a3	74		 DB	 116			; 00000074H
  001a4	65		 DB	 101			; 00000065H
  001a5	00		 DB	 0
$LN6@setFileTim:
  001a6	73		 DB	 115			; 00000073H
  001a7	7a		 DB	 122			; 0000007aH
  001a8	44		 DB	 68			; 00000044H
  001a9	61		 DB	 97			; 00000061H
  001aa	74		 DB	 116			; 00000074H
  001ab	65		 DB	 101			; 00000065H
  001ac	00		 DB	 0
$LN5@setFileTim:
  001ad	6d		 DB	 109			; 0000006dH
  001ae	5f		 DB	 95			; 0000005fH
  001af	74		 DB	 116			; 00000074H
  001b0	6d		 DB	 109			; 0000006dH
  001b1	00		 DB	 0
?setFileTime@CFileTime@@QAEHPAD@Z ENDP			; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CFileTime@@QAE@XZ PROC				; CFileTime::~CFileTime
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 141  : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CFileTime@@QAE@XZ ENDP				; CFileTime::~CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileTime@@QAE@XZ PROC				; CFileTime::CFileTime
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 48   : }

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0CFileTime@@QAE@XZ ENDP				; CFileTime::CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_myFileTime$ = -32					; size = 8
_ft$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_cur$ = 8						; size = 4
_bMicro$ = 12						; size = 1
?getFileTime@Misc@@SAXPAUtimespec@@_N@Z PROC		; Misc::getFileTime

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 442  : 	FILETIME ft;
; 443  : 	union
; 444  : 	{
; 445  : 		FILETIME asFileTime;
; 446  : 		u_int64 asInt64;
; 447  : 	} myFileTime;
; 448  : 	GetSystemTimeAsFileTime(&ft);

  00031	8b f4		 mov	 esi, esp
  00033	8d 45 f0	 lea	 eax, DWORD PTR _ft$[ebp]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTimeAsFileTime@4
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 449  : 	myFileTime.asFileTime = ft;

  00044	8b 4d f0	 mov	 ecx, DWORD PTR _ft$[ebp]
  00047	89 4d e0	 mov	 DWORD PTR _myFileTime$[ebp], ecx
  0004a	8b 55 f4	 mov	 edx, DWORD PTR _ft$[ebp+4]
  0004d	89 55 e4	 mov	 DWORD PTR _myFileTime$[ebp+4], edx

; 450  : 	//unsigned long long tt = ft.dwHighDateTime;
; 451  : 	//tt <<= 32;
; 452  : 	//tt |= ft.dwLowDateTime;
; 453  : 	myFileTime.asInt64 -= DELTA_EPOCH_IN_MICROSECS;

  00050	8b 45 e0	 mov	 eax, DWORD PTR _myFileTime$[ebp]
  00053	2d 00 40 86 48	 sub	 eax, 1216757760		; 48864000H
  00058	8b 4d e4	 mov	 ecx, DWORD PTR _myFileTime$[ebp+4]
  0005b	81 d9 96 5e 29
	00		 sbb	 ecx, 2711190		; 00295e96H
  00061	89 45 e0	 mov	 DWORD PTR _myFileTime$[ebp], eax
  00064	89 4d e4	 mov	 DWORD PTR _myFileTime$[ebp+4], ecx

; 454  : 	cur->tv_sec = time(NULL);

  00067	6a 00		 push	 0
  00069	e8 00 00 00 00	 call	 _time
  0006e	83 c4 04	 add	 esp, 4
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _cur$[ebp]
  00074	89 01		 mov	 DWORD PTR [ecx], eax
  00076	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 455  : 	if (bMicro) {

  00079	0f b6 55 0c	 movzx	 edx, BYTE PTR _bMicro$[ebp]
  0007d	85 d2		 test	 edx, edx
  0007f	74 33		 je	 SHORT $LN2@getFileTim

; 456  : 		myFileTime.asInt64 /= 10; // microtime

  00081	6a 00		 push	 0
  00083	6a 0a		 push	 10			; 0000000aH
  00085	8b 45 e4	 mov	 eax, DWORD PTR _myFileTime$[ebp+4]
  00088	50		 push	 eax
  00089	8b 4d e0	 mov	 ecx, DWORD PTR _myFileTime$[ebp]
  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 __aulldiv
  00092	89 45 e0	 mov	 DWORD PTR _myFileTime$[ebp], eax
  00095	89 55 e4	 mov	 DWORD PTR _myFileTime$[ebp+4], edx

; 457  : 		cur->tv_nsec = myFileTime.asInt64%MICROSEC_PER_SEC;

  00098	6a 00		 push	 0
  0009a	68 40 42 0f 00	 push	 1000000			; 000f4240H
  0009f	8b 55 e4	 mov	 edx, DWORD PTR _myFileTime$[ebp+4]
  000a2	52		 push	 edx
  000a3	8b 45 e0	 mov	 eax, DWORD PTR _myFileTime$[ebp]
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 __aullrem
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _cur$[ebp]
  000af	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  000b2	eb 1a		 jmp	 SHORT $LN1@getFileTim
$LN2@getFileTim:

; 458  : 	}
; 459  : 	else cur->tv_nsec = myFileTime.asInt64%10000000L; //(100 nano)

  000b4	6a 00		 push	 0
  000b6	68 80 96 98 00	 push	 10000000		; 00989680H
  000bb	8b 55 e4	 mov	 edx, DWORD PTR _myFileTime$[ebp+4]
  000be	52		 push	 edx
  000bf	8b 45 e0	 mov	 eax, DWORD PTR _myFileTime$[ebp]
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 __aullrem
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _cur$[ebp]
  000cb	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@getFileTim:

; 460  : }

  000ce	52		 push	 edx
  000cf	8b cd		 mov	 ecx, ebp
  000d1	50		 push	 eax
  000d2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@getFileTim
  000d8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000dd	58		 pop	 eax
  000de	5a		 pop	 edx
  000df	5e		 pop	 esi
  000e0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	33 cd		 xor	 ecx, ebp
  000e5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ea	83 c4 24	 add	 esp, 36			; 00000024H
  000ed	3b ec		 cmp	 ebp, esp
  000ef	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c3		 ret	 0
$LN8@getFileTim:
  000f8	02 00 00 00	 DD	 2
  000fc	00 00 00 00	 DD	 $LN7@getFileTim
$LN7@getFileTim:
  00100	f0 ff ff ff	 DD	 -16			; fffffff0H
  00104	08 00 00 00	 DD	 8
  00108	00 00 00 00	 DD	 $LN5@getFileTim
  0010c	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00110	08 00 00 00	 DD	 8
  00114	00 00 00 00	 DD	 $LN6@getFileTim
$LN6@getFileTim:
  00118	6d		 DB	 109			; 0000006dH
  00119	79		 DB	 121			; 00000079H
  0011a	46		 DB	 70			; 00000046H
  0011b	69		 DB	 105			; 00000069H
  0011c	6c		 DB	 108			; 0000006cH
  0011d	65		 DB	 101			; 00000065H
  0011e	54		 DB	 84			; 00000054H
  0011f	69		 DB	 105			; 00000069H
  00120	6d		 DB	 109			; 0000006dH
  00121	65		 DB	 101			; 00000065H
  00122	00		 DB	 0
$LN5@getFileTim:
  00123	66		 DB	 102			; 00000066H
  00124	74		 DB	 116			; 00000074H
  00125	00		 DB	 0
?getFileTime@Misc@@SAXPAUtimespec@@_N@Z ENDP		; Misc::getFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_sysTm$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_cur$ = 8						; size = 4
?getmillisec@Misc@@SAXPAUtimespec@@@Z PROC		; Misc::getmillisec

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00021	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00026	33 c5		 xor	 eax, ebp
  00028	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 422  : #ifndef WIN32
; 423  : 	clock_gettime(CLOCK_REALTIME, cur);
; 424  : 	cur->tv_nsec = cur->tv_nsec%MILLISEC_PER_SEC;
; 425  : #else
; 426  : 	SYSTEMTIME	sysTm;
; 427  : 	GetSystemTime(&sysTm);

  0002b	8b f4		 mov	 esi, esp
  0002d	8d 45 e8	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00030	50		 push	 eax
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 428  : 	cur->tv_sec = time(NULL);

  0003e	6a 00		 push	 0
  00040	e8 00 00 00 00	 call	 _time
  00045	83 c4 04	 add	 esp, 4
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _cur$[ebp]
  0004b	89 01		 mov	 DWORD PTR [ecx], eax
  0004d	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 429  : 	cur->tv_nsec = sysTm.wMilliseconds;

  00050	0f b7 55 f6	 movzx	 edx, WORD PTR _sysTm$[ebp+14]
  00054	8b 45 08	 mov	 eax, DWORD PTR _cur$[ebp]
  00057	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 430  : #endif
; 431  : }

  0005a	52		 push	 edx
  0005b	8b cd		 mov	 ecx, ebp
  0005d	50		 push	 eax
  0005e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@getmillise
  00064	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00069	58		 pop	 eax
  0006a	5a		 pop	 edx
  0006b	5e		 pop	 esi
  0006c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006f	33 cd		 xor	 ecx, ebp
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	83 c4 1c	 add	 esp, 28			; 0000001cH
  00079	3b ec		 cmp	 ebp, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN5@getmillise:
  00084	01 00 00 00	 DD	 1
  00088	00 00 00 00	 DD	 $LN4@getmillise
$LN4@getmillise:
  0008c	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00090	10 00 00 00	 DD	 16			; 00000010H
  00094	00 00 00 00	 DD	 $LN3@getmillise
$LN3@getmillise:
  00098	73		 DB	 115			; 00000073H
  00099	79		 DB	 121			; 00000079H
  0009a	73		 DB	 115			; 00000073H
  0009b	54		 DB	 84			; 00000054H
  0009c	6d		 DB	 109			; 0000006dH
  0009d	00		 DB	 0
?getmillisec@Misc@@SAXPAUtimespec@@@Z ENDP		; Misc::getmillisec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_start$ = 8						; size = 4
_stop$ = 12						; size = 4
_result$ = 16						; size = 4
_unit$ = 20						; size = 4
?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z PROC		; Misc::timespec_diff

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 409  : 	if ((stop->tv_nsec - start->tv_nsec) < 0) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	2b 51 08	 sub	 edx, DWORD PTR [ecx+8]
  0000f	79 35		 jns	 SHORT $LN2@timespec_d

; 410  : 		result->tv_sec = stop->tv_sec - start->tv_sec - 1;

  00011	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  00017	8b 10		 mov	 edx, DWORD PTR [eax]
  00019	2b 11		 sub	 edx, DWORD PTR [ecx]
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	1b 41 04	 sbb	 eax, DWORD PTR [ecx+4]
  00021	83 ea 01	 sub	 edx, 1
  00024	83 d8 00	 sbb	 eax, 0
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  0002a	89 11		 mov	 DWORD PTR [ecx], edx
  0002c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 411  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec + unit;

  0002f	8b 55 0c	 mov	 edx, DWORD PTR _stop$[ebp]
  00032	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  00035	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00038	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0003b	03 4d 14	 add	 ecx, DWORD PTR _unit$[ebp]
  0003e	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00041	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 412  : 	}
; 413  : 	else {

  00044	eb 2a		 jmp	 SHORT $LN1@timespec_d
$LN2@timespec_d:

; 414  : 		result->tv_sec = stop->tv_sec - start->tv_sec;

  00046	8b 45 0c	 mov	 eax, DWORD PTR _stop$[ebp]
  00049	8b 4d 08	 mov	 ecx, DWORD PTR _start$[ebp]
  0004c	8b 10		 mov	 edx, DWORD PTR [eax]
  0004e	2b 11		 sub	 edx, DWORD PTR [ecx]
  00050	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00053	1b 41 04	 sbb	 eax, DWORD PTR [ecx+4]
  00056	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  00059	89 11		 mov	 DWORD PTR [ecx], edx
  0005b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 415  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec;

  0005e	8b 55 0c	 mov	 edx, DWORD PTR _stop$[ebp]
  00061	8b 45 08	 mov	 eax, DWORD PTR _start$[ebp]
  00064	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00067	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  0006a	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  0006d	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
$LN1@timespec_d:

; 416  : 	}
; 417  : }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z ENDP		; Misc::timespec_diff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_iuSec$ = 8						; size = 4
?u_Sleep@Misc@@SAXH@Z PROC				; Misc::u_Sleep

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 400  : #ifndef WIN32
; 401  : 	usleep(iuSec);
; 402  : #else
; 403  : 	Sleep(iuSec/1000);

  00004	8b 45 08	 mov	 eax, DWORD PTR _iuSec$[ebp]
  00007	99		 cdq
  00008	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0000d	f7 f9		 idiv	 ecx
  0000f	8b f4		 mov	 esi, esp
  00011	50		 push	 eax
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 404  : #endif
; 405  : }

  0001f	5e		 pop	 esi
  00020	3b ec		 cmp	 ebp, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?u_Sleep@Misc@@SAXH@Z ENDP				; Misc::u_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
_iMiliSec$ = 8						; size = 4
?m_Sleep@Misc@@SAXH@Z PROC				; Misc::m_Sleep

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 391  : #ifndef WIN32
; 392  : 	usleep(iMiliSec * 1000);
; 393  : #else
; 394  : 	Sleep(iMiliSec);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _iMiliSec$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00010	3b f4		 cmp	 esi, esp
  00012	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 395  : #endif
; 396  : }

  00017	5e		 pop	 esi
  00018	3b ec		 cmp	 ebp, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?m_Sleep@Misc@@SAXH@Z ENDP				; Misc::m_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
__Tm$ = 8						; size = 4
__Time$ = 12						; size = 4
_localtime_s PROC

; 572  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 573  :                 return _localtime64_s(_Tm, _Time);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Time$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Tm$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 574  :             }

  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 535  :             return _time64(_Time);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 536  :         }

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_gmtime	PROC

; 497  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 498  :             #pragma warning(push)
; 499  :             #pragma warning(disable: 4996)
; 500  :             return _gmtime64(_Time);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR __Time$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 501  :             #pragma warning(pop)
; 502  :         }

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  00014	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  00019	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001c	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0001f	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00022	51		 push	 ecx
  00023	6a 00		 push	 0
  00025	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00028	52		 push	 edx
  00029	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 __vsprintf_l
  00032	83 c4 10	 add	 esp, 16			; 00000010H
  00035	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1787 :     return _Result;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1788 : }

  00042	83 c4 08	 add	 esp, 8
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00003	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000a	51		 push	 ecx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0000e	52		 push	 edx
  0000f	6a ff		 push	 -1
  00011	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 __vsnprintf_l
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 1459 :     #pragma warning(pop)
; 1460 : }

  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 10		 mov	 edx, DWORD PTR [eax]
  00032	83 ca 01	 or	 edx, 1
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00040	83 c4 1c	 add	 esp, 28			; 0000001cH
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  0004d	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00051	7d 09		 jge	 SHORT $LN3@vsnprintf_
  00053	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0005a	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005f	89 4d f8	 mov	 DWORD PTR tv74[ebp], ecx
$LN4@vsnprintf_:
  00062	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1391 : }

  00065	5e		 pop	 esi
  00066	83 c4 08	 add	 esp, 8
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  00015	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
  0001a	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001d	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00020	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00023	51		 push	 ecx
  00024	6a 00		 push	 0
  00026	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00029	52		 push	 edx
  0002a	8b f4		 mov	 esi, esp
  0002c	6a 01		 push	 1
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00034	83 c4 04	 add	 esp, 4
  00037	3b f4		 cmp	 esi, esp
  00039	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 __vfprintf_l
  00044	83 c4 10	 add	 esp, 16			; 00000010H
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 955  :     __crt_va_end(_ArgList);

  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 956  :     return _Result;

  00051	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 957  : }

  00054	5e		 pop	 esi
  00055	83 c4 08	 add	 esp, 8
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 144  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 640  : }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
