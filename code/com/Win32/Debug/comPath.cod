; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	D:\NewProject2\com\src\comPath.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__tcsncpy
PUBLIC	__tcsrchr
PUBLIC	?_tcsrchr@@YAPADPADI@Z				; _tcsrchr
PUBLIC	??0CPath@@QAE@PAD@Z				; CPath::CPath
PUBLIC	??1CPath@@QAE@XZ				; CPath::~CPath
PUBLIC	?getPath@CPath@@QAEIPAD@Z			; CPath::getPath
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp___mbsrchr:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	_GetModuleFileNameExA@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
_pRear$ = -152						; size = 4
_nLen$ = -148						; size = 4
_szTmp$ = -140						; size = 128
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pResolved_name$ = 8					; size = 4
?getPath@CPath@@QAEIPAD@Z PROC				; CPath::getPath
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00012	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 46   : 	TCHAR szTmp[128] = {0,};

  0002c	c6 85 74 ff ff
	ff 00		 mov	 BYTE PTR _szTmp$[ebp], 0
  00033	6a 7f		 push	 127			; 0000007fH
  00035	6a 00		 push	 0
  00037	8d 85 75 ff ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp+1]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 _memset
  00043	83 c4 0c	 add	 esp, 12			; 0000000cH

; 47   : 	size_t nLen=0;

  00046	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _nLen$[ebp], 0

; 48   : 	TCHAR *pRear;
; 49   : 
; 50   : #ifdef WIN32
; 51   : 	if(GetModuleFileNameEx(GetCurrentProcess(), NULL, szTmp, 128)) {

  00050	68 80 00 00 00	 push	 128			; 00000080H
  00055	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  0005b	51		 push	 ecx
  0005c	6a 00		 push	 0
  0005e	8b f4		 mov	 esi, esp
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _GetModuleFileNameExA@16
  00073	85 c0		 test	 eax, eax
  00075	74 19		 je	 SHORT $LN2@getPath

; 52   : 		pRear = _tcsrchr((TCHAR *)szTmp,'\\');

  00077	6a 5c		 push	 92			; 0000005cH
  00079	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _szTmp$[ebp]
  0007f	52		 push	 edx
  00080	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPADPADI@Z	; _tcsrchr
  00085	83 c4 08	 add	 esp, 8
  00088	89 85 68 ff ff
	ff		 mov	 DWORD PTR _pRear$[ebp], eax
  0008e	eb 04		 jmp	 SHORT $LN3@getPath
$LN2@getPath:

; 53   : 	} else return 0;

  00090	33 c0		 xor	 eax, eax
  00092	eb 43		 jmp	 SHORT $LN1@getPath
$LN3@getPath:

; 54   : #else
; 55   : 	if(realpath(m_szProcessName,szTmp)) {
; 56   : 		pRear = _tcsrchr((TCHAR *)szTmp,'/');
; 57   : 	} else return 0;
; 58   : #endif
; 59   : 	
; 60   : 	// process directory path ------------------------
; 61   : 	nLen = pRear - szTmp + 1;

  00094	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _pRear$[ebp]
  0009a	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _szTmp$[ebp]
  000a0	2b c1		 sub	 eax, ecx
  000a2	83 c0 01	 add	 eax, 1
  000a5	89 85 6c ff ff
	ff		 mov	 DWORD PTR _nLen$[ebp], eax

; 62   : 	_tcsncpy(pResolved_name, szTmp, nLen);

  000ab	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _nLen$[ebp]
  000b1	52		 push	 edx
  000b2	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _szTmp$[ebp]
  000b8	50		 push	 eax
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _pResolved_name$[ebp]
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 __tcsncpy
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 63   : 	pResolved_name[nLen] = 0;

  000c5	8b 55 08	 mov	 edx, DWORD PTR _pResolved_name$[ebp]
  000c8	03 95 6c ff ff
	ff		 add	 edx, DWORD PTR _nLen$[ebp]
  000ce	c6 02 00	 mov	 BYTE PTR [edx], 0

; 64   : 	//_tprintf(_T("pResolved_name:%s\n"),pResolved_name);
; 65   : 	// --------------------------------------------
; 66   : 	return nLen;

  000d1	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _nLen$[ebp]
$LN1@getPath:

; 67   : }

  000d7	52		 push	 edx
  000d8	8b cd		 mov	 ecx, ebp
  000da	50		 push	 eax
  000db	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@getPath
  000e1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e6	58		 pop	 eax
  000e7	5a		 pop	 edx
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ed	33 cd		 xor	 ecx, ebp
  000ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f4	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 04 00	 ret	 4
  00107	90		 npad	 1
$LN7@getPath:
  00108	01 00 00 00	 DD	 1
  0010c	00 00 00 00	 DD	 $LN6@getPath
$LN6@getPath:
  00110	74 ff ff ff	 DD	 -140			; ffffff74H
  00114	80 00 00 00	 DD	 128			; 00000080H
  00118	00 00 00 00	 DD	 $LN5@getPath
$LN5@getPath:
  0011c	73		 DB	 115			; 00000073H
  0011d	7a		 DB	 122			; 0000007aH
  0011e	54		 DB	 84			; 00000054H
  0011f	6d		 DB	 109			; 0000006dH
  00120	70		 DB	 112			; 00000070H
  00121	00		 DB	 0
?getPath@CPath@@QAEIPAD@Z ENDP				; CPath::getPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPath@@QAE@XZ PROC					; CPath::~CPath
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 41   : 
; 42   : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??1CPath@@QAE@XZ ENDP					; CPath::~CPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
_len$1 = -8						; size = 4
_this$ = -4						; size = 4
_pProcName$ = 8						; size = 4
??0CPath@@QAE@PAD@Z PROC				; CPath::CPath
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   : 	if(pProcName) {

  00017	83 7d 08 00	 cmp	 DWORD PTR _pProcName$[ebp], 0
  0001b	74 3c		 je	 SHORT $LN2@CPath

; 21   : 		size_t len = _tcslen(pProcName);

  0001d	8b 45 08	 mov	 eax, DWORD PTR _pProcName$[ebp]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _strlen
  00026	83 c4 04	 add	 esp, 4
  00029	89 45 f8	 mov	 DWORD PTR _len$1[ebp], eax

; 22   : 		if(len) {

  0002c	83 7d f8 00	 cmp	 DWORD PTR _len$1[ebp], 0
  00030	74 12		 je	 SHORT $LN3@CPath

; 23   : 			_tcscpy(m_szProcessName, pProcName);

  00032	8b 4d 08	 mov	 ecx, DWORD PTR _pProcName$[ebp]
  00035	51		 push	 ecx
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	52		 push	 edx
  0003a	e8 00 00 00 00	 call	 _strcpy
  0003f	83 c4 08	 add	 esp, 8

; 24   : 		}
; 25   : 		else {

  00042	eb 13		 jmp	 SHORT $LN4@CPath
$LN3@CPath:

; 26   : 			memset(m_szProcessName, 0, sizeof(m_szProcessName));

  00044	68 80 00 00 00	 push	 128			; 00000080H
  00049	6a 00		 push	 0
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 _memset
  00054	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@CPath:

; 27   : 		}
; 28   : 		return;

  00057	eb 13		 jmp	 SHORT $LN1@CPath
$LN2@CPath:

; 29   : 	}
; 30   : #ifdef WIN32	
; 31   : 	memset(m_szProcessName, 0, sizeof(m_szProcessName));

  00059	68 80 00 00 00	 push	 128			; 00000080H
  0005e	6a 00		 push	 0
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	51		 push	 ecx
  00064	e8 00 00 00 00	 call	 _memset
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN1@CPath:

; 32   : #else
; 33   : 	if(!getProcessNameByPid(m_szProcessName)) {
; 34   : 		memset(m_szProcessName, 0, sizeof(m_szProcessName));
; 35   : 	}
; 36   : #endif
; 37   : }

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	83 c4 08	 add	 esp, 8
  00072	3b ec		 cmp	 ebp, esp
  00074	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c2 04 00	 ret	 4
??0CPath@@QAE@PAD@Z ENDP				; CPath::CPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPADPADI@Z
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 4
?_tcsrchr@@YAPADPADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 0c	 mov	 eax, DWORD PTR __C$[ebp]
  00006	50		 push	 eax
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __S$[ebp]
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 __tcsrchr
  00010	83 c4 08	 add	 esp, 8
  00013	3b ec		 cmp	 ebp, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?_tcsrchr@@YAPADPADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsrchr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR __c$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __s1$[ebp]
  0000d	51		 push	 ecx
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsrchr
  00014	83 c4 08	 add	 esp, 8
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	5e		 pop	 esi
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
__tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 10	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR __Source$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR __Dst$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1546 : #pragma warning(pop)
; 1547 : }

  00022	5e		 pop	 esi
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
__tcsncpy ENDP
_TEXT	ENDS
END
