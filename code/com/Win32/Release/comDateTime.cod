; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comDateTime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_sprintf
PUBLIC	?m_Sleep@Misc@@SAXH@Z				; Misc::m_Sleep
PUBLIC	?u_Sleep@Misc@@SAXH@Z				; Misc::u_Sleep
PUBLIC	?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z	; Misc::timespec_diff
PUBLIC	?getmillisec@Misc@@SAXPAUtimespec@@@Z		; Misc::getmillisec
PUBLIC	?getFileTime@Misc@@SAXPAUtimespec@@_N@Z		; Misc::getFileTime
PUBLIC	??0CFileTime@@QAE@XZ				; CFileTime::CFileTime
PUBLIC	??1CFileTime@@QAE@XZ				; CFileTime::~CFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPAD@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPA_J@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z	; CFileTime::setFileTime
PUBLIC	?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z ; CFileTime::isCompare
PUBLIC	??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z	; CDateTime::CDateTime
PUBLIC	??1CDateTime@@QAE@XZ				; CDateTime::~CDateTime
PUBLIC	?SetTimeValue@CDateTime@@QAEXPA_J@Z		; CDateTime::SetTimeValue
PUBLIC	?SetSecondsValue@CDateTime@@QAEXH@Z		; CDateTime::SetSecondsValue
PUBLIC	?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
PUBLIC	?DateString@CDateTime@@QAEPBDD@Z		; CDateTime::DateString
PUBLIC	?DateString2@CDateTime@@QAEPBDD@Z		; CDateTime::DateString2
PUBLIC	?TimeString@CDateTime@@QAEPBD_N@Z		; CDateTime::TimeString
PUBLIC	?addDateString@CDateTime@@QAEPBDHD@Z		; CDateTime::addDateString
PUBLIC	?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z	; CDateTime::setString
PUBLIC	?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z	; CDateTime::uptoSeconds
PUBLIC	?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z	; CDateTime::uptoMilliSeconds
PUBLIC	?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
PUBLIC	?initTimeZone@@YAXXZ				; initTimeZone
PUBLIC	?getTimeInterval@@YAXPAUSTTime@@00H@Z		; getTimeInterval
PUBLIC	?getCurrentTime@@YAXPAUSTTime@@@Z		; getCurrentTime
PUBLIC	?setLocalFileTime@@YA_NPA_JPAH1@Z		; setLocalFileTime
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@	; `string'
PUBLIC	??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@	; `string'
PUBLIC	??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@	; `string'
PUBLIC	??_C@_0BH@HKFDKJNJ@gm?5time?5and?5date?5?3?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_06GOMJDJGK@?$CL00?300?$AA@		; `string'
PUBLIC	??_C@_06GDNJFLBL@?$CL09?300?$AA@		; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_0BB@DIPNFMLG@?$CF04d?$CFc?$CF02d?$CFc?$CF02d?$AA@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0P@PDDCOHHC@?$CFs?$CFc?$CF02d?$CFc?$CF02d?$AA@ ; `string'
PUBLIC	??_C@_0M@POKEKNB@?$CF0s?$CF02d?$CF02d?$AA@	; `string'
PUBLIC	??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LHLEKEOL@CDateTime?3?3addDateString?$AA@ ; `string'
PUBLIC	??_C@_0BK@HNHCAJCP@?$CFs?5?$CFd?5ERROR?5_localtime_s?6?$AA@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp__asctime:PROC
EXTRN	__imp___gmtime64:PROC
EXTRN	__imp___localtime64_s:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetFileTime@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__GetSystemTime@4:PROC
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
EXTRN	__imp__GetLocalTime@4:PROC
EXTRN	__imp__GetTimeZoneInformation@4:PROC
EXTRN	__imp__FileTimeToSystemTime@8:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__aulldiv:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_stTZ@@3USTTimeZone@@A DB 010H DUP (?)		; g_stTZ
_BSS	ENDS
;	COMDAT ??_C@_0BK@HNHCAJCP@?$CFs?5?$CFd?5ERROR?5_localtime_s?6?$AA@
CONST	SEGMENT
??_C@_0BK@HNHCAJCP@?$CFs?5?$CFd?5ERROR?5_localtime_s?6?$AA@ DB '%s %d ERR'
	DB	'OR _localtime_s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LHLEKEOL@CDateTime?3?3addDateString?$AA@
CONST	SEGMENT
??_C@_0BJ@LHLEKEOL@CDateTime?3?3addDateString?$AA@ DB 'CDateTime::addDate'
	DB	'String', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@ DB '%02d:%02d:%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@POKEKNB@?$CF0s?$CF02d?$CF02d?$AA@
CONST	SEGMENT
??_C@_0M@POKEKNB@?$CF0s?$CF02d?$CF02d?$AA@ DB '%0s%02d%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PDDCOHHC@?$CFs?$CFc?$CF02d?$CFc?$CF02d?$AA@
CONST	SEGMENT
??_C@_0P@PDDCOHHC@?$CFs?$CFc?$CF02d?$CFc?$CF02d?$AA@ DB '%s%c%02d%c%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DIPNFMLG@?$CF04d?$CFc?$CF02d?$CFc?$CF02d?$AA@
CONST	SEGMENT
??_C@_0BB@DIPNFMLG@?$CF04d?$CFc?$CF02d?$CFc?$CF02d?$AA@ DB '%04d%c%02d%c%'
	DB	'02d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDNJFLBL@?$CL09?300?$AA@
CONST	SEGMENT
??_C@_06GDNJFLBL@?$CL09?300?$AA@ DB '+09:00', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOMJDJGK@?$CL00?300?$AA@
CONST	SEGMENT
??_C@_06GOMJDJGK@?$CL00?300?$AA@ DB '+00:00', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HKFDKJNJ@gm?5time?5and?5date?5?3?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BH@HKFDKJNJ@gm?5time?5and?5date?5?3?5?$CFs?6?$AA@ DB 'gm time and '
	DB	'date : %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@
CONST	SEGMENT
??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@ DB 'ERROR _localtime_s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@ DB '%02d%02d%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
CONST	SEGMENT
??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@ DB '%04d%02d%02d', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setLocalFileTime@@YA_NPA_JPAH1@Z
_TEXT	SEGMENT
_tmTime$ = -56						; size = 36
_szDate$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_fileTime$ = 8						; size = 4
_pDate$ = 12						; size = 4
_pTime$ = 16						; size = 4
?setLocalFileTime@@YA_NPA_JPAH1@Z PROC			; setLocalFileTime, COMDAT

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _fileTime$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 10	 mov	 ebx, DWORD PTR _pTime$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _pDate$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  0001b	50		 push	 eax
  0001c	8d 45 c8	 lea	 eax, DWORD PTR _tmTime$[ebp]
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00026	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 104  : 	if (err) { _tprintf(_T("ERROR _localtime_s\n")); return false; }

  00029	85 c0		 test	 eax, eax
  0002b	74 1f		 je	 SHORT $LN2@setLocalFi
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@
  00032	e8 00 00 00 00	 call	 _printf
  00037	83 c4 04	 add	 esp, 4
  0003a	32 c0		 xor	 al, al
  0003c	5f		 pop	 edi
  0003d	5b		 pop	 ebx

; 113  : 
; 114  : 	return true;
; 115  : }

  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00041	33 cd		 xor	 ecx, ebp
  00043	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN2@setLocalFi:

; 105  : #endif
; 106  : 	tmTime.tm_year += 1900;
; 107  : 	tmTime.tm_mon += 1;
; 108  : 
; 109  : 	_stprintf(szDate, "%04d%02d%02d", tmTime.tm_year, tmTime.tm_mon, tmTime.tm_mday);

  0004c	ff 75 d4	 push	 DWORD PTR _tmTime$[ebp+12]
  0004f	8b 45 d8	 mov	 eax, DWORD PTR _tmTime$[ebp+16]
  00052	8b 4d dc	 mov	 ecx, DWORD PTR _tmTime$[ebp+20]
  00055	40		 inc	 eax
  00056	50		 push	 eax
  00057	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0005d	89 45 d8	 mov	 DWORD PTR _tmTime$[ebp+16], eax
  00060	51		 push	 ecx
  00061	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00064	89 4d dc	 mov	 DWORD PTR _tmTime$[ebp+20], ecx
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 _sprintf

; 110  : 	*pDate = atoi(szDate);

  00072	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00075	50		 push	 eax
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 111  : 	_stprintf(szDate, "%02d%02d%02d", tmTime.tm_hour, tmTime.tm_min, tmTime.tm_sec);

  0007c	ff 75 c8	 push	 DWORD PTR _tmTime$[ebp]
  0007f	89 07		 mov	 DWORD PTR [edi], eax
  00081	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00084	ff 75 cc	 push	 DWORD PTR _tmTime$[ebp+4]
  00087	ff 75 d0	 push	 DWORD PTR _tmTime$[ebp+8]
  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 _sprintf

; 112  : 	*pTime = atoi(szDate);

  00095	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00098	50		 push	 eax
  00099	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 113  : 
; 114  : 	return true;
; 115  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	83 c4 30	 add	 esp, 48			; 00000030H
  000a5	89 03		 mov	 DWORD PTR [ebx], eax
  000a7	33 cd		 xor	 ecx, ebp
  000a9	b0 01		 mov	 al, 1
  000ab	5f		 pop	 edi
  000ac	5b		 pop	 ebx
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
?setLocalFileTime@@YA_NPA_JPAH1@Z ENDP			; setLocalFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getCurrentTime@@YAXPAUSTTime@@@Z
_TEXT	SEGMENT
_sysTm$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pTime$ = 8						; size = 4
?getCurrentTime@@YAXPAUSTTime@@@Z PROC			; getCurrentTime, COMDAT

; 465  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _pTime$[ebp]

; 466  : #ifndef WIN32
; 467  : 	struct	tm	ltm;
; 468  : 	ltm = &_tm;
; 469  : 	struct timespec tp;
; 470  : 	clock_gettime(CLOCK_REALTIME, &tp);
; 471  : 	pTime->nLast = tp.tv_nsec % MILLISEC_PER_SEC;
; 472  : 	time_t t = time(NULL);
; 473  : 	errno_t err = localtime_s(&ltm, &t);
; 474  : 	pTime->nHour = ltm.tm_hour;
; 475  : 	pTime->nMinute = ltm.tm_min;
; 476  : 	pTime->nSec = ltm.tm_sec;
; 477  : #else
; 478  : 	SYSTEMTIME	sysTm;
; 479  : 	GetSystemTime(&sysTm);

  00014	8d 45 ec	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 480  : 	pTime->nHour = sysTm.wHour;

  0001e	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTm$[ebp+8]

; 481  : 	pTime->nMinute = sysTm.wMinute;
; 482  : 	pTime->nSec = sysTm.wSecond;
; 483  : 	pTime->nLast = sysTm.wMilliseconds;
; 484  : #endif
; 485  : }

  00022	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00025	89 06		 mov	 DWORD PTR [esi], eax
  00027	33 cd		 xor	 ecx, ebp
  00029	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  0002d	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00030	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  00034	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00037	0f b7 45 fa	 movzx	 eax, WORD PTR _sysTm$[ebp+14]
  0003b	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0003e	5e		 pop	 esi
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?getCurrentTime@@YAXPAUSTTime@@@Z ENDP			; getCurrentTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getTimeInterval@@YAXPAUSTTime@@00H@Z
_TEXT	SEGMENT
_pTime1$ = 8						; size = 4
_pTime2$ = 12						; size = 4
_pTimeTarget$ = 16					; size = 4
_nLastLen$ = 20						; size = 4
?getTimeInterval@@YAXPAUSTTime@@00H@Z PROC		; getTimeInterval, COMDAT

; 488  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 489  : 	int nValue = 0, i;
; 490  : 	if (pTime2->nLast < pTime1->nLast) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pTime2$[ebp]
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _pTime1$[ebp]
  0000c	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]
  0000f	8b 5f 0c	 mov	 ebx, DWORD PTR [edi+12]
  00012	3b f3		 cmp	 esi, ebx
  00014	7d 25		 jge	 SHORT $LN5@getTimeInt

; 491  : 		nValue = 1;
; 492  : 		for (i = 0; i < nLastLen; i++)

  00016	8b 55 14	 mov	 edx, DWORD PTR _nLastLen$[ebp]
  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	85 d2		 test	 edx, edx
  00020	7e 0a		 jle	 SHORT $LN3@getTimeInt
$LL14@getTimeInt:

; 493  : 		{
; 494  : 			nValue = nValue * 10;

  00022	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00025	03 c0		 add	 eax, eax
  00027	83 ea 01	 sub	 edx, 1
  0002a	75 f6		 jne	 SHORT $LL14@getTimeInt
$LN3@getTimeInt:

; 495  : 		}
; 496  : 		pTimeTarget->nLast = (pTime2->nLast + nValue) - pTime1->nLast;

  0002c	8b 55 10	 mov	 edx, DWORD PTR _pTimeTarget$[ebp]
  0002f	2b f3		 sub	 esi, ebx
  00031	03 f0		 add	 esi, eax
  00033	89 72 0c	 mov	 DWORD PTR [edx+12], esi

; 497  : 		pTime2->nSec -= 1;

  00036	ff 49 08	 dec	 DWORD PTR [ecx+8]

; 498  : 	}
; 499  : 	else {

  00039	eb 08		 jmp	 SHORT $LN6@getTimeInt
$LN5@getTimeInt:

; 500  : 		pTimeTarget->nLast = pTime2->nLast - pTime1->nLast;

  0003b	8b 55 10	 mov	 edx, DWORD PTR _pTimeTarget$[ebp]
  0003e	2b f3		 sub	 esi, ebx
  00040	89 72 0c	 mov	 DWORD PTR [edx+12], esi
$LN6@getTimeInt:

; 501  : 	}
; 502  : 
; 503  : 	if (pTime2->nSec < pTime1->nSec) {

  00043	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00046	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  00049	3b c6		 cmp	 eax, esi
  0004b	7d 0d		 jge	 SHORT $LN7@getTimeInt

; 504  : 		pTimeTarget->nSec = (pTime2->nSec + 60) - pTime1->nSec;

  0004d	2b c6		 sub	 eax, esi
  0004f	83 c0 3c	 add	 eax, 60			; 0000003cH
  00052	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 505  : 		pTime2->nMinute -= 1;

  00055	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 506  : 	}
; 507  : 	else {

  00058	eb 05		 jmp	 SHORT $LN8@getTimeInt
$LN7@getTimeInt:

; 508  : 		pTimeTarget->nSec = pTime2->nSec - pTime1->nSec;

  0005a	2b c6		 sub	 eax, esi
  0005c	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN8@getTimeInt:

; 509  : 	}
; 510  : 
; 511  : 	if (pTime2->nMinute < pTime1->nMinute) {

  0005f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00062	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00065	3b c6		 cmp	 eax, esi
  00067	7d 15		 jge	 SHORT $LN9@getTimeInt

; 512  : 		pTimeTarget->nMinute = (pTime2->nMinute + 60) - pTime1->nMinute;

  00069	2b c6		 sub	 eax, esi
  0006b	83 c0 3c	 add	 eax, 60			; 0000003cH
  0006e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 513  : 		pTime2->nHour -= 1;

  00071	ff 09		 dec	 DWORD PTR [ecx]

; 517  : 	}
; 518  : 	pTimeTarget->nHour = pTime2->nHour - pTime1->nHour;

  00073	8b 01		 mov	 eax, DWORD PTR [ecx]
  00075	2b 07		 sub	 eax, DWORD PTR [edi]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	89 02		 mov	 DWORD PTR [edx], eax
  0007b	5b		 pop	 ebx

; 519  : }

  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
$LN9@getTimeInt:

; 514  : 	}
; 515  : 	else {
; 516  : 		pTimeTarget->nMinute = pTime2->nMinute - pTime1->nMinute;

  0007e	2b c6		 sub	 eax, esi
  00080	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 517  : 	}
; 518  : 	pTimeTarget->nHour = pTime2->nHour - pTime1->nHour;

  00083	8b 01		 mov	 eax, DWORD PTR [ecx]
  00085	2b 07		 sub	 eax, DWORD PTR [edi]
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	89 02		 mov	 DWORD PTR [edx], eax
  0008b	5b		 pop	 ebx

; 519  : }

  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?getTimeInterval@@YAXPAUSTTime@@00H@Z ENDP		; getTimeInterval
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?initTimeZone@@YAXXZ
_TEXT	SEGMENT
_tzi$ = -176						; size = 172
__$ArrayPad$ = -4					; size = 4
?initTimeZone@@YAXXZ PROC				; initTimeZone, COMDAT

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi

; 25   : #ifndef WIN32
; 26   : 	//struct timespec tp;
; 27   : 	//clock_gettime(CLOCK_REALTIME, &tp); 
; 28   : 	//m_tmval.tv_sec = tp.tv_sec;
; 29   : 	//m_tmval.tv_usec = tp.tv_nsec/1000000L;
; 30   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 31   : 	//struct timezone tz;
; 32   : 	//gettimeofday(&m_tmval, &tz);
; 33   : 	//m_tm = *localtime((const time_t*)&m_tmval.tv_sec);
; 34   : 	//gettimeofday(&m_tmval, NULL);
; 35   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 36   : #else
; 37   : 	TIME_ZONE_INFORMATION tzi;
; 38   : 	GetTimeZoneInformation(&tzi);

  00014	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _tzi$[ebp]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTimeZoneInformation@4

; 39   : 	g_stTZ.nTZHour = (-tzi.Bias) / 60;

  00021	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _tzi$[ebp]
  00027	b8 77 77 77 77	 mov	 eax, 2004318071		; 77777777H
  0002c	f7 e9		 imul	 ecx

; 40   : 	g_stTZ.nTZMin = (-tzi.Bias) % 60;

  0002e	be 3c 00 00 00	 mov	 esi, 60			; 0000003cH

; 41   : 	g_stTZ.nTZSec = (tzi.Bias) * 60;
; 42   : 	g_stTZ.nTZType = 0;

  00033	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+12, 0
  0003d	2b d1		 sub	 edx, ecx
  0003f	c1 fa 05	 sar	 edx, 5
  00042	8b c2		 mov	 eax, edx
  00044	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00047	03 c2		 add	 eax, edx
  00049	a3 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A, eax
  0004e	8b c1		 mov	 eax, ecx
  00050	f7 d8		 neg	 eax
  00052	99		 cdq
  00053	f7 fe		 idiv	 esi
  00055	8b c1		 mov	 eax, ecx
  00057	c1 e0 04	 shl	 eax, 4
  0005a	2b c1		 sub	 eax, ecx
  0005c	89 15 04 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+4, edx

; 43   : #endif
; 44   : }

  00062	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00065	c1 e0 02	 shl	 eax, 2
  00068	33 cd		 xor	 ecx, ebp
  0006a	a3 08 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+8, eax
  0006f	5e		 pop	 esi
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?initTimeZone@@YAXXZ ENDP				; initTimeZone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z
_TEXT	SEGMENT
_t$ = -8						; size = 8
_nTz$ = 8						; size = 4
_nType$ = 12						; size = 4
?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z PROC ; CDateTime::uptoMicroseconds, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 261  : 	struct	tm	*ltm = &m_tm;
; 262  : 	//long divisor;
; 263  : 
; 264  : #ifndef WIN32
; 265  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 266  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 267  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%divisor;
; 268  : 	if(nType == DT_MICROSEC) m_tmval.tv_nsec = m_tmval.tv_nsec%MICROSEC_PER_SEC;
; 269  : #else
; 270  : 	Misc::getFileTime(&m_tmval, nType == DT_MICROSEC?true:false);

  00006	83 7d 0c 03	 cmp	 DWORD PTR _nType$[ebp], 3
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	0f 94 c0	 sete	 al
  00010	57		 push	 edi
  00011	0f b6 c0	 movzx	 eax, al
  00014	50		 push	 eax
  00015	8d 7e 28	 lea	 edi, DWORD PTR [esi+40]
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 ?getFileTime@Misc@@SAXPAUtimespec@@_N@Z ; Misc::getFileTime

; 271  : 	uptoSeconds(nTz, m_tmval.tv_sec);

  0001e	8b 07		 mov	 eax, DWORD PTR [edi]
  00020	83 c4 08	 add	 esp, 8

; 202  : 	if (nTz == TZ_UTC) {

  00023	83 7d 08 01	 cmp	 DWORD PTR _nTz$[ebp], 1

; 271  : 	uptoSeconds(nTz, m_tmval.tv_sec);

  00027	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  0002a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002d	89 45 fc	 mov	 DWORD PTR _t$[ebp+4], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00030	8d 45 f8	 lea	 eax, DWORD PTR _t$[ebp]
  00033	50		 push	 eax
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 202  : 	if (nTz == TZ_UTC) {

  00034	75 1c		 jne	 SHORT $LN4@uptoMicros
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 208  : 		memcpy(&m_tm, ltm, sizeof(m_tm));

  0003c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0003f	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00042	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00046	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  0004a	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  0004d	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 209  : 	}
; 210  : 	else {//if (nTz == TZ_KST) {

  00050	eb 18		 jmp	 SHORT $LN12@uptoMicros
$LN4@uptoMicros:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  00052	56		 push	 esi
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00059	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  0005c	85 c0		 test	 eax, eax
  0005e	74 0d		 je	 SHORT $LN6@uptoMicros
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@
  00065	e8 00 00 00 00	 call	 _printf
$LN12@uptoMicros:
  0006a	83 c4 04	 add	 esp, 4
$LN6@uptoMicros:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;
; 220  : 	m_tm.tm_mon += 1;
; 221  : 	m_tmval.tv_sec = t;

  0006d	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  00070	81 46 14 6c 07
	00 00		 add	 DWORD PTR [esi+20], 1900 ; 0000076cH
  00077	ff 46 10	 inc	 DWORD PTR [esi+16]
  0007a	89 07		 mov	 DWORD PTR [edi], eax
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp+4]
  0007f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00082	5f		 pop	 edi

; 222  : 	m_tmval.tv_nsec = 0;

  00083	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  0008a	5e		 pop	 esi

; 272  : #endif
; 273  : 	//_stprintf(szBuf, _T("%04d/%02d/%02d %02d:%02d:%02d , %d\n"), m_tm.tm_year, m_tm.tm_mon, m_tm.tm_wday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_usec);
; 274  : 	//_tprintf(szBuf);
; 275  : }

  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ENDP ; CDateTime::uptoMicroseconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z
_TEXT	SEGMENT
_sysTm$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_nTz$ = 8						; size = 4
?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z PROC	; CDateTime::uptoMilliSeconds, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 228  : 	// only UTC
; 229  : 	struct	tm	*ltm = &m_tm;
; 230  : #ifndef WIN32
; 231  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 232  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 233  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%MILLISEC_PER_SEC;
; 234  : #else
; 235  : 	//GetSystemTime(&sysTm);
; 236  : //	time_t t = time(NULL);
; 237  : 	SYSTEMTIME	sysTm;
; 238  : 	if (nTz == TZ_UTC) {

  00010	83 7d 08 01	 cmp	 DWORD PTR _nTz$[ebp], 1

; 239  : 		GetSystemTime(&sysTm);

  00014	8d 45 ec	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	50		 push	 eax
  0001b	75 08		 jne	 SHORT $LN2@uptoMilliS
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 240  : 	}
; 241  : 	else {//if (nTz == TZ_KST)

  00023	eb 06		 jmp	 SHORT $LN3@uptoMilliS
$LN2@uptoMilliS:

; 242  : 		GetLocalTime(&sysTm);

  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
$LN3@uptoMilliS:

; 243  : 	}
; 244  : 	m_tm.tm_year = sysTm.wYear;

  0002b	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTm$[ebp]

; 245  : 	m_tm.tm_mon = sysTm.wMonth;
; 246  : 	m_tm.tm_mday = sysTm.wDay;
; 247  : 	m_tm.tm_wday = sysTm.wDayOfWeek;
; 248  : 	m_tm.tm_hour = sysTm.wHour;
; 249  : 	m_tm.tm_min = sysTm.wMinute;
; 250  : 	m_tm.tm_sec = sysTm.wSecond;
; 251  : 	//uptoSeconds(nTz, t);
; 252  : 	m_tmval.tv_sec = 0;
; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;
; 255  : #endif
; 256  : }

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00032	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00035	33 cd		 xor	 ecx, ebp
  00037	0f b7 45 ee	 movzx	 eax, WORD PTR _sysTm$[ebp+2]
  0003b	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003e	0f b7 45 f2	 movzx	 eax, WORD PTR _sysTm$[ebp+6]
  00042	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00045	0f b7 45 f0	 movzx	 eax, WORD PTR _sysTm$[ebp+4]
  00049	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0004c	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTm$[ebp+8]
  00050	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00053	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  00057	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0005a	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  0005e	89 06		 mov	 DWORD PTR [esi], eax
  00060	0f b7 45 fa	 movzx	 eax, WORD PTR _sysTm$[ebp+14]
  00064	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  0006b	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00072	89 46 30	 mov	 DWORD PTR [esi+48], eax
  00075	5e		 pop	 esi
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
?uptoMilliSeconds@CDateTime@@AAEXW4TZ_TYPE@@@Z ENDP	; CDateTime::uptoMilliSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z
_TEXT	SEGMENT
_nTz$ = 8						; size = 4
_t$ = 12						; size = 8
?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z PROC	; CDateTime::uptoSeconds, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 	if (nTz == TZ_UTC) {

  00003	83 7d 08 01	 cmp	 DWORD PTR _nTz$[ebp], 1
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00007	8d 45 0c	 lea	 eax, DWORD PTR _t$[ebp]
  0000a	56		 push	 esi
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 200  : {

  0000b	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  0000d	50		 push	 eax
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 202  : 	if (nTz == TZ_UTC) {

  0000e	75 1c		 jne	 SHORT $LN2@uptoSecond
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 208  : 		memcpy(&m_tm, ltm, sizeof(m_tm));

  00016	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00019	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0001c	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  00020	0f 11 46 10	 movups	 XMMWORD PTR [esi+16], xmm0
  00024	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00027	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 209  : 	}
; 210  : 	else {//if (nTz == TZ_KST) {

  0002a	eb 18		 jmp	 SHORT $LN10@uptoSecond
$LN2@uptoSecond:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  0002c	56		 push	 esi
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00033	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  00036	85 c0		 test	 eax, eax
  00038	74 0d		 je	 SHORT $LN4@uptoSecond
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@
  0003f	e8 00 00 00 00	 call	 _printf
$LN10@uptoSecond:
  00044	83 c4 04	 add	 esp, 4
$LN4@uptoSecond:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;
; 220  : 	m_tm.tm_mon += 1;
; 221  : 	m_tmval.tv_sec = t;

  00047	8b 45 0c	 mov	 eax, DWORD PTR _t$[ebp]
  0004a	81 46 14 6c 07
	00 00		 add	 DWORD PTR [esi+20], 1900 ; 0000076cH
  00051	ff 46 10	 inc	 DWORD PTR [esi+16]
  00054	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00057	8b 45 10	 mov	 eax, DWORD PTR _t$[ebp+4]
  0005a	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 222  : 	m_tmval.tv_nsec = 0;

  0005d	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00064	5e		 pop	 esi

; 223  : }

  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ENDP	; CDateTime::uptoSeconds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z
_TEXT	SEGMENT
_pyear$1 = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_pTarget$ = 8						; size = 4
_pFormat$ = 12						; size = 4
_nFormat$ = 16						; size = 4
?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z PROC	; CDateTime::setString, COMDAT
; _this$ = ecx

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 279  : 	int nLen=0;
; 280  : 	switch (nFormat)

  00011	8b 5d 10	 mov	 ebx, DWORD PTR _nFormat$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR _pTarget$[ebp]
  00019	8b f1		 mov	 esi, ecx
  0001b	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  0001e	83 f8 08	 cmp	 eax, 8
  00021	0f 87 c6 00 00
	00		 ja	 $LN9@setString
  00027	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@setString[eax]
  0002e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@setString[eax*4]
$LN4@setString:

; 281  : 	{
; 282  : 	case LOG_DATE_DDHHMMSS :
; 283  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00035	ff 36		 push	 DWORD PTR [esi]
  00037	ff 76 04	 push	 DWORD PTR [esi+4]
  0003a	ff 76 08	 push	 DWORD PTR [esi+8]
  0003d	ff 76 0c	 push	 DWORD PTR [esi+12]
  00040	ff 75 0c	 push	 DWORD PTR _pFormat$[ebp]
  00043	57		 push	 edi
  00044	e8 00 00 00 00	 call	 _sprintf
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;
; 309  : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	33 cd		 xor	 ecx, ebp
  00054	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
$LN5@setString:

; 284  : 		break;
; 285  : 	case LOG_DATE_YYMMDDHHMMSS:
; 286  : 	case LOG_DATE_YYMMDDHHMMSS3:
; 287  : 	case LOG_DATE_YYMMDDHHMMSS6:
; 288  : 	case LOG_DATE_YYMMDDHHMMSS9:
; 289  : 		{
; 290  : 			TCHAR pyear[6];
; 291  : 			_stprintf(pyear, _T("%d"), m_tm.tm_year);

  0005f	ff 76 14	 push	 DWORD PTR [esi+20]
  00062	8d 45 f4	 lea	 eax, DWORD PTR _pyear$1[ebp]
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 _sprintf
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH

; 292  : 			if (nFormat == LOG_DATE_YYMMDDHHMMSS) {
; 293  : 				nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00073	8d 45 f6	 lea	 eax, DWORD PTR _pyear$1[ebp+2]
  00076	83 fb 05	 cmp	 ebx, 5
  00079	75 2e		 jne	 SHORT $LN6@setString
  0007b	ff 36		 push	 DWORD PTR [esi]
  0007d	ff 76 04	 push	 DWORD PTR [esi+4]
  00080	ff 76 08	 push	 DWORD PTR [esi+8]
  00083	ff 76 0c	 push	 DWORD PTR [esi+12]
  00086	ff 76 10	 push	 DWORD PTR [esi+16]
  00089	50		 push	 eax
  0008a	ff 75 0c	 push	 DWORD PTR _pFormat$[ebp]
  0008d	57		 push	 edi
  0008e	e8 00 00 00 00	 call	 _sprintf
  00093	83 c4 20	 add	 esp, 32			; 00000020H
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;
; 309  : }

  00099	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009c	33 cd		 xor	 ecx, ebp
  0009e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 0c 00	 ret	 12			; 0000000cH
$LN6@setString:

; 294  : 			}
; 295  : 			else nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  000a9	ff 76 30	 push	 DWORD PTR [esi+48]
  000ac	ff 36		 push	 DWORD PTR [esi]
  000ae	ff 76 04	 push	 DWORD PTR [esi+4]
  000b1	ff 76 08	 push	 DWORD PTR [esi+8]
  000b4	ff 76 0c	 push	 DWORD PTR [esi+12]
  000b7	ff 76 10	 push	 DWORD PTR [esi+16]
  000ba	50		 push	 eax

; 296  : 		}
; 297  : 		break;

  000bb	eb 44		 jmp	 SHORT $LN12@setString
$LN8@setString:

; 298  : 	case LOG_DATE_YYYYMMDDHHMMSS:
; 299  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  000bd	ff 36		 push	 DWORD PTR [esi]
  000bf	ff 76 04	 push	 DWORD PTR [esi+4]
  000c2	ff 76 08	 push	 DWORD PTR [esi+8]
  000c5	ff 76 0c	 push	 DWORD PTR [esi+12]
  000c8	ff 76 10	 push	 DWORD PTR [esi+16]
  000cb	ff 76 14	 push	 DWORD PTR [esi+20]
  000ce	ff 75 0c	 push	 DWORD PTR _pFormat$[ebp]
  000d1	57		 push	 edi
  000d2	e8 00 00 00 00	 call	 _sprintf
  000d7	83 c4 20	 add	 esp, 32			; 00000020H
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;
; 309  : }

  000dd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e0	33 cd		 xor	 ecx, ebp
  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 0c 00	 ret	 12			; 0000000cH
$LN9@setString:

; 300  : 		break;
; 301  : 	case LOG_DATE_YYYYMMDDHHMMSS3:
; 302  : 	case LOG_DATE_YYYYMMDDHHMMSS6:
; 303  : 	case LOG_DATE_YYYYMMDDHHMMSS9:
; 304  : 	default:
; 305  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  000ed	ff 76 30	 push	 DWORD PTR [esi+48]
  000f0	ff 36		 push	 DWORD PTR [esi]
  000f2	ff 76 04	 push	 DWORD PTR [esi+4]
  000f5	ff 76 08	 push	 DWORD PTR [esi+8]
  000f8	ff 76 0c	 push	 DWORD PTR [esi+12]
  000fb	ff 76 10	 push	 DWORD PTR [esi+16]
  000fe	ff 76 14	 push	 DWORD PTR [esi+20]
$LN12@setString:
  00101	ff 75 0c	 push	 DWORD PTR _pFormat$[ebp]
  00104	57		 push	 edi
  00105	e8 00 00 00 00	 call	 _sprintf

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;
; 309  : }

  0010a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010d	83 c4 24	 add	 esp, 36			; 00000024H
  00110	33 cd		 xor	 ecx, ebp
  00112	5f		 pop	 edi
  00113	5e		 pop	 esi
  00114	5b		 pop	 ebx
  00115	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 0c 00	 ret	 12			; 0000000cH
$LN14@setString:
  00120	00 00 00 00	 DD	 $LN8@setString
  00124	00 00 00 00	 DD	 $LN5@setString
  00128	00 00 00 00	 DD	 $LN4@setString
  0012c	00 00 00 00	 DD	 $LN9@setString
$LN11@setString:
  00130	00		 DB	 0
  00131	03		 DB	 3
  00132	03		 DB	 3
  00133	03		 DB	 3
  00134	01		 DB	 1
  00135	01		 DB	 1
  00136	01		 DB	 1
  00137	01		 DB	 1
  00138	02		 DB	 2
?setString@CDateTime@@QAEHPAD0W4DT_FORMAT@@@Z ENDP	; CDateTime::setString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?addDateString@CDateTime@@QAEPBDHD@Z
_TEXT	SEGMENT
_t$ = -48						; size = 36
_timer$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_nAddDay$ = 8						; size = 4
_f$ = 12						; size = 1
?addDateString@CDateTime@@QAEPBDHD@Z PROC		; CDateTime::addDateString, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00013	6a 00		 push	 0
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 371  : {

  00015	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0001d	8b f0		 mov	 esi, eax
  0001f	8b fa		 mov	 edi, edx
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  00021	69 45 08 80 51
	01 00		 imul	 eax, DWORD PTR _nAddDay$[ebp], 86400
  00028	99		 cdq
  00029	03 f0		 add	 esi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  0002b	8d 45 f4	 lea	 eax, DWORD PTR _timer$[ebp]
  0002e	50		 push	 eax
  0002f	8d 45 d0	 lea	 eax, DWORD PTR _t$[ebp]
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  00032	89 75 f4	 mov	 DWORD PTR _timer$[ebp], esi
  00035	13 fa		 adc	 edi, edx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  00037	50		 push	 eax
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  00038	89 7d f8	 mov	 DWORD PTR _timer$[ebp+4], edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 376  : 	if (err) _tprintf(_T("%s %d ERROR _localtime_s\n"), __FUNCTION__, __LINE__);

  00044	85 c0		 test	 eax, eax
  00046	74 17		 je	 SHORT $LN2@addDateStr
  00048	68 78 01 00 00	 push	 376			; 00000178H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@LHLEKEOL@CDateTime?3?3addDateString?$AA@
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HNHCAJCP@?$CFs?5?$CFd?5ERROR?5_localtime_s?6?$AA@
  00057	e8 00 00 00 00	 call	 _printf
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@addDateStr:

; 377  : 
; 378  : 	if (f) {

  0005f	8a 45 0c	 mov	 al, BYTE PTR _f$[ebp]

; 379  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", t.tm_year + 1900, f, t.tm_mon+1, f, t.tm_mday);

  00062	8d 73 38	 lea	 esi, DWORD PTR [ebx+56]
  00065	ff 75 dc	 push	 DWORD PTR _t$[ebp+12]
  00068	84 c0		 test	 al, al
  0006a	74 24		 je	 SHORT $LN3@addDateStr
  0006c	0f be c8	 movsx	 ecx, al
  0006f	8b 45 e0	 mov	 eax, DWORD PTR _t$[ebp+16]
  00072	51		 push	 ecx
  00073	40		 inc	 eax
  00074	50		 push	 eax
  00075	51		 push	 ecx
  00076	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp+20]
  00079	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0007f	51		 push	 ecx
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DIPNFMLG@?$CF04d?$CFc?$CF02d?$CFc?$CF02d?$AA@
  00085	56		 push	 esi
  00086	e8 00 00 00 00	 call	 _sprintf
  0008b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 380  : 	}
; 381  : 	else {

  0008e	eb 1d		 jmp	 SHORT $LN10@addDateStr
$LN3@addDateStr:

; 382  : 		_stprintf(m_szDate, "%04d%02d%02d", t.tm_year + 1900, t.tm_mon + 1, t.tm_mday);

  00090	8b 4d e0	 mov	 ecx, DWORD PTR _t$[ebp+16]
  00093	41		 inc	 ecx
  00094	51		 push	 ecx
  00095	8b 4d e4	 mov	 ecx, DWORD PTR _t$[ebp+20]
  00098	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  0009e	51		 push	 ecx
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 _sprintf
  000aa	83 c4 14	 add	 esp, 20			; 00000014H
$LN10@addDateStr:

; 383  : 	}
; 384  : 	return m_szDate;
; 385  : }

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b0	8b c6		 mov	 eax, esi
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	33 cd		 xor	 ecx, ebp
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
?addDateString@CDateTime@@QAEPBDHD@Z ENDP		; CDateTime::addDateString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?TimeString@CDateTime@@QAEPBD_N@Z
_TEXT	SEGMENT
_f$ = 8							; size = 1
?TimeString@CDateTime@@QAEPBD_N@Z PROC			; CDateTime::TimeString, COMDAT
; _this$ = ecx

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 360  : 	if (f) {

  00003	80 7d 08 00	 cmp	 BYTE PTR _f$[ebp], 0
  00007	56		 push	 esi

; 361  : 		_stprintf(m_szTime, "%02d:%02d:%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00008	ff 31		 push	 DWORD PTR [ecx]
  0000a	8d 71 44	 lea	 esi, DWORD PTR [ecx+68]
  0000d	ff 71 04	 push	 DWORD PTR [ecx+4]
  00010	ff 71 08	 push	 DWORD PTR [ecx+8]
  00013	74 15		 je	 SHORT $LN2@TimeString
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PLMNPDMB@?$CF02d?3?$CF02d?3?$CF02d?$AA@

; 362  : 	}
; 363  : 	else {
; 364  : 		_stprintf(m_szTime, "%02d%02d%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 _sprintf
  00020	83 c4 14	 add	 esp, 20			; 00000014H

; 365  : 	}
; 366  : 	return m_szTime;

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi

; 367  : 
; 368  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@TimeString:

; 362  : 	}
; 363  : 	else {
; 364  : 		_stprintf(m_szTime, "%02d%02d%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _sprintf
  00035	83 c4 14	 add	 esp, 20			; 00000014H

; 365  : 	}
; 366  : 	return m_szTime;

  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 367  : 
; 368  : }

  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
?TimeString@CDateTime@@QAEPBD_N@Z ENDP			; CDateTime::TimeString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?DateString2@CDateTime@@QAEPBDD@Z
_TEXT	SEGMENT
_pyear$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 1
?DateString2@CDateTime@@QAEPBDD@Z PROC			; CDateTime::DateString2, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx

; 349  : 	char pyear[6];
; 350  : 	sprintf(pyear, "%d", m_tm.tm_year);

  00014	8d 45 f4	 lea	 eax, DWORD PTR _pyear$[ebp]
  00017	ff 77 14	 push	 DWORD PTR [edi+20]
  0001a	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _sprintf

; 351  : 	sprintf(pyear, "%s", pyear + 2);

  00025	8d 45 f6	 lea	 eax, DWORD PTR _pyear$[ebp+2]
  00028	50		 push	 eax
  00029	8d 45 f4	 lea	 eax, DWORD PTR _pyear$[ebp]
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 _sprintf

; 352  : 
; 353  : 	if(f)_stprintf(m_szDate, "%s%c%02d%c%02d", pyear, f, m_tm.tm_mon, f, m_tm.tm_mday);

  00037	8a 45 08	 mov	 al, BYTE PTR _f$[ebp]
  0003a	8d 77 38	 lea	 esi, DWORD PTR [edi+56]
  0003d	83 c4 18	 add	 esp, 24			; 00000018H
  00040	ff 77 0c	 push	 DWORD PTR [edi+12]
  00043	84 c0		 test	 al, al
  00045	74 2e		 je	 SHORT $LN2@DateString
  00047	0f be c8	 movsx	 ecx, al
  0004a	8d 45 f4	 lea	 eax, DWORD PTR _pyear$[ebp]
  0004d	51		 push	 ecx
  0004e	ff 77 10	 push	 DWORD PTR [edi+16]
  00051	51		 push	 ecx
  00052	50		 push	 eax
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PDDCOHHC@?$CFs?$CFc?$CF02d?$CFc?$CF02d?$AA@
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 _sprintf
  0005e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 355  : 	return m_szDate;

  00061	8b c6		 mov	 eax, esi
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi

; 356  : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN2@DateString:

; 354  : 	else _stprintf(m_szDate, "%0s%02d%02d", pyear, m_tm.tm_mon, m_tm.tm_mday);

  00075	ff 77 10	 push	 DWORD PTR [edi+16]
  00078	8d 45 f4	 lea	 eax, DWORD PTR _pyear$[ebp]
  0007b	50		 push	 eax
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@POKEKNB@?$CF0s?$CF02d?$CF02d?$AA@
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 _sprintf

; 356  : }

  00087	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008a	83 c4 14	 add	 esp, 20			; 00000014H
  0008d	8b c6		 mov	 eax, esi
  0008f	33 cd		 xor	 ecx, ebp
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c2 04 00	 ret	 4
?DateString2@CDateTime@@QAEPBDD@Z ENDP			; CDateTime::DateString2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?DateString@CDateTime@@QAEPBDD@Z
_TEXT	SEGMENT
_f$ = 8							; size = 1
?DateString@CDateTime@@QAEPBDD@Z PROC			; CDateTime::DateString, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 337  : 	if (f) {

  00003	8a 45 08	 mov	 al, BYTE PTR _f$[ebp]
  00006	56		 push	 esi

; 338  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", m_tm.tm_year, f, m_tm.tm_mon, f, m_tm.tm_mday);

  00007	8d 71 38	 lea	 esi, DWORD PTR [ecx+56]
  0000a	ff 71 0c	 push	 DWORD PTR [ecx+12]
  0000d	84 c0		 test	 al, al
  0000f	74 20		 je	 SHORT $LN2@DateString
  00011	0f be d0	 movsx	 edx, al
  00014	52		 push	 edx
  00015	ff 71 10	 push	 DWORD PTR [ecx+16]
  00018	52		 push	 edx
  00019	ff 71 14	 push	 DWORD PTR [ecx+20]
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DIPNFMLG@?$CF04d?$CFc?$CF02d?$CFc?$CF02d?$AA@
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 _sprintf
  00027	83 c4 1c	 add	 esp, 28			; 0000001cH

; 342  : 	}
; 343  : 	return m_szDate;

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi

; 344  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
$LN2@DateString:

; 339  : 	}
; 340  : 	else {
; 341  : 		_stprintf(m_szDate, "%04d%02d%02d", m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday);

  00031	ff 71 10	 push	 DWORD PTR [ecx+16]
  00034	ff 71 14	 push	 DWORD PTR [ecx+20]
  00037	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  0003c	56		 push	 esi
  0003d	e8 00 00 00 00	 call	 _sprintf
  00042	83 c4 14	 add	 esp, 20			; 00000014H

; 342  : 	}
; 343  : 	return m_szDate;

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 344  : }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
?DateString@CDateTime@@QAEPBDD@Z ENDP			; CDateTime::DateString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z
_TEXT	SEGMENT
_sysTm$1 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_nType$ = 8						; size = 4
_nTz$ = 12						; size = 4
?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z PROC ; CDateTime::SetCurrentTime, COMDAT
; _this$ = ecx

; 179  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
  00013	57		 push	 edi

; 180  : 	struct	tm	*ltm = &m_tm;
; 181  : 	m_szTimezone[0] = 0;
; 182  : 
; 183  : 	if (nTz) {

  00014	8b 7d 0c	 mov	 edi, DWORD PTR _nTz$[ebp]
  00017	c6 46 5c 00	 mov	 BYTE PTR [esi+92], 0
  0001b	85 ff		 test	 edi, edi
  0001d	74 3d		 je	 SHORT $LN7@SetCurrent

; 184  : 		if (nTz == TZ_UTC) {

  0001f	83 ff 01	 cmp	 edi, 1
  00022	75 19		 jne	 SHORT $LN5@SetCurrent

; 185  : 			_tcscpy(m_szTimezone, _T("+00:00"));

  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06GOMJDJGK@?$CL00?300?$AA@
  00029	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0002c	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06GOMJDJGK@?$CL00?300?$AA@+4
  00032	66 89 46 60	 mov	 WORD PTR [esi+96], ax
  00036	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_06GOMJDJGK@?$CL00?300?$AA@+6
  0003b	eb 1c		 jmp	 SHORT $LN18@SetCurrent
$LN5@SetCurrent:

; 186  : 		}
; 187  : 		else if (nTz == TZ_KST) {

  0003d	83 ff 02	 cmp	 edi, 2
  00040	75 1a		 jne	 SHORT $LN7@SetCurrent

; 188  : 			_tcscpy(m_szTimezone, _T("+09:00"));

  00042	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06GDNJFLBL@?$CL09?300?$AA@
  00047	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0004a	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06GDNJFLBL@?$CL09?300?$AA@+4
  00050	66 89 46 60	 mov	 WORD PTR [esi+96], ax
  00054	a0 06 00 00 00	 mov	 al, BYTE PTR ??_C@_06GDNJFLBL@?$CL09?300?$AA@+6
$LN18@SetCurrent:
  00059	88 46 62	 mov	 BYTE PTR [esi+98], al
$LN7@SetCurrent:

; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	switch (nType) {

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _nType$[ebp]
  0005f	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  00062	83 f8 03	 cmp	 eax, 3
  00065	0f 87 a5 00 00
	00		 ja	 $LN2@SetCurrent
  0006b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN20@SetCurrent[eax*4]
$LN8@SetCurrent:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00072	6a 00		 push	 0
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0007a	83 c4 04	 add	 esp, 4
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 193  : 	case DT_SEC: { time_t t = time(NULL);  uptoSeconds(nTz, t);	break; }

  0007d	8b ce		 mov	 ecx, esi
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AAEXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi

; 196  : 	}
; 197  : }

  00089	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008c	33 cd		 xor	 ecx, ebp
  0008e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 08 00	 ret	 8
$LN9@SetCurrent:

; 239  : 		GetSystemTime(&sysTm);

  00099	8d 45 ec	 lea	 eax, DWORD PTR _sysTm$1[ebp]
  0009c	50		 push	 eax
  0009d	83 ff 01	 cmp	 edi, 1
  000a0	75 08		 jne	 SHORT $LN15@SetCurrent
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4

; 240  : 	}
; 241  : 	else {//if (nTz == TZ_KST)

  000a8	eb 06		 jmp	 SHORT $LN16@SetCurrent
$LN15@SetCurrent:

; 242  : 		GetLocalTime(&sysTm);

  000aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocalTime@4
$LN16@SetCurrent:

; 243  : 	}
; 244  : 	m_tm.tm_year = sysTm.wYear;

  000b0	0f b7 45 ec	 movzx	 eax, WORD PTR _sysTm$1[ebp]
  000b4	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 245  : 	m_tm.tm_mon = sysTm.wMonth;

  000b7	0f b7 45 ee	 movzx	 eax, WORD PTR _sysTm$1[ebp+2]
  000bb	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 246  : 	m_tm.tm_mday = sysTm.wDay;

  000be	0f b7 45 f2	 movzx	 eax, WORD PTR _sysTm$1[ebp+6]
  000c2	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 247  : 	m_tm.tm_wday = sysTm.wDayOfWeek;

  000c5	0f b7 45 f0	 movzx	 eax, WORD PTR _sysTm$1[ebp+4]
  000c9	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 248  : 	m_tm.tm_hour = sysTm.wHour;

  000cc	0f b7 45 f4	 movzx	 eax, WORD PTR _sysTm$1[ebp+8]
  000d0	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 249  : 	m_tm.tm_min = sysTm.wMinute;

  000d3	0f b7 45 f6	 movzx	 eax, WORD PTR _sysTm$1[ebp+10]
  000d7	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 250  : 	m_tm.tm_sec = sysTm.wSecond;

  000da	0f b7 45 f8	 movzx	 eax, WORD PTR _sysTm$1[ebp+12]
  000de	89 06		 mov	 DWORD PTR [esi], eax

; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;

  000e0	0f b7 45 fa	 movzx	 eax, WORD PTR _sysTm$1[ebp+14]
  000e4	5f		 pop	 edi

; 251  : 	//uptoSeconds(nTz, t);
; 252  : 	m_tmval.tv_sec = 0;

  000e5	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  000ec	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;

  000f3	89 46 30	 mov	 DWORD PTR [esi+48], eax
  000f6	5e		 pop	 esi

; 196  : 	}
; 197  : }

  000f7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000fa	33 cd		 xor	 ecx, ebp
  000fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c2 08 00	 ret	 8
$LN10@SetCurrent:

; 194  : 	case DT_MILLISEC: uptoMilliSeconds(nTz);	break;
; 195  : 	case DT_MICROSEC: case DT_NANOSEC: uptoMicroseconds(nTz, nType); break;

  00107	51		 push	 ecx
  00108	57		 push	 edi
  00109	8b ce		 mov	 ecx, esi
  0010b	e8 00 00 00 00	 call	 ?uptoMicroseconds@CDateTime@@AAEXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
$LN2@SetCurrent:

; 196  : 	}
; 197  : }

  00110	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00113	5f		 pop	 edi
  00114	33 cd		 xor	 ecx, ebp
  00116	5e		 pop	 esi
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
  00122	66 90		 npad	 2
$LN20@SetCurrent:
  00124	00 00 00 00	 DD	 $LN8@SetCurrent
  00128	00 00 00 00	 DD	 $LN9@SetCurrent
  0012c	00 00 00 00	 DD	 $LN10@SetCurrent
  00130	00 00 00 00	 DD	 $LN10@SetCurrent
?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ENDP ; CDateTime::SetCurrentTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetSecondsValue@CDateTime@@QAEXH@Z
_TEXT	SEGMENT
_nSec$ = 8						; size = 4
?SetSecondsValue@CDateTime@@QAEXH@Z PROC		; CDateTime::SetSecondsValue, COMDAT
; _this$ = ecx

; 323  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 324  : 	m_tm.tm_year = 0;
; 325  : 	m_tm.tm_mon = 0;
; 326  : 	m_tm.tm_mday = nSec/86400; //(24 * 3600)

  00004	8b 75 08	 mov	 esi, DWORD PTR _nSec$[ebp]
  00007	b8 07 45 2e c2	 mov	 eax, -1037155065	; c22e4507H
  0000c	f7 ee		 imul	 esi
  0000e	57		 push	 edi
  0000f	03 d6		 add	 edx, esi
  00011	8b f9		 mov	 edi, ecx
  00013	c1 fa 10	 sar	 edx, 16			; 00000010H
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
  0001d	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00024	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 327  : 	nSec = nSec % 86400;

  00027	69 c0 80 ae fe
	ff		 imul	 eax, eax, -86400
  0002d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00034	03 f0		 add	 esi, eax

; 328  : 	m_tm.tm_hour = nSec/3600;

  00036	b8 c5 b3 a2 91	 mov	 eax, -1851608123	; 91a2b3c5H
  0003b	f7 ee		 imul	 esi
  0003d	03 d6		 add	 edx, esi
  0003f	c1 fa 0b	 sar	 edx, 11			; 0000000bH
  00042	8b c2		 mov	 eax, edx
  00044	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00047	03 c2		 add	 eax, edx
  00049	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 329  : 	nSec = nSec % 3600;

  0004c	69 c0 f0 f1 ff
	ff		 imul	 eax, eax, -3600
  00052	03 f0		 add	 esi, eax

; 330  : 	m_tm.tm_min = nSec / 60;

  00054	b8 89 88 88 88	 mov	 eax, -2004318071	; 88888889H
  00059	f7 ee		 imul	 esi
  0005b	03 d6		 add	 edx, esi
  0005d	c1 fa 05	 sar	 edx, 5
  00060	8b ca		 mov	 ecx, edx
  00062	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00065	03 ca		 add	 ecx, edx

; 331  : 	nSec = nSec % 60;

  00067	8b c1		 mov	 eax, ecx
  00069	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0006c	c1 e0 04	 shl	 eax, 4
  0006f	2b c1		 sub	 eax, ecx
  00071	c1 e0 02	 shl	 eax, 2
  00074	2b f0		 sub	 esi, eax

; 332  : 	m_tm.tm_sec = nSec;

  00076	89 37		 mov	 DWORD PTR [edi], esi
  00078	5f		 pop	 edi
  00079	5e		 pop	 esi

; 333  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?SetSecondsValue@CDateTime@@QAEXH@Z ENDP		; CDateTime::SetSecondsValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetTimeValue@CDateTime@@QAEXPA_J@Z
_TEXT	SEGMENT
_t$ = -8						; size = 8
_ltmVal$ = 8						; size = 4
?SetTimeValue@CDateTime@@QAEXPA_J@Z PROC		; CDateTime::SetTimeValue, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 55 08	 mov	 edx, DWORD PTR _ltmVal$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 319  : 	uptoSeconds(TZ_NONE, *ltmVal);

  0000c	8b 02		 mov	 eax, DWORD PTR [edx]
  0000e	89 45 f8	 mov	 DWORD PTR _t$[ebp], eax
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	89 45 fc	 mov	 DWORD PTR _t$[ebp+4], eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 573  :                 return _localtime64_s(_Tm, _Time);

  00017	8d 45 f8	 lea	 eax, DWORD PTR _t$[ebp]
  0001a	50		 push	 eax
  0001b	56		 push	 esi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___localtime64_s
  00022	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  00025	85 c0		 test	 eax, eax
  00027	74 0d		 je	 SHORT $LN6@SetTimeVal
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BHEKFGAJ@ERROR?5_localtime_s?6?$AA@
  0002e	e8 00 00 00 00	 call	 _printf
  00033	83 c4 04	 add	 esp, 4
$LN6@SetTimeVal:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;
; 220  : 	m_tm.tm_mon += 1;
; 221  : 	m_tmval.tv_sec = t;

  00036	8b 45 f8	 mov	 eax, DWORD PTR _t$[ebp]
  00039	81 46 14 6c 07
	00 00		 add	 DWORD PTR [esi+20], 1900 ; 0000076cH
  00040	ff 46 10	 inc	 DWORD PTR [esi+16]
  00043	89 46 28	 mov	 DWORD PTR [esi+40], eax
  00046	8b 45 fc	 mov	 eax, DWORD PTR _t$[ebp+4]
  00049	89 46 2c	 mov	 DWORD PTR [esi+44], eax

; 222  : 	m_tmval.tv_nsec = 0;

  0004c	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00053	5e		 pop	 esi

; 320  : }

  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
?SetTimeValue@CDateTime@@QAEXPA_J@Z ENDP		; CDateTime::SetTimeValue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??1CDateTime@@QAE@XZ
_TEXT	SEGMENT
??1CDateTime@@QAE@XZ PROC				; CDateTime::~CDateTime, COMDAT
; _this$ = ecx

; 313  :     
; 314  : }

  00000	c3		 ret	 0
??1CDateTime@@QAE@XZ ENDP				; CDateTime::~CDateTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z
_TEXT	SEGMENT
_nType$ = 8						; size = 4
_nTz$ = 12						; size = 4
??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z PROC		; CDateTime::CDateTime, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 174  : 	if (nType == DT_NONE) return;

  00003	8b 45 08	 mov	 eax, DWORD PTR _nType$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	85 c0		 test	 eax, eax
  0000b	74 09		 je	 SHORT $LN4@CDateTime

; 175  : 	SetCurrentTime(nType, nTz);

  0000d	ff 75 0c	 push	 DWORD PTR _nTz$[ebp]
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?SetCurrentTime@CDateTime@@QAEXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
$LN4@CDateTime:

; 176  : }

  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0CDateTime@@QAE@W4DT_TYPE@@W4TZ_TYPE@@@Z ENDP		; CDateTime::CDateTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getTime@CFileTime@@QAEHXZ
_TEXT	SEGMENT
?getTime@CFileTime@@QAEHXZ PROC				; CFileTime::getTime, COMDAT
; _this$ = ecx

; 197  : 	inline int getTime() { return m_nTime; }

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?getTime@CFileTime@@QAEHXZ ENDP				; CFileTime::getTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getDate@CFileTime@@QAEHXZ
_TEXT	SEGMENT
?getDate@CFileTime@@QAEHXZ PROC				; CFileTime::getDate, COMDAT
; _this$ = ecx

; 196  : 	inline int getDate() { return m_nDate; }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?getDate@CFileTime@@QAEHXZ ENDP				; CFileTime::getDate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z
_TEXT	SEGMENT
_pCompare$ = 8						; size = 4
_eOP$ = 12						; size = 4
?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z PROC	; CFileTime::isCompare, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 146  : 	switch (eOP)

  00003	8b 45 0c	 mov	 eax, DWORD PTR _eOP$[ebp]
  00006	48		 dec	 eax
  00007	56		 push	 esi
  00008	83 f8 05	 cmp	 eax, 5
  0000b	0f 87 ab 00 00
	00		 ja	 $LN2@isCompare
  00011	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN64@isCompare[eax*4]
$LN4@isCompare:

; 147  : 	{
; 148  : 	case eOperator_EQ: if (pCompare->getDate() == m_nDate && pCompare->getTime() == m_nTime) return true; return false;

  00018	8b 55 08	 mov	 edx, DWORD PTR _pCompare$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0001f	0f 85 97 00 00
	00		 jne	 $LN2@isCompare
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0002b	0f 85 8b 00 00
	00		 jne	 $LN2@isCompare
$LN62@isCompare:
  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi

; 168  : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN6@isCompare:

; 149  : 	case eOperator_NE: if (pCompare->getDate() != m_nDate && pCompare->getTime() != m_nTime) return true; return false;

  00038	8b 55 08	 mov	 edx, DWORD PTR _pCompare$[ebp]
  0003b	8b 02		 mov	 eax, DWORD PTR [edx]
  0003d	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0003f	74 7b		 je	 SHORT $LN2@isCompare
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00047	74 73		 je	 SHORT $LN2@isCompare
  00049	b0 01		 mov	 al, 1
  0004b	5e		 pop	 esi

; 168  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN8@isCompare:

; 150  : 	case eOperator_GT:
; 151  : 		if (pCompare->getDate() < m_nDate) return true;

  00050	8b 75 08	 mov	 esi, DWORD PTR _pCompare$[ebp]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	3b c2		 cmp	 eax, edx
  00059	7c d6		 jl	 SHORT $LN62@isCompare

; 152  : 		if (pCompare->getDate() > m_nDate) return false;

  0005b	7f 5f		 jg	 SHORT $LN2@isCompare

; 153  : 		if (pCompare->getTime() < m_nTime) return true; return false;

  0005d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00060	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00063	5e		 pop	 esi
  00064	0f 9c c0	 setl	 al

; 168  : }

  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN12@isCompare:

; 154  : 	case eOperator_LT:
; 155  : 		if (pCompare->getDate() > m_nDate) return true;

  0006b	8b 75 08	 mov	 esi, DWORD PTR _pCompare$[ebp]
  0006e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00070	8b 06		 mov	 eax, DWORD PTR [esi]
  00072	3b c2		 cmp	 eax, edx
  00074	7f bb		 jg	 SHORT $LN62@isCompare

; 156  : 		if (pCompare->getDate() < m_nDate) return false;

  00076	7c 44		 jl	 SHORT $LN2@isCompare

; 157  : 		if (pCompare->getTime() > m_nTime) return true; return false;

  00078	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007b	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0007e	5e		 pop	 esi
  0007f	0f 9f c0	 setg	 al

; 168  : }

  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN16@isCompare:

; 158  : 	case eOperator_GE:
; 159  : 		if (pCompare->getDate() < m_nDate) return true;

  00086	8b 75 08	 mov	 esi, DWORD PTR _pCompare$[ebp]
  00089	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008b	8b 06		 mov	 eax, DWORD PTR [esi]
  0008d	3b c2		 cmp	 eax, edx
  0008f	7c a0		 jl	 SHORT $LN62@isCompare

; 160  : 		if (pCompare->getDate() > m_nDate) return false;

  00091	7f 29		 jg	 SHORT $LN2@isCompare

; 161  : 		if (pCompare->getTime() <= m_nTime) return true; return false;

  00093	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00096	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00099	5e		 pop	 esi
  0009a	0f 9e c0	 setle	 al

; 168  : }

  0009d	5d		 pop	 ebp
  0009e	c2 08 00	 ret	 8
$LN20@isCompare:

; 162  : 	case eOperator_LE:
; 163  : 		if (pCompare->getDate() > m_nDate) return true;

  000a1	8b 75 08	 mov	 esi, DWORD PTR _pCompare$[ebp]
  000a4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a6	8b 06		 mov	 eax, DWORD PTR [esi]
  000a8	3b c2		 cmp	 eax, edx
  000aa	7f 85		 jg	 SHORT $LN62@isCompare

; 164  : 		if (pCompare->getDate() < m_nDate) return false;

  000ac	7c 0e		 jl	 SHORT $LN2@isCompare

; 165  : 		if (pCompare->getTime() >= m_nTime) return true; return false;

  000ae	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b1	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000b4	5e		 pop	 esi
  000b5	0f 9d c0	 setge	 al

; 168  : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
$LN2@isCompare:

; 166  : 	}
; 167  : 	return false;

  000bc	32 c0		 xor	 al, al
  000be	5e		 pop	 esi

; 168  : }

  000bf	5d		 pop	 ebp
  000c0	c2 08 00	 ret	 8
  000c3	90		 npad	 1
$LN64@isCompare:
  000c4	00 00 00 00	 DD	 $LN4@isCompare
  000c8	00 00 00 00	 DD	 $LN6@isCompare
  000cc	00 00 00 00	 DD	 $LN8@isCompare
  000d0	00 00 00 00	 DD	 $LN12@isCompare
  000d4	00 00 00 00	 DD	 $LN16@isCompare
  000d8	00 00 00 00	 DD	 $LN20@isCompare
?isCompare@CFileTime@@QAE_NPAV1@W4E_OPERATOR@@@Z ENDP	; CFileTime::isCompare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z
_TEXT	SEGMENT
_sysTm$ = -36						; size = 16
_szDate$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pftWrite$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z PROC	; CFileTime::setFileTime, COMDAT
; _this$ = ecx

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pftWrite$[ebp]
  00013	57		 push	 edi
  00014	8b f9		 mov	 edi, ecx

; 85   : 	TCHAR szDate[16];
; 86   : 
; 87   : 	SYSTEMTIME	sysTm;
; 88   : 	FileTimeToSystemTime(pftWrite, &sysTm);

  00016	8d 4d dc	 lea	 ecx, DWORD PTR _sysTm$[ebp]
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8

; 89   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  00021	0f b7 45 e2	 movzx	 eax, WORD PTR _sysTm$[ebp+6]
  00025	50		 push	 eax
  00026	0f b7 45 de	 movzx	 eax, WORD PTR _sysTm$[ebp+2]
  0002a	50		 push	 eax
  0002b	0f b7 45 dc	 movzx	 eax, WORD PTR _sysTm$[ebp]
  0002f	50		 push	 eax
  00030	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00033	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _sprintf

; 90   : 	m_nDate = atoi(szDate);

  0003e	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00048	89 07		 mov	 DWORD PTR [edi], eax

; 91   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  0004a	0f b7 45 e8	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  0004e	50		 push	 eax
  0004f	0f b7 45 e6	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  00053	50		 push	 eax
  00054	0f b7 45 e4	 movzx	 eax, WORD PTR _sysTm$[ebp+8]
  00058	50		 push	 eax
  00059	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _sprintf

; 92   : 	m_nTime = atoi(szDate);

  00067	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  0006a	50		 push	 eax
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 93   : 	return 1;
; 94   : }

  00071	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00074	83 c4 30	 add	 esp, 48			; 00000030H
  00077	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0007a	33 cd		 xor	 ecx, ebp
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	5f		 pop	 edi
  00082	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
?setFileTime@CFileTime@@QAEHPAU_FILETIME@@@Z ENDP	; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QAEHPA_J@Z
_TEXT	SEGMENT
_sMtm$ = -72						; size = 36
_sMtm$7$ = -36						; size = 16
_szDate$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_fileTime$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPA_J@Z PROC			; CFileTime::setFileTime, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _fileTime$[ebp]
  00013	53		 push	 ebx
  00014	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00015	50		 push	 eax
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 118  : {

  00016	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 500  :             return _gmtime64(_Time);

  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___gmtime64
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 124  : 	gm_timeInfo = gmtime(fileTime);

  0001e	8b f8		 mov	 edi, eax

; 125  : 	memcpy(&sMtm, gm_timeInfo, sizeof(sMtm));

  00020	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00024	0f 10 0f	 movups	 xmm1, XMMWORD PTR [edi]
  00027	0f 11 45 c8	 movups	 XMMWORD PTR _sMtm$[ebp+16], xmm0

; 126  : #endif
; 127  : 	sMtm.tm_year += 1900;
; 128  : 	sMtm.tm_mon += 1;

  0002b	8b 4d c8	 mov	 ecx, DWORD PTR _sMtm$[ebp+16]
  0002e	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00033	41		 inc	 ecx
  00034	66 0f 7e c2	 movd	 edx, xmm0

; 129  : 
; 130  : 	_stprintf(szDate, "%04d%02d%02d", sMtm.tm_year, sMtm.tm_mon, sMtm.tm_mday);

  00038	0f 28 c1	 movaps	 xmm0, xmm1
  0003b	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  00040	66 0f 7e c0	 movd	 eax, xmm0
  00044	81 c2 6c 07 00
	00		 add	 edx, 1900		; 0000076cH
  0004a	0f 11 4d dc	 movups	 XMMWORD PTR _sMtm$7$[ebp], xmm1
  0004e	50		 push	 eax
  0004f	51		 push	 ecx
  00050	52		 push	 edx
  00051	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _sprintf

; 131  : 	m_nDate = atoi(szDate);

  0005f	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00062	50		 push	 eax
  00063	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 132  : 	_stprintf(szDate, "%02d%02d%02d", sMtm.tm_hour, sMtm.tm_min, sMtm.tm_sec);

  00069	0f 10 4d dc	 movups	 xmm1, XMMWORD PTR _sMtm$7$[ebp]
  0006d	89 03		 mov	 DWORD PTR [ebx], eax
  0006f	66 0f 7e c8	 movd	 eax, xmm1
  00073	0f 28 c1	 movaps	 xmm0, xmm1
  00076	66 0f 73 d8 04	 psrldq	 xmm0, 4
  0007b	66 0f 73 d9 08	 psrldq	 xmm1, 8
  00080	50		 push	 eax
  00081	66 0f 7e c0	 movd	 eax, xmm0
  00085	50		 push	 eax
  00086	66 0f 7e c8	 movd	 eax, xmm1
  0008a	50		 push	 eax
  0008b	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 _sprintf

; 133  : 	m_nTime = atoi(szDate);

  00099	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  0009c	50		 push	 eax
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi

; 134  : 	printf("gm time and date : %s\n", asctime(gm_timeInfo));

  000a3	57		 push	 edi
  000a4	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__asctime
  000ad	50		 push	 eax
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HKFDKJNJ@gm?5time?5and?5date?5?3?5?$CFs?6?$AA@
  000b3	e8 00 00 00 00	 call	 _printf

; 135  : 
; 136  : 	return 1;
; 137  : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	83 c4 40	 add	 esp, 64			; 00000040H
  000be	33 cd		 xor	 ecx, ebp
  000c0	b8 01 00 00 00	 mov	 eax, 1
  000c5	5f		 pop	 edi
  000c6	5b		 pop	 ebx
  000c7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c2 04 00	 ret	 4
?setFileTime@CFileTime@@QAEHPA_J@Z ENDP			; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QAEHPAD@Z
_TEXT	SEGMENT
_ftWrite$ = -44						; size = 8
_sysTm$ = -36						; size = 16
_szDate$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pFilePath$ = 8						; size = 4
?setFileTime@CFileTime@@QAEHPAD@Z PROC			; CFileTime::setFileTime, COMDAT
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _pFilePath$[ebp]
  00013	53		 push	 ebx
  00014	57		 push	 edi

; 52   : 	struct	tm	m_tm, *ltm = &m_tm;
; 53   : 	TCHAR szDate[16];
; 54   : 	FILETIME ftWrite;
; 55   : 	HANDLE hFile = CreateFile(pFilePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

  00015	6a 00		 push	 0
  00017	68 80 00 00 00	 push	 128			; 00000080H
  0001c	6a 03		 push	 3
  0001e	6a 00		 push	 0
  00020	6a 01		 push	 1
  00022	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00027	50		 push	 eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00030	8b f8		 mov	 edi, eax

; 56   : 	if (hFile == INVALID_HANDLE_VALUE) {

  00032	83 ff ff	 cmp	 edi, -1
  00035	75 14		 jne	 SHORT $LN2@setFileTim

; 57   : 		return -1;

  00037	5f		 pop	 edi
  00038	0b c0		 or	 eax, eax
  0003a	5b		 pop	 ebx

; 80   : 	return 1;
; 81   : }

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003e	33 cd		 xor	 ecx, ebp
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN2@setFileTim:

; 58   : 	}
; 59   : 
; 60   : 	if (!GetFileTime(hFile, NULL, NULL, &ftWrite)) {

  0004b	8d 45 d4	 lea	 eax, DWORD PTR _ftWrite$[ebp]
  0004e	50		 push	 eax
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	57		 push	 edi
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFileTime@16
  0005a	85 c0		 test	 eax, eax
  0005c	75 17		 jne	 SHORT $LN3@setFileTim

; 61   : 		return -2;

  0005e	5f		 pop	 edi
  0005f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00064	5b		 pop	 ebx

; 80   : 	return 1;
; 81   : }

  00065	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00068	33 cd		 xor	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN3@setFileTim:

; 62   : 	}
; 63   : 
; 64   : 	//SYSTEMTIME	sysTm, localTime;
; 65   : 	SYSTEMTIME	sysTm;
; 66   : 	FileTimeToSystemTime(&ftWrite, &sysTm);  // UTC SystemTime

  00075	8d 45 dc	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00078	50		 push	 eax
  00079	8d 45 d4	 lea	 eax, DWORD PTR _ftWrite$[ebp]
  0007c	50		 push	 eax
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FileTimeToSystemTime@8

; 67   : 	//SystemTimeToTzSpecificLocalTime(NULL, &sysTm, &localTime);	// KTC LocalTime
; 68   : 
; 69   : 	//_stprintf(szDate, "%04d%02d%02d", localTime.wYear, localTime.wMonth, localTime.wDay);
; 70   : 	//m_nDate = atoi(szDate);
; 71   : 	//_stprintf(szDate, "%02d%02d%02d", localTime.wHour, localTime.wMinute, localTime.wSecond);
; 72   : 	//m_nTime = atoi(szDate);
; 73   : 
; 74   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  00083	0f b7 45 e2	 movzx	 eax, WORD PTR _sysTm$[ebp+6]
  00087	50		 push	 eax
  00088	0f b7 45 de	 movzx	 eax, WORD PTR _sysTm$[ebp+2]
  0008c	50		 push	 eax
  0008d	0f b7 45 dc	 movzx	 eax, WORD PTR _sysTm$[ebp]
  00091	50		 push	 eax
  00092	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  00095	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DEAKEBCF@?$CF04d?$CF02d?$CF02d?$AA@
  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 _sprintf

; 75   : 	m_nDate = atoi(szDate);

  000a0	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  000a3	50		 push	 eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000aa	89 03		 mov	 DWORD PTR [ebx], eax

; 76   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  000ac	0f b7 45 e8	 movzx	 eax, WORD PTR _sysTm$[ebp+12]
  000b0	50		 push	 eax
  000b1	0f b7 45 e6	 movzx	 eax, WORD PTR _sysTm$[ebp+10]
  000b5	50		 push	 eax
  000b6	0f b7 45 e4	 movzx	 eax, WORD PTR _sysTm$[ebp+8]
  000ba	50		 push	 eax
  000bb	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NMLPILGG@?$CF02d?$CF02d?$CF02d?$AA@
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 _sprintf

; 77   : 	m_nTime = atoi(szDate);

  000c9	8d 45 ec	 lea	 eax, DWORD PTR _szDate$[ebp]
  000cc	50		 push	 eax
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  000d3	83 c4 30	 add	 esp, 48			; 00000030H
  000d6	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 78   : 
; 79   : 	CloseHandle(hFile);

  000d9	57		 push	 edi
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 80   : 	return 1;
; 81   : }

  000e0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e3	b8 01 00 00 00	 mov	 eax, 1
  000e8	5f		 pop	 edi
  000e9	33 cd		 xor	 ecx, ebp
  000eb	5b		 pop	 ebx
  000ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c2 04 00	 ret	 4
?setFileTime@CFileTime@@QAEHPAD@Z ENDP			; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??1CFileTime@@QAE@XZ
_TEXT	SEGMENT
??1CFileTime@@QAE@XZ PROC				; CFileTime::~CFileTime, COMDAT
; _this$ = ecx

; 141  : }

  00000	c3		 ret	 0
??1CFileTime@@QAE@XZ ENDP				; CFileTime::~CFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??0CFileTime@@QAE@XZ
_TEXT	SEGMENT
??0CFileTime@@QAE@XZ PROC				; CFileTime::CFileTime, COMDAT
; _this$ = ecx

; 48   : }

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0CFileTime@@QAE@XZ ENDP				; CFileTime::CFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getFileTime@Misc@@SAXPAUtimespec@@_N@Z
_TEXT	SEGMENT
_ft$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
_cur$ = 8						; size = 4
_bMicro$ = 12						; size = 1
?getFileTime@Misc@@SAXPAUtimespec@@_N@Z PROC		; Misc::getFileTime, COMDAT

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 7d 08	 mov	 edi, DWORD PTR _cur$[ebp]

; 442  : 	FILETIME ft;
; 443  : 	union
; 444  : 	{
; 445  : 		FILETIME asFileTime;
; 446  : 		u_int64 asInt64;
; 447  : 	} myFileTime;
; 448  : 	GetSystemTimeAsFileTime(&ft);

  00016	8d 45 f4	 lea	 eax, DWORD PTR _ft$[ebp]
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTimeAsFileTime@4

; 453  : 	myFileTime.asInt64 -= DELTA_EPOCH_IN_MICROSECS;

  00020	8b 75 f4	 mov	 esi, DWORD PTR _ft$[ebp]
  00023	8b 5d f8	 mov	 ebx, DWORD PTR _ft$[ebp+4]
  00026	81 c6 00 c0 79
	b7		 add	 esi, -1216757760	; b779c000H
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0002c	6a 00		 push	 0
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 453  : 	myFileTime.asInt64 -= DELTA_EPOCH_IN_MICROSECS;

  0002e	81 d3 69 a1 d6
	ff		 adc	 ebx, -2711191		; ffd6a169H
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
  0003a	83 c4 04	 add	 esp, 4
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 454  : 	cur->tv_sec = time(NULL);

  0003d	89 07		 mov	 DWORD PTR [edi], eax

; 455  : 	if (bMicro) {

  0003f	80 7d 0c 00	 cmp	 BYTE PTR _bMicro$[ebp], 0
  00043	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 456  : 		myFileTime.asInt64 /= 10; // microtime

  00046	6a 00		 push	 0
  00048	74 21		 je	 SHORT $LN2@getFileTim
  0004a	6a 0a		 push	 10			; 0000000aH
  0004c	53		 push	 ebx
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 __aulldiv

; 457  : 		cur->tv_nsec = myFileTime.asInt64%MICROSEC_PER_SEC;

  00053	6a 00		 push	 0
  00055	68 40 42 0f 00	 push	 1000000			; 000f4240H
  0005a	8b f0		 mov	 esi, eax
  0005c	52		 push	 edx
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 __aulldiv
  00063	69 c0 40 42 0f
	00		 imul	 eax, eax, 1000000
  00069	eb 12		 jmp	 SHORT $LN7@getFileTim
$LN2@getFileTim:

; 458  : 	}
; 459  : 	else cur->tv_nsec = myFileTime.asInt64%10000000L; //(100 nano)

  0006b	68 80 96 98 00	 push	 10000000		; 00989680H
  00070	53		 push	 ebx
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 __aulldiv
  00077	69 c0 80 96 98
	00		 imul	 eax, eax, 10000000
$LN7@getFileTim:

; 460  : }

  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00080	2b f0		 sub	 esi, eax
  00082	89 77 08	 mov	 DWORD PTR [edi+8], esi
  00085	33 cd		 xor	 ecx, ebp
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?getFileTime@Misc@@SAXPAUtimespec@@_N@Z ENDP		; Misc::getFileTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getmillisec@Misc@@SAXPAUtimespec@@@Z
_TEXT	SEGMENT
_sysTm$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_cur$ = 8						; size = 4
?getmillisec@Misc@@SAXPAUtimespec@@@Z PROC		; Misc::getmillisec, COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _cur$[ebp]

; 422  : #ifndef WIN32
; 423  : 	clock_gettime(CLOCK_REALTIME, cur);
; 424  : 	cur->tv_nsec = cur->tv_nsec%MILLISEC_PER_SEC;
; 425  : #else
; 426  : 	SYSTEMTIME	sysTm;
; 427  : 	GetSystemTime(&sysTm);

  00014	8d 45 ec	 lea	 eax, DWORD PTR _sysTm$[ebp]
  00017	50		 push	 eax
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTime@4
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  0001e	6a 00		 push	 0
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___time64
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 431  : }

  00026	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h

; 535  :             return _time64(_Time);

  00029	83 c4 04	 add	 esp, 4
; File e:\infinia-library-3.0\com\src\comdatetime.cpp

; 428  : 	cur->tv_sec = time(NULL);

  0002c	89 06		 mov	 DWORD PTR [esi], eax

; 431  : }

  0002e	33 cd		 xor	 ecx, ebp
  00030	0f b7 45 fa	 movzx	 eax, WORD PTR _sysTm$[ebp+14]
  00034	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00037	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0003a	5e		 pop	 esi
  0003b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?getmillisec@Misc@@SAXPAUtimespec@@@Z ENDP		; Misc::getmillisec
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z
_TEXT	SEGMENT
_start$ = 8						; size = 4
_stop$ = 12						; size = 4
_result$ = 16						; size = 4
_unit$ = 20						; size = 4
?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z PROC		; Misc::timespec_diff, COMDAT

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 409  : 	if ((stop->tv_nsec - start->tv_nsec) < 0) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _start$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR _stop$[ebp]
  0000b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000e	2b 46 08	 sub	 eax, DWORD PTR [esi+8]

; 410  : 		result->tv_sec = stop->tv_sec - start->tv_sec - 1;

  00011	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00014	79 25		 jns	 SHORT $LN2@timespec_d
  00016	8b 17		 mov	 edx, DWORD PTR [edi]
  00018	2b 16		 sub	 edx, DWORD PTR [esi]
  0001a	8b 4d 10	 mov	 ecx, DWORD PTR _result$[ebp]
  0001d	1b 46 04	 sbb	 eax, DWORD PTR [esi+4]
  00020	83 ea 01	 sub	 edx, 1
  00023	83 d8 00	 sbb	 eax, 0
  00026	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00029	89 11		 mov	 DWORD PTR [ecx], edx

; 411  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec + unit;

  0002b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002e	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  00031	03 45 14	 add	 eax, DWORD PTR _unit$[ebp]
  00034	5f		 pop	 edi
  00035	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00038	5e		 pop	 esi

; 416  : 	}
; 417  : }

  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@timespec_d:

; 412  : 	}
; 413  : 	else {
; 414  : 		result->tv_sec = stop->tv_sec - start->tv_sec;

  0003b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0003d	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0003f	8b 55 10	 mov	 edx, DWORD PTR _result$[ebp]
  00042	1b 46 04	 sbb	 eax, DWORD PTR [esi+4]
  00045	89 0a		 mov	 DWORD PTR [edx], ecx
  00047	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 415  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec;

  0004a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004d	2b 46 08	 sub	 eax, DWORD PTR [esi+8]
  00050	5f		 pop	 edi
  00051	89 42 08	 mov	 DWORD PTR [edx+8], eax
  00054	5e		 pop	 esi

; 416  : 	}
; 417  : }

  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?timespec_diff@Misc@@SAXPAUtimespec@@00J@Z ENDP		; Misc::timespec_diff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?u_Sleep@Misc@@SAXH@Z
_TEXT	SEGMENT
_iuSec$ = 8						; size = 4
?u_Sleep@Misc@@SAXH@Z PROC				; Misc::u_Sleep, COMDAT

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 400  : #ifndef WIN32
; 401  : 	usleep(iuSec);
; 402  : #else
; 403  : 	Sleep(iuSec/1000);

  00003	b8 d3 4d 62 10	 mov	 eax, 274877907		; 10624dd3H
  00008	f7 6d 08	 imul	 DWORD PTR _iuSec$[ebp]
  0000b	c1 fa 06	 sar	 edx, 6
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx
  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 404  : #endif
; 405  : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?u_Sleep@Misc@@SAXH@Z ENDP				; Misc::u_Sleep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?m_Sleep@Misc@@SAXH@Z
_TEXT	SEGMENT
_iMiliSec$ = 8						; size = 4
?m_Sleep@Misc@@SAXH@Z PROC				; Misc::m_Sleep, COMDAT

; 390  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 391  : #ifndef WIN32
; 392  : 	usleep(iMiliSec * 1000);
; 393  : #else
; 394  : 	Sleep(iMiliSec);

  00003	ff 75 08	 push	 DWORD PTR _iMiliSec$[ebp]
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4

; 395  : #endif
; 396  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
?m_Sleep@Misc@@SAXH@Z ENDP				; Misc::m_Sleep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _localtime_s
_TEXT	SEGMENT
__Tm$ = 8						; size = 4
__Time$ = 12						; size = 4
_localtime_s PROC					; COMDAT

; 572  :             {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 574  :             }

  00003	5d		 pop	 ebp

; 573  :                 return _localtime64_s(_Tm, _Time);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___localtime64_s
_localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 536  :         }

  00003	5d		 pop	 ebp

; 535  :             return _time64(_Time);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _gmtime
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_gmtime	PROC						; COMDAT

; 497  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 501  :             #pragma warning(pop)
; 502  :         }

  00003	5d		 pop	 ebp

; 498  :             #pragma warning(push)
; 499  :             #pragma warning(disable: 4996)
; 500  :             return _gmtime64(_Time);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___gmtime64
_gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00006	8d 4d 10	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00009	51		 push	 ecx
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000f	6a ff		 push	 -1
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);
; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00012	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001f	ff 70 04	 push	 DWORD PTR [eax+4]
  00022	ff 30		 push	 DWORD PTR [eax]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	5e		 pop	 esi

; 955  :     __crt_va_end(_ArgList);
; 956  :     return _Result;
; 957  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
