; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comQueue.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	??1abstract_critical_section@common@@UAE@XZ	; common::abstract_critical_section::~abstract_critical_section
PUBLIC	??_Gabstract_critical_section@common@@UAEPAXI@Z	; common::abstract_critical_section::`scalar deleting destructor'
PUBLIC	??1critical_section@win32@common@@UAE@XZ	; common::win32::critical_section::~critical_section
PUBLIC	?enter@critical_section@win32@common@@UAE_N_N@Z	; common::win32::critical_section::enter
PUBLIC	?leave@critical_section@win32@common@@UAEXXZ	; common::win32::critical_section::leave
PUBLIC	??_Gcritical_section@win32@common@@UAEPAXI@Z	; common::win32::critical_section::`scalar deleting destructor'
PUBLIC	??0CQueueS@@QAE@XZ				; CQueueS::CQueueS
PUBLIC	??1CQueueS@@QAE@XZ				; CQueueS::~CQueueS
PUBLIC	?alloc@CQueueS@@QAE_NHW4E_ALLOC_TYPE@@@Z	; CQueueS::alloc
PUBLIC	?realloc@CQueueS@@QAE_NH_N@Z			; CQueueS::realloc
PUBLIC	?push@CQueueS@@QAE_NPAX@Z			; CQueueS::push
PUBLIC	?pop@CQueueS@@QAEPAXXZ				; CQueueS::pop
PUBLIC	?delBuf@CMemManager@@QAEXPADH@Z			; CMemManager::delBuf
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7abstract_critical_section@common@@6B@	; common::abstract_critical_section::`vftable'
PUBLIC	??_7critical_section@win32@common@@6B@		; common::win32::critical_section::`vftable'
PUBLIC	??_C@_0BI@DFLPFHMH@?$FL?$CFp?$FN?5calloc?5has?5Failed?6?$AA@ ; `string'
PUBLIC	??_C@_0EP@MNCAMOA@?$FL?$CFp?$FN?5?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?5realloc@ ; `string'
PUBLIC	??_R4abstract_critical_section@common@@6B@	; common::abstract_critical_section::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVabstract_critical_section@common@@@8	; common::abstract_critical_section `RTTI Type Descriptor'
PUBLIC	??_R3abstract_critical_section@common@@8	; common::abstract_critical_section::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2abstract_critical_section@common@@8	; common::abstract_critical_section::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@abstract_critical_section@common@@8 ; common::abstract_critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4critical_section@win32@common@@6B@		; common::win32::critical_section::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcritical_section@win32@common@@@8	; common::win32::critical_section `RTTI Type Descriptor'
PUBLIC	??_R3critical_section@win32@common@@8		; common::win32::critical_section::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2critical_section@win32@common@@8		; common::win32::critical_section::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@critical_section@win32@common@@8	; common::win32::critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__InterlockedCompareExchange@12:PROC
EXTRN	__imp__InitializeCriticalSection@4:PROC
EXTRN	__imp__EnterCriticalSection@4:PROC
EXTRN	__imp__LeaveCriticalSection@4:PROC
EXTRN	__imp__TryEnterCriticalSection@4:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	??_Eabstract_critical_section@common@@UAEPAXI@Z:PROC ; common::abstract_critical_section::`vector deleting destructor'
EXTRN	??_Ecritical_section@win32@common@@UAEPAXI@Z:PROC ; common::win32::critical_section::`vector deleting destructor'
EXTRN	_initSpinLock@4:PROC
EXTRN	_acquireSpinLock@4:PROC
EXTRN	_releaseSpinLock@4:PROC
EXTRN	?delBufByIndex@CMemManager@@QAEXPADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?g_szMessage@@3PADA:BYTE			; g_szMessage
EXTRN	?gs_pMMgr@@3PAVCMemManager@@A:DWORD		; gs_pMMgr
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@critical_section@win32@common@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@critical_section@win32@common@@8 DD FLAT:??_R0?AVcritical_section@win32@common@@@8 ; common::win32::critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3critical_section@win32@common@@8
rdata$r	ENDS
;	COMDAT ??_R2critical_section@win32@common@@8
rdata$r	SEGMENT
??_R2critical_section@win32@common@@8 DD FLAT:??_R1A@?0A@EA@critical_section@win32@common@@8 ; common::win32::critical_section::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_R3critical_section@win32@common@@8
rdata$r	SEGMENT
??_R3critical_section@win32@common@@8 DD 00H		; common::win32::critical_section::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2critical_section@win32@common@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcritical_section@win32@common@@@8
data$r	SEGMENT
??_R0?AVcritical_section@win32@common@@@8 DD FLAT:??_7type_info@@6B@ ; common::win32::critical_section `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVcritical_section@win32@common@@', 00H
data$r	ENDS
;	COMDAT ??_R4critical_section@win32@common@@6B@
rdata$r	SEGMENT
??_R4critical_section@win32@common@@6B@ DD 00H		; common::win32::critical_section::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVcritical_section@win32@common@@@8
	DD	FLAT:??_R3critical_section@win32@common@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@abstract_critical_section@common@@8 DD FLAT:??_R0?AVabstract_critical_section@common@@@8 ; common::abstract_critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_R2abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R2abstract_critical_section@common@@8 DD FLAT:??_R1A@?0A@EA@abstract_critical_section@common@@8 ; common::abstract_critical_section::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R3abstract_critical_section@common@@8 DD 00H		; common::abstract_critical_section::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVabstract_critical_section@common@@@8
data$r	SEGMENT
??_R0?AVabstract_critical_section@common@@@8 DD FLAT:??_7type_info@@6B@ ; common::abstract_critical_section `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVabstract_critical_section@common@@', 00H
data$r	ENDS
;	COMDAT ??_R4abstract_critical_section@common@@6B@
rdata$r	SEGMENT
??_R4abstract_critical_section@common@@6B@ DD 00H	; common::abstract_critical_section::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVabstract_critical_section@common@@@8
	DD	FLAT:??_R3abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_C@_0EP@MNCAMOA@?$FL?$CFp?$FN?5?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?5realloc@
CONST	SEGMENT
??_C@_0EP@MNCAMOA@?$FL?$CFp?$FN?5?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?5realloc@ DB '['
	DB	'%p] ################### realloc success m_nLast[%d] m_nMax[%d'
	DB	'] nMaxCount[%d]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DFLPFHMH@?$FL?$CFp?$FN?5calloc?5has?5Failed?6?$AA@
CONST	SEGMENT
??_C@_0BI@DFLPFHMH@?$FL?$CFp?$FN?5calloc?5has?5Failed?6?$AA@ DB '[%p] cal'
	DB	'loc has Failed', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_7critical_section@win32@common@@6B@
CONST	SEGMENT
??_7critical_section@win32@common@@6B@ DD FLAT:??_R4critical_section@win32@common@@6B@ ; common::win32::critical_section::`vftable'
	DD	FLAT:??_Ecritical_section@win32@common@@UAEPAXI@Z
	DD	FLAT:?enter@critical_section@win32@common@@UAE_N_N@Z
	DD	FLAT:?leave@critical_section@win32@common@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7abstract_critical_section@common@@6B@
CONST	SEGMENT
??_7abstract_critical_section@common@@6B@ DD FLAT:??_R4abstract_critical_section@common@@6B@ ; common::abstract_critical_section::`vftable'
	DD	FLAT:??_Eabstract_critical_section@common@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CQueueS@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?delBuf@CMemManager@@QAEXPADH@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_pBuf$ = 8						; size = 4
_nSize$ = 12						; size = 4
?delBuf@CMemManager@@QAEXPADH@Z PROC			; CMemManager::delBuf, COMDAT
; _this$ = ecx

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00006	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00010	8b f9		 mov	 edi, ecx
  00012	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00016	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0001a	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  0001f	8b 75 fc	 mov	 esi, DWORD PTR _$S1$1[ebp+4]
  00022	c1 fe 14	 sar	 esi, 20			; 00000014H
  00025	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  0002b	8b ce		 mov	 ecx, esi
  0002d	d3 e0		 shl	 eax, cl
  0002f	8b ca		 mov	 ecx, edx
  00031	2b c8		 sub	 ecx, eax
  00033	23 ca		 and	 ecx, edx
  00035	f7 d9		 neg	 ecx
  00037	1b c9		 sbb	 ecx, ecx
  00039	f7 d9		 neg	 ecx
  0003b	03 ce		 add	 ecx, esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  0003d	51		 push	 ecx
  0003e	ff 75 08	 push	 DWORD PTR _pBuf$[ebp]
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?delBuf@CMemManager@@QAEXPADH@Z ENDP			; CMemManager::delBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
_$S1$ = -8						; size = 8
_s$ = 8							; size = 4
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	8b c6		 mov	 eax, esi
  00011	66 0f 6e c6	 movd	 xmm0, esi
  00015	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00019	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$[ebp], xmm0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$[ebp+4]
  00021	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00024	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0002a	d3 e2		 shl	 edx, cl
  0002c	2b c2		 sub	 eax, edx
  0002e	23 c6		 and	 eax, esi
  00030	f7 d8		 neg	 eax
  00032	5e		 pop	 esi
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax
  00037	03 c1		 add	 eax, ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ?pop@CQueueS@@QAEPAXXZ
_TEXT	SEGMENT
?pop@CQueueS@@QAEPAXXZ PROC				; CQueueS::pop, COMDAT
; _this$ = ecx

; 129  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 130  : 	void* res;
; 131  : 	SPIN_LOCK_ENTER(&m_cLockPop);

  00005	8d 5e 34	 lea	 ebx, DWORD PTR [esi+52]
  00008	53		 push	 ebx
  00009	e8 00 00 00 00	 call	 _acquireSpinLock@4

; 132  : 	res = m_pArray[m_nFront];

  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00013	8b 3c 81	 mov	 edi, DWORD PTR [ecx+eax*4]

; 133  : 	if (res) {

  00016	85 ff		 test	 edi, edi
  00018	74 43		 je	 SHORT $LN2@pop

; 134  : 		m_pArray[m_nFront] = 0;

  0001a	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 135  : 		//printf("[%p] m_nFront[%d] nMax[%d]\n", m_pArray, m_nFront, nMax);
; 136  : 		m_nFront++;

  00021	ff 46 08	 inc	 DWORD PTR [esi+8]

; 137  : 		if (m_nOldMax) {

  00024	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002a	85 c9		 test	 ecx, ecx
  0002c	74 17		 je	 SHORT $LN4@pop

; 138  : 			if(m_nFront == m_nOldMax) m_nFront = 0;

  0002e	3b c1		 cmp	 eax, ecx
  00030	75 4a		 jne	 SHORT $LN8@pop

; 149  : 	}
; 150  : 	SPIN_LOCK_LEAVE(&m_cLockPop);

  00032	53		 push	 ebx
  00033	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0003a	e8 00 00 00 00	 call	 _releaseSpinLock@4

; 151  : 	//if (0 <= nTmp) {
; 152  : 	//	gs_cLogger.DebugLog(LEVEL_INFO, "m_nFront[%d] m_nOldMax[%d]", nTmp, nTmp2);
; 153  : 	//}
; 154  : 	return res;

  0003f	8b c7		 mov	 eax, edi
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5b		 pop	 ebx

; 155  : }

  00044	c3		 ret	 0
$LN4@pop:

; 139  : 		}
; 140  : 		else if (m_nFront == m_nMax) m_nFront = 0;

  00045	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00048	75 32		 jne	 SHORT $LN8@pop

; 149  : 	}
; 150  : 	SPIN_LOCK_LEAVE(&m_cLockPop);

  0004a	53		 push	 ebx
  0004b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00052	e8 00 00 00 00	 call	 _releaseSpinLock@4

; 151  : 	//if (0 <= nTmp) {
; 152  : 	//	gs_cLogger.DebugLog(LEVEL_INFO, "m_nFront[%d] m_nOldMax[%d]", nTmp, nTmp2);
; 153  : 	//}
; 154  : 	return res;

  00057	8b c7		 mov	 eax, edi
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 155  : }

  0005c	c3		 ret	 0
$LN2@pop:

; 141  : 	}
; 142  : 	else if (m_nOldMax) {

  0005d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00060	85 c0		 test	 eax, eax
  00062	74 18		 je	 SHORT $LN8@pop

; 143  : 		//nTmp = m_nFront; nTmp2 = m_nOldMax;
; 144  : 		res = m_pArray[m_nOldMax]; 

  00064	8b 3c 81	 mov	 edi, DWORD PTR [ecx+eax*4]

; 145  : 		m_pArray[m_nOldMax] = 0;

  00067	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [ecx+eax*4], 0

; 146  : 		//printf("[%p] m_nFront[%d] m_nOldMax[%d]\n", m_pArray, m_nFront, m_nOldMax);
; 147  : 		m_nFront = m_nOldMax+1;

  0006e	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00071	41		 inc	 ecx

; 148  : 		m_nOldMax = 0;

  00072	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00079	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$LN8@pop:

; 149  : 	}
; 150  : 	SPIN_LOCK_LEAVE(&m_cLockPop);

  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 _releaseSpinLock@4

; 151  : 	//if (0 <= nTmp) {
; 152  : 	//	gs_cLogger.DebugLog(LEVEL_INFO, "m_nFront[%d] m_nOldMax[%d]", nTmp, nTmp2);
; 153  : 	//}
; 154  : 	return res;

  00082	8b c7		 mov	 eax, edi
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx

; 155  : }

  00087	c3		 ret	 0
?pop@CQueueS@@QAEPAXXZ ENDP				; CQueueS::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ?push@CQueueS@@QAE_NPAX@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?push@CQueueS@@QAE_NPAX@Z PROC				; CQueueS::push, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 95   : 	if (m_nRealloc.getCount()) {

  00007	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 91   : 	inline int getCount() { return (int)m_count; }

  0000b	8d 57 3c	 lea	 edx, DWORD PTR [edi+60]
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 95   : 	if (m_nRealloc.getCount()) {

  0000e	74 48		 je	 SHORT $LN2@push

; 96   : 		m_CS.enter();

  00010	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00013	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00016	6a 01		 push	 1
$LN14@push:
  00018	ff 50 04	 call	 DWORD PTR [eax+4]

; 97   : 		m_CS.leave();

  0001b	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0001e	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00021	ff 50 08	 call	 DWORD PTR [eax+8]
$LN7@push:

; 107  : 				return false;
; 108  : 			}
; 109  : 		}
; 110  : 	}
; 111  : 
; 112  : 	SPIN_LOCK_ENTER(&m_cLockPush);

  00024	8d 77 14	 lea	 esi, DWORD PTR [edi+20]
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 _acquireSpinLock@4

; 113  : 	//if (m_pArray[m_nLast]) {
; 114  : 	//	//nTmp = m_nLast; nTmp2 = m_nMax;
; 115  : 	//	printf("[%p] Already data Set! m_nLast[%d] nMax[%d]\n", m_pArray, m_nLast, m_nMax);
; 116  : 	//}
; 117  : 	m_pArray[m_nLast] = pData;

  0002d	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00030	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00032	8b 45 08	 mov	 eax, DWORD PTR _pData$[ebp]
  00035	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 118  : 	m_nLast++;

  00038	ff 47 04	 inc	 DWORD PTR [edi+4]
  0003b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 119  : 	if (m_nLast == m_nMax) m_nLast = 0;

  0003e	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  00041	75 07		 jne	 SHORT $LN8@push
  00043	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
$LN8@push:

; 120  : 	//printf("[%p] m_nLast[%d] nMax[%d]\n", m_pArray, nTmp, m_nMax);
; 121  : 	SPIN_LOCK_LEAVE(&m_cLockPush);

  0004a	56		 push	 esi
  0004b	e8 00 00 00 00	 call	 _releaseSpinLock@4
  00050	5f		 pop	 edi

; 122  : 	//if (0 <= nTmp) {
; 123  : 	//	gs_cLogger.DebugLog(LEVEL_ERROR, "Already data Set! m_nLast[%d] nMax[%d]", nTmp, nTmp2);
; 124  : 	//}
; 125  : 	return true;

  00051	b0 01		 mov	 al, 1
  00053	5e		 pop	 esi

; 126  : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN2@push:

; 98   : 	}
; 99   : 	else if(m_pArray[m_nLast]) {

  00058	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00061	74 c1		 je	 SHORT $LN7@push
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 99   : 	inline int atomic_compare_exchange(int nExchange, int nComperand) {return (int)InterlockedCompareExchange(&m_count, nExchange, nComperand);} // return long

  00063	6a 00		 push	 0
  00065	6a 01		 push	 1
  00067	52		 push	 edx
  00068	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedCompareExchange@12
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 101  : 			m_CS.enter();

  0006e	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00071	6a 01		 push	 1
  00073	85 c0		 test	 eax, eax
  00075	74 05		 je	 SHORT $LN5@push
  00077	8b 47 18	 mov	 eax, DWORD PTR [edi+24]

; 102  : 			m_CS.leave();
; 103  : 		}
; 104  : 		else {

  0007a	eb 9c		 jmp	 SHORT $LN14@push
$LN5@push:

; 105  : 			m_CS.enter();

  0007c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007e	ff 50 04	 call	 DWORD PTR [eax+4]

; 106  : 			if (!realloc(m_nMax << 1)) {

  00081	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00084	8b cf		 mov	 ecx, edi
  00086	6a 00		 push	 0
  00088	03 c0		 add	 eax, eax
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ?realloc@CQueueS@@QAE_NH_N@Z ; CQueueS::realloc
  00090	84 c0		 test	 al, al
  00092	75 90		 jne	 SHORT $LN7@push
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi

; 126  : }

  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?push@CQueueS@@QAE_NPAX@Z ENDP				; CQueueS::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ?realloc@CQueueS@@QAE_NH_N@Z
_TEXT	SEGMENT
_oldPtr$1$ = -4						; size = 4
_newPtr$1$ = 8						; size = 4
_nMaxCount$ = 8						; size = 4
_bInit$ = 12						; size = 1
?realloc@CQueueS@@QAE_NH_N@Z PROC			; CQueueS::realloc, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 64   : 	void** newPtr, **oldPtr = m_pArray;
; 65   : 	newPtr = (void **)calloc(nMaxCount, sizeof(void*));

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _nMaxCount$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	6a 04		 push	 4
  0000e	53		 push	 ebx
  0000f	8b 37		 mov	 esi, DWORD PTR [edi]
  00011	89 75 fc	 mov	 DWORD PTR _oldPtr$1$[ebp], esi
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0001a	8b c8		 mov	 ecx, eax
  0001c	83 c4 08	 add	 esp, 8
  0001f	89 4d 08	 mov	 DWORD PTR _newPtr$1$[ebp], ecx

; 66   : 	if (!newPtr) {

  00022	85 c9		 test	 ecx, ecx
  00024	75 2a		 jne	 SHORT $LN2@realloc

; 67   : 		printf("[%p] calloc has Failed\n", m_pArray);

  00026	ff 37		 push	 DWORD PTR [edi]
  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DFLPFHMH@?$FL?$CFp?$FN?5calloc?5has?5Failed?6?$AA@
  0002d	e8 00 00 00 00	 call	 _printf

; 69   : 		m_CS.leave();

  00032	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00035	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00038	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 94   : 	inline void init() { m_count = 0; }

  0003b	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 69   : 		m_CS.leave();

  00042	ff 50 08	 call	 DWORD PTR [eax+8]
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 70   : 		return false;

  00047	32 c0		 xor	 al, al
  00049	5b		 pop	 ebx

; 91   : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@realloc:

; 71   : 	}
; 72   : 	if (bInit) {

  00050	80 7d 0c 00	 cmp	 BYTE PTR _bInit$[ebp], 0
  00054	74 1a		 je	 SHORT $LN3@realloc

; 73   : 		m_pArray = newPtr;
; 74   : 		m_nMax = nMaxCount;
; 75   : 		memset(m_pArray, 0, nMaxCount * sizeof(void*));

  00056	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  0005d	89 0f		 mov	 DWORD PTR [edi], ecx
  0005f	50		 push	 eax
  00060	6a 00		 push	 0
  00062	51		 push	 ecx
  00063	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx
  00066	e8 00 00 00 00	 call	 _memset
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 76   : 	}
; 77   : 	else {

  0006e	eb 4b		 jmp	 SHORT $LN4@realloc
$LN3@realloc:

; 78   : 		memcpy(newPtr, m_pArray, m_nMax * sizeof(void*));

  00070	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00073	c1 e0 02	 shl	 eax, 2
  00076	50		 push	 eax
  00077	ff 37		 push	 DWORD PTR [edi]
  00079	51		 push	 ecx
  0007a	e8 00 00 00 00	 call	 _memcpy

; 79   : 		printf("[%p] ################### realloc success m_nLast[%d] m_nMax[%d] nMaxCount[%d]\n", m_pArray, m_nLast, m_nMax, nMaxCount);

  0007f	53		 push	 ebx
  00080	ff 77 0c	 push	 DWORD PTR [edi+12]
  00083	ff 77 04	 push	 DWORD PTR [edi+4]
  00086	ff 37		 push	 DWORD PTR [edi]
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MNCAMOA@?$FL?$CFp?$FN?5?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?$CD?5realloc@
  0008d	e8 00 00 00 00	 call	 _printf
  00092	83 c4 20	 add	 esp, 32			; 00000020H

; 80   : 		SPIN_LOCK_ENTER(&m_cLockPop);

  00095	8d 77 34	 lea	 esi, DWORD PTR [edi+52]
  00098	56		 push	 esi
  00099	e8 00 00 00 00	 call	 _acquireSpinLock@4

; 81   : 		m_pArray = newPtr;

  0009e	8b 45 08	 mov	 eax, DWORD PTR _newPtr$1$[ebp]
  000a1	89 07		 mov	 DWORD PTR [edi], eax

; 82   : 		m_nLast = m_nMax;

  000a3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 83   : 		m_nMax = nMaxCount;
; 84   : 		SPIN_LOCK_LEAVE(&m_cLockPop);

  000a6	56		 push	 esi
  000a7	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000aa	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx
  000ad	e8 00 00 00 00	 call	 _releaseSpinLock@4

; 85   : 		m_nOldMax = m_nLast;

  000b2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b5	8b 75 fc	 mov	 esi, DWORD PTR _oldPtr$1$[ebp]
  000b8	89 47 38	 mov	 DWORD PTR [edi+56], eax
$LN4@realloc:

; 88   : 	m_CS.leave();

  000bb	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000be	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 94   : 	inline void init() { m_count = 0; }

  000c1	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 88   : 	m_CS.leave();

  000c8	ff 50 08	 call	 DWORD PTR [eax+8]

; 89   : 	if(oldPtr) free(oldPtr);

  000cb	85 f6		 test	 esi, esi
  000cd	74 0a		 je	 SHORT $LN5@realloc
  000cf	56		 push	 esi
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000d6	83 c4 04	 add	 esp, 4
$LN5@realloc:

; 90   : 	return true;

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	b0 01		 mov	 al, 1
  000dd	5b		 pop	 ebx

; 91   : }

  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
?realloc@CQueueS@@QAE_NH_N@Z ENDP			; CQueueS::realloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ?alloc@CQueueS@@QAE_NHW4E_ALLOC_TYPE@@@Z
_TEXT	SEGMENT
_nMaxCount$ = 8						; size = 4
_type$ = 12						; size = 4
?alloc@CQueueS@@QAE_NHW4E_ALLOC_TYPE@@@Z PROC		; CQueueS::alloc, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 49   : 	m_pArray = (void **)calloc(nMaxCount, sizeof(void*));

  00005	8b 7d 08	 mov	 edi, DWORD PTR _nMaxCount$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	6a 04		 push	 4
  0000c	57		 push	 edi
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00013	83 c4 08	 add	 esp, 8
  00016	89 06		 mov	 DWORD PTR [esi], eax

; 50   : 	if (m_pArray == 0) {

  00018	85 c0		 test	 eax, eax
  0001a	75 08		 jne	 SHORT $LN2@alloc

; 51   : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "m_pArray calloc ERROR nMaxCount[%d]", nMaxCount);
; 52   : 		return false;

  0001c	5f		 pop	 edi
  0001d	32 c0		 xor	 al, al
  0001f	5e		 pop	 esi

; 59   : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN2@alloc:

; 53   : 	}
; 54   : 
; 55   : 	m_nMax = nMaxCount;
; 56   : 	m_nObjAllocType = type;

  00024	8b 45 0c	 mov	 eax, DWORD PTR _type$[ebp]
  00027	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0002a	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 57   : 	//gs_cLogger.PutLogQueue(LEVEL_INFO, _T("CQueue<T>::alloc nMaxCount[%d]"), nMaxCount);
; 58   : 	return true;

  0002d	b0 01		 mov	 al, 1
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 59   : }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?alloc@CQueueS@@QAE_NHW4E_ALLOC_TYPE@@@Z ENDP		; CQueueS::alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ??1CQueueS@@QAE@XZ
_TEXT	SEGMENT
tv211 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CQueueS@@QAE@XZ PROC					; CQueueS::~CQueueS, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CQueueS@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 20   : 	if (!m_pArray) return;

  00027	83 3e 00	 cmp	 DWORD PTR [esi], 0
  0002a	0f 84 8a 00 00
	00		 je	 $LN1@CQueueS
  00030	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1

; 21   : 
; 22   : 	void *p;
; 23   : 	int i;
; 24   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  00034	7e 73		 jle	 SHORT $LN3@CQueueS

; 25   : 		for (i = 0; i < m_nMax; i++) {

  00036	33 ff		 xor	 edi, edi
  00038	39 7e 0c	 cmp	 DWORD PTR [esi+12], edi
  0003b	7e 6c		 jle	 SHORT $LN3@CQueueS
  0003d	0f 1f 00	 npad	 3
$LL4@CQueueS:

; 26   : 			p = m_pArray[i];

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b 14 b8	 mov	 edx, DWORD PTR [eax+edi*4]

; 27   : 			if (p) {

  00045	85 d2		 test	 edx, edx
  00047	74 5a		 je	 SHORT $LN2@CQueueS

; 28   : 				switch (m_nObjAllocType) {

  00049	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0004c	83 c0 fe	 add	 eax, -2			; fffffffeH
  0004f	83 f8 03	 cmp	 eax, 3
  00052	77 4f		 ja	 SHORT $LN2@CQueueS
  00054	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN46@CQueueS[eax*4]
$LN10@CQueueS:

; 29   : 				case eAlloc_Type_new:	delete p; break;

  0005b	6a 00		 push	 0
  0005d	52		 push	 edx
  0005e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00063	83 c4 08	 add	 esp, 8
  00066	eb 3b		 jmp	 SHORT $LN2@CQueueS
$LN11@CQueueS:

; 30   : 				case eAlloc_Type_alloc:	free(p); break;

  00068	52		 push	 edx
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0006f	eb 2f		 jmp	 SHORT $LN45@CQueueS
$LN12@CQueueS:

; 31   : 				case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00071	8b c2		 mov	 eax, edx
  00073	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00076	89 4d f0	 mov	 DWORD PTR tv211[ebp], ecx
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL43@CQueueS:
  00080	8a 08		 mov	 cl, BYTE PTR [eax]
  00082	40		 inc	 eax
  00083	84 c9		 test	 cl, cl
  00085	75 f9		 jne	 SHORT $LL43@CQueueS
  00087	2b 45 f0	 sub	 eax, DWORD PTR tv211[ebp]
  0008a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00090	40		 inc	 eax
  00091	50		 push	 eax
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QAEXPADH@Z ; CMemManager::delBuf
  00098	eb 09		 jmp	 SHORT $LN2@CQueueS
$LN13@CQueueS:

; 32   : 				case eAlloc_Type_newArray:	delete[] p; break;

  0009a	52		 push	 edx
  0009b	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN45@CQueueS:
  000a0	83 c4 04	 add	 esp, 4
$LN2@CQueueS:

; 25   : 		for (i = 0; i < m_nMax; i++) {

  000a3	47		 inc	 edi
  000a4	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  000a7	7c 97		 jl	 SHORT $LL4@CQueueS
$LN3@CQueueS:

; 33   : 				case eAlloc_Type_none: break;
; 34   : 				case eAlloc_Type_MemPool: break;
; 35   : 				}
; 36   : 			}
; 37   : 		}			
; 38   : 	}
; 39   : 	free(m_pArray);

  000a9	ff 36		 push	 DWORD PTR [esi]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000b1	83 c4 04	 add	 esp, 4

; 40   : 	m_pArray = 0;

  000b4	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@CQueueS:
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 36   : 	virtual ~critical_section() { DeleteCriticalSection(&m_cs);}

  000ba	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  000bd	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7critical_section@win32@common@@6B@
  000c4	50		 push	 eax
  000c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h

; 61   : 	virtual ~abstract_critical_section() {}

  000cb	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], OFFSET ??_7abstract_critical_section@common@@6B@
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 43   : }

  000d2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dc	59		 pop	 ecx
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN46@CQueueS:
  000e4	00 00 00 00	 DD	 $LN10@CQueueS
  000e8	00 00 00 00	 DD	 $LN11@CQueueS
  000ec	00 00 00 00	 DD	 $LN12@CQueueS
  000f0	00 00 00 00	 DD	 $LN13@CQueueS
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CQueueS@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CQueueS@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CQueueS@@QAE@XZ ENDP					; CQueueS::~CQueueS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\src\comqueue.cpp
;	COMDAT ??0CQueueS@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CQueueS@@QAE@XZ PROC					; CQueueS::CQueueS, COMDAT
; _this$ = ecx

; 6    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 87   : 	win_atomic() {m_count = 0;}

  00009	8d 7b 14	 lea	 edi, DWORD PTR [ebx+20]
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 6    : {

  0000c	89 5d fc	 mov	 DWORD PTR _this$[ebp], ebx
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 35   : 	critical_section() { InitializeCriticalSection(&m_cs); }

  0000f	8d 43 1c	 lea	 eax, DWORD PTR [ebx+28]

; 87   : 	win_atomic() {m_count = 0;}

  00012	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 35   : 	critical_section() { InitializeCriticalSection(&m_cs); }

  00018	50		 push	 eax
  00019	c7 43 18 00 00
	00 00		 mov	 DWORD PTR [ebx+24], OFFSET ??_7critical_section@win32@common@@6B@
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 7    : 	memset(g_szMessage, 0, LEN_MEM_MESSAGE);

  00026	68 80 00 00 00	 push	 128			; 00000080H
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 87   : 	win_atomic() {m_count = 0;}

  0002b	8d 73 34	 lea	 esi, DWORD PTR [ebx+52]
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 7    : 	memset(g_szMessage, 0, LEN_MEM_MESSAGE);

  00034	6a 00		 push	 0
  00036	68 00 00 00 00	 push	 OFFSET ?g_szMessage@@3PADA ; g_szMessage
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 87   : 	win_atomic() {m_count = 0;}

  0003b	c7 43 3c 00 00
	00 00		 mov	 DWORD PTR [ebx+60], 0
; File e:\infinia-library-3.0\com\src\comqueue.cpp

; 7    : 	memset(g_szMessage, 0, LEN_MEM_MESSAGE);

  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH

; 8    : 	m_pArray = NULL;

  0004a	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 9    : 	m_nMax = 0;

  00050	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 10   : 	m_nFront = 0;

  00057	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 11   : 	m_nLast = 0;

  0005e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 12   : 	SPIN_LOCK_INIT(&m_cLockPush);

  00065	57		 push	 edi
  00066	e8 00 00 00 00	 call	 _initSpinLock@4

; 13   : 	SPIN_LOCK_INIT(&m_cLockPop);

  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 _initSpinLock@4
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi

; 14   : 	m_nOldMax = 0;

  00073	c7 43 38 00 00
	00 00		 mov	 DWORD PTR [ebx+56], 0

; 15   : }

  0007a	8b c3		 mov	 eax, ebx
  0007c	5b		 pop	 ebx
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??0CQueueS@@QAE@XZ ENDP					; CQueueS::CQueueS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z PROC		; ISABLETODELETE, COMDAT

; 247  : inline bool ISABLETODELETE(E_ALLOC_TYPE e) { if (eAlloc_Type_MemPool < e) return true; return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 01	 cmp	 DWORD PTR _e$[ebp], 1
  00007	0f 9f c0	 setg	 al
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ENDP		; ISABLETODELETE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?atomic_compare_exchange@win_atomic@win32@common@@QAEHHH@Z
_TEXT	SEGMENT
_nExchange$ = 8						; size = 4
_nComperand$ = 12					; size = 4
?atomic_compare_exchange@win_atomic@win32@common@@QAEHHH@Z PROC ; common::win32::win_atomic::atomic_compare_exchange, COMDAT
; _this$ = ecx

; 99   : 	inline int atomic_compare_exchange(int nExchange, int nComperand) {return (int)InterlockedCompareExchange(&m_count, nExchange, nComperand);} // return long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 0c	 push	 DWORD PTR _nComperand$[ebp]
  00006	ff 75 08	 push	 DWORD PTR _nExchange$[ebp]
  00009	51		 push	 ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedCompareExchange@12
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?atomic_compare_exchange@win_atomic@win32@common@@QAEHHH@Z ENDP ; common::win32::win_atomic::atomic_compare_exchange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?init@win_atomic@win32@common@@QAEXXZ
_TEXT	SEGMENT
?init@win_atomic@win32@common@@QAEXXZ PROC		; common::win32::win_atomic::init, COMDAT
; _this$ = ecx

; 94   : 	inline void init() { m_count = 0; }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c3		 ret	 0
?init@win_atomic@win32@common@@QAEXXZ ENDP		; common::win32::win_atomic::init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?getCount@win_atomic@win32@common@@QAEHXZ
_TEXT	SEGMENT
?getCount@win_atomic@win32@common@@QAEHXZ PROC		; common::win32::win_atomic::getCount, COMDAT
; _this$ = ecx

; 91   : 	inline int getCount() { return (int)m_count; }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?getCount@win_atomic@win32@common@@QAEHXZ ENDP		; common::win32::win_atomic::getCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??1win_atomic@win32@common@@QAE@XZ
_TEXT	SEGMENT
??1win_atomic@win32@common@@QAE@XZ PROC			; common::win32::win_atomic::~win_atomic, COMDAT
; _this$ = ecx

; 88   : 	~win_atomic() {}

  00000	c3		 ret	 0
??1win_atomic@win32@common@@QAE@XZ ENDP			; common::win32::win_atomic::~win_atomic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??0win_atomic@win32@common@@QAE@XZ
_TEXT	SEGMENT
??0win_atomic@win32@common@@QAE@XZ PROC			; common::win32::win_atomic::win_atomic, COMDAT
; _this$ = ecx

; 87   : 	win_atomic() {m_count = 0;}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0win_atomic@win32@common@@QAE@XZ ENDP			; common::win32::win_atomic::win_atomic
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
;	COMDAT ??_Gcritical_section@win32@common@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gcritical_section@win32@common@@UAEPAXI@Z PROC	; common::win32::critical_section::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 36   : 	virtual ~critical_section() { DeleteCriticalSection(&m_cs);}

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7critical_section@win32@common@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00016	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h

; 61   : 	virtual ~abstract_critical_section() {}

  0001a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7abstract_critical_section@common@@6B@
  00020	74 0b		 je	 SHORT $LN10@scalar
  00022	6a 1c		 push	 28			; 0000001cH
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN10@scalar:
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_Gcritical_section@win32@common@@UAEPAXI@Z ENDP	; common::win32::critical_section::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?leave@critical_section@win32@common@@UAEXXZ
_TEXT	SEGMENT
?leave@critical_section@win32@common@@UAEXXZ PROC	; common::win32::critical_section::leave, COMDAT
; _this$ = ecx

; 55   : 	void leave() { LeaveCriticalSection(&m_cs);}

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0000a	c3		 ret	 0
?leave@critical_section@win32@common@@UAEXXZ ENDP	; common::win32::critical_section::leave
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?enter@critical_section@win32@common@@UAE_N_N@Z
_TEXT	SEGMENT
_bWait$ = 8						; size = 1
?enter@critical_section@win32@common@@UAE_N_N@Z PROC	; common::win32::critical_section::enter, COMDAT
; _this$ = ecx

; 39   : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   : 	     BOOL	bRet = TRUE;
; 41   : 
; 42   : 	     if (bWait) 

  00003	80 7d 08 00	 cmp	 BYTE PTR _bWait$[ebp], 0

; 43   : 		     EnterCriticalSection(&m_cs);

  00007	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000a	56		 push	 esi
  0000b	be 01 00 00 00	 mov	 esi, 1
  00010	50		 push	 eax
  00011	74 10		 je	 SHORT $LN2@enter
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 47   :     #else
; 48   : 		    EnterCriticalSection(&m_cs);
; 49   :     #endif
; 50   : 
; 51   : 	     return (bRet)?true:false;

  00019	85 f6		 test	 esi, esi
  0001b	5e		 pop	 esi
  0001c	0f 95 c0	 setne	 al

; 52   : 
; 53   : 	} 

  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
$LN2@enter:

; 44   : 	     else
; 45   :     #if(_WIN32_WINNT >= 0x0400)
; 46   : 		     bRet = TryEnterCriticalSection(&m_cs);

  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TryEnterCriticalSection@4
  00029	8b f0		 mov	 esi, eax

; 47   :     #else
; 48   : 		    EnterCriticalSection(&m_cs);
; 49   :     #endif
; 50   : 
; 51   : 	     return (bRet)?true:false;

  0002b	85 f6		 test	 esi, esi
  0002d	5e		 pop	 esi
  0002e	0f 95 c0	 setne	 al

; 52   : 
; 53   : 	} 

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
?enter@critical_section@win32@common@@UAE_N_N@Z ENDP	; common::win32::critical_section::enter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??1critical_section@win32@common@@UAE@XZ
_TEXT	SEGMENT
??1critical_section@win32@common@@UAE@XZ PROC		; common::win32::critical_section::~critical_section, COMDAT
; _this$ = ecx

; 36   : 	virtual ~critical_section() { DeleteCriticalSection(&m_cs);}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7critical_section@win32@common@@6B@
  0000c	50		 push	 eax
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h

; 61   : 	virtual ~abstract_critical_section() {}

  00013	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7abstract_critical_section@common@@6B@
  00019	5e		 pop	 esi
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h

; 36   : 	virtual ~critical_section() { DeleteCriticalSection(&m_cs);}

  0001a	c3		 ret	 0
??1critical_section@win32@common@@UAE@XZ ENDP		; common::win32::critical_section::~critical_section
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??0critical_section@win32@common@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0critical_section@win32@common@@QAE@XZ PROC		; common::win32::critical_section::critical_section, COMDAT
; _this$ = ecx

; 35   : 	critical_section() { InitializeCriticalSection(&m_cs); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7critical_section@win32@common@@6B@
  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4
  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0critical_section@win32@common@@QAE@XZ ENDP		; common::win32::critical_section::critical_section
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
;	COMDAT ??_Gabstract_critical_section@common@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gabstract_critical_section@common@@UAEPAXI@Z PROC	; common::abstract_critical_section::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 61   : 	virtual ~abstract_critical_section() {}

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7abstract_critical_section@common@@6B@
  00010	74 0b		 je	 SHORT $LN7@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gabstract_critical_section@common@@UAEPAXI@Z ENDP	; common::abstract_critical_section::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0abstract_critical_section@common@@QAE@XZ
_TEXT	SEGMENT
??0abstract_critical_section@common@@QAE@XZ PROC	; common::abstract_critical_section::abstract_critical_section, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7abstract_critical_section@common@@6B@
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0abstract_critical_section@common@@QAE@XZ ENDP	; common::abstract_critical_section::abstract_critical_section
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
;	COMDAT ??1abstract_critical_section@common@@UAE@XZ
_TEXT	SEGMENT
??1abstract_critical_section@common@@UAE@XZ PROC	; common::abstract_critical_section::~abstract_critical_section, COMDAT
; _this$ = ecx

; 61   : 	virtual ~abstract_critical_section() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7abstract_critical_section@common@@6B@
  00006	c3		 ret	 0
??1abstract_critical_section@common@@UAE@XZ ENDP	; common::abstract_critical_section::~abstract_critical_section
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);
; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00012	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001f	ff 70 04	 push	 DWORD PTR [eax+4]
  00022	ff 30		 push	 DWORD PTR [eax]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	5e		 pop	 esi

; 955  :     __crt_va_end(_ArgList);
; 956  :     return _Result;
; 957  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
