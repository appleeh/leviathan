; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comQSort.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?SortEx@@YAXPAUSTSortData@@H@Z			; SortEx
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comqsort.cpp
;	COMDAT ?SortEx@@YAXPAUSTSortData@@H@Z
_TEXT	SEGMENT
_loopcnt$1$ = -44					; size = 4
tv422 = -40						; size = 4
tv413 = -36						; size = 4
_i$1$ = -32						; size = 4
_right$1$ = -28						; size = 4
tv421 = -24						; size = 4
tv419 = -20						; size = 4
tv417 = -16						; size = 4
_nMax$1$ = -12						; size = 4
tv415 = -8						; size = 4
tv416 = -4						; size = 4
_arr$ = 8						; size = 4
_nCount$ = 12						; size = 4
?SortEx@@YAXPAUSTSortData@@H@Z PROC			; SortEx, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH

; 6    : 	int loopcnt = nCount >> 1, left, right = nCount - 1;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
  00009	8b c8		 mov	 ecx, eax
  0000b	8b 55 08	 mov	 edx, DWORD PTR _arr$[ebp]
  0000e	56		 push	 esi
  0000f	d1 f9		 sar	 ecx, 1
  00011	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  00014	89 4d d4	 mov	 DWORD PTR _loopcnt$1$[ebp], ecx

; 7    : 	int nMin, nMax;
; 8    : 	int i, j, nSize = sizeof(STSortData);
; 9    : 	STSortData stVal1, stVal2;
; 10   : 
; 11   : 	for (i = 0; i < loopcnt; i++)

  00017	33 c0		 xor	 eax, eax
  00019	89 75 e4	 mov	 DWORD PTR _right$1$[ebp], esi
  0001c	89 45 e0	 mov	 DWORD PTR _i$1$[ebp], eax
  0001f	85 c9		 test	 ecx, ecx
  00021	0f 8e 49 01 00
	00		 jle	 $LN32@SortEx
  00027	8d 0c f2	 lea	 ecx, DWORD PTR [edx+esi*8]
  0002a	89 45 f0	 mov	 DWORD PTR tv417[ebp], eax
  0002d	89 4d fc	 mov	 DWORD PTR tv416[ebp], ecx
  00030	b9 08 00 00 00	 mov	 ecx, 8
  00035	2b ca		 sub	 ecx, edx
  00037	89 55 f8	 mov	 DWORD PTR tv415[ebp], edx
  0003a	53		 push	 ebx
  0003b	89 4d dc	 mov	 DWORD PTR tv413[ebp], ecx
  0003e	57		 push	 edi
  0003f	90		 npad	 1
$LL4@SortEx:

; 12   : 	{
; 13   : 		left = i;
; 14   : 		//------------------------------------
; 15   : 		nMin = left; nMax = left;

  00040	8b f8		 mov	 edi, eax
  00042	89 45 f4	 mov	 DWORD PTR _nMax$1$[ebp], eax

; 16   : 		for (j = left + 1; j <= right; j++) {

  00045	40		 inc	 eax
  00046	89 45 d8	 mov	 DWORD PTR tv422[ebp], eax
  00049	8b c8		 mov	 ecx, eax
  0004b	3b c6		 cmp	 eax, esi
  0004d	0f 8f 1b 01 00
	00		 jg	 $LN33@SortEx

; 12   : 	{
; 13   : 		left = i;
; 14   : 		//------------------------------------
; 15   : 		nMin = left; nMax = left;

  00053	8b 75 f0	 mov	 esi, DWORD PTR tv417[ebp]
  00056	8b 45 f8	 mov	 eax, DWORD PTR tv415[ebp]
  00059	03 45 dc	 add	 eax, DWORD PTR tv413[ebp]
  0005c	89 75 e8	 mov	 DWORD PTR tv421[ebp], esi
  0005f	89 75 ec	 mov	 DWORD PTR tv419[ebp], esi
$LL7@SortEx:

; 17   : 			if (arr[nMin].address > arr[j].address)nMin = j;

  00062	8b 5d ec	 mov	 ebx, DWORD PTR tv419[ebp]
  00065	8b 34 10	 mov	 esi, DWORD PTR [eax+edx]
  00068	39 34 13	 cmp	 DWORD PTR [ebx+edx], esi
  0006b	8b 5d f4	 mov	 ebx, DWORD PTR _nMax$1$[ebp]
  0006e	76 07		 jbe	 SHORT $LN8@SortEx
  00070	8b f9		 mov	 edi, ecx
  00072	89 45 ec	 mov	 DWORD PTR tv419[ebp], eax
  00075	eb 13		 jmp	 SHORT $LN5@SortEx
$LN8@SortEx:

; 18   : 			else if (arr[nMax].address < arr[j].address)nMax = j;

  00077	8b 5d e8	 mov	 ebx, DWORD PTR tv421[ebp]
  0007a	39 34 13	 cmp	 DWORD PTR [ebx+edx], esi
  0007d	8b 5d f4	 mov	 ebx, DWORD PTR _nMax$1$[ebp]
  00080	73 08		 jae	 SHORT $LN5@SortEx
  00082	8b d9		 mov	 ebx, ecx
  00084	89 45 e8	 mov	 DWORD PTR tv421[ebp], eax
  00087	89 5d f4	 mov	 DWORD PTR _nMax$1$[ebp], ebx
$LN5@SortEx:

; 16   : 		for (j = left + 1; j <= right; j++) {

  0008a	8b 75 e4	 mov	 esi, DWORD PTR _right$1$[ebp]
  0008d	41		 inc	 ecx
  0008e	83 c0 08	 add	 eax, 8
  00091	3b ce		 cmp	 ecx, esi
  00093	7e cd		 jle	 SHORT $LL7@SortEx

; 19   : 		}
; 20   : 		if (nMin == nMax) return;

  00095	3b fb		 cmp	 edi, ebx
  00097	0f 84 d1 00 00
	00		 je	 $LN33@SortEx

; 21   : 
; 22   : 		if (left == nMax) {

  0009d	8b 45 e0	 mov	 eax, DWORD PTR _i$1$[ebp]

; 26   : 				memcpy(&arr[right], &stVal2, nSize);

  000a0	8b 4d fc	 mov	 ecx, DWORD PTR tv416[ebp]
  000a3	3b c3		 cmp	 eax, ebx
  000a5	75 37		 jne	 SHORT $LN12@SortEx

; 23   : 			memcpy(&stVal2, &arr[nMax], nSize);
; 24   : 			if (right == nMin) {
; 25   : 				memcpy(&arr[left], &arr[nMin], nSize);

  000a7	f3 0f 7e 14 da	 movq	 xmm2, QWORD PTR [edx+ebx*8]
  000ac	f3 0f 7e 04 fa	 movq	 xmm0, QWORD PTR [edx+edi*8]
  000b1	3b f7		 cmp	 esi, edi
  000b3	75 10		 jne	 SHORT $LN14@SortEx
  000b5	8b 45 f8	 mov	 eax, DWORD PTR tv415[ebp]
  000b8	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0

; 26   : 				memcpy(&arr[right], &stVal2, nSize);

  000bc	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2

; 27   : 			}
; 28   : 			else {

  000c0	e9 88 00 00 00	 jmp	 $LN21@SortEx
$LN14@SortEx:

; 29   : 				memcpy(&stVal1, &arr[right], nSize);

  000c5	8b 45 fc	 mov	 eax, DWORD PTR tv416[ebp]
  000c8	f3 0f 7e 08	 movq	 xmm1, QWORD PTR [eax]

; 30   : 				memcpy(&arr[left], &arr[nMin], nSize);

  000cc	8b 45 f8	 mov	 eax, DWORD PTR tv415[ebp]
  000cf	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0

; 31   : 				memcpy(&arr[right], &stVal2, nSize);

  000d3	66 0f d6 11	 movq	 QWORD PTR [ecx], xmm2

; 32   : 				memcpy(&arr[nMin], &stVal1, nSize);

  000d7	66 0f d6 0c fa	 movq	 QWORD PTR [edx+edi*8], xmm1

; 33   : 			}

  000dc	eb 6f		 jmp	 SHORT $LN21@SortEx
$LN12@SortEx:

; 34   : 		}
; 35   : 		else if (left == nMin) {

  000de	3b c7		 cmp	 eax, edi
  000e0	75 14		 jne	 SHORT $LN16@SortEx

; 36   : 			memcpy(&stVal1, &arr[right], nSize);
; 37   : 			memcpy(&arr[right], &arr[nMax], nSize);

  000e2	f3 0f 7e 04 da	 movq	 xmm0, QWORD PTR [edx+ebx*8]
  000e7	f3 0f 7e 09	 movq	 xmm1, QWORD PTR [ecx]
  000eb	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 38   : 			memcpy(&arr[nMax], &stVal1, nSize);

  000ef	66 0f d6 0c da	 movq	 QWORD PTR [edx+ebx*8], xmm1
  000f4	eb 57		 jmp	 SHORT $LN21@SortEx
$LN16@SortEx:

; 39   : 		}
; 40   : 		else if (right == nMin) {
; 41   : 			memcpy(&stVal1, &arr[left], nSize);

  000f6	8b 45 f8	 mov	 eax, DWORD PTR tv415[ebp]
  000f9	3b f7		 cmp	 esi, edi
  000fb	75 18		 jne	 SHORT $LN18@SortEx

; 42   : 			memcpy(&stVal2, &arr[nMin], nSize);
; 43   : 			memcpy(&arr[right], &arr[nMax], nSize);

  000fd	f3 0f 7e 04 da	 movq	 xmm0, QWORD PTR [edx+ebx*8]
  00102	f3 0f 7e 10	 movq	 xmm2, QWORD PTR [eax]
  00106	f3 0f 7e 0c fa	 movq	 xmm1, QWORD PTR [edx+edi*8]
  0010b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 44   : 			memcpy(&arr[left], &stVal2, nSize);

  0010f	66 0f d6 08	 movq	 QWORD PTR [eax], xmm1

; 45   : 			memcpy(&arr[nMax], &stVal1, nSize);

  00113	eb 33		 jmp	 SHORT $LN35@SortEx
$LN18@SortEx:

; 46   : 		}
; 47   : 		else if (right == nMax) {
; 48   : 			memcpy(&stVal1, &arr[left], nSize);

  00115	f3 0f 7e 08	 movq	 xmm1, QWORD PTR [eax]
  00119	3b f3		 cmp	 esi, ebx
  0011b	75 10		 jne	 SHORT $LN20@SortEx

; 49   : 			memcpy(&arr[left], &arr[nMin], nSize);

  0011d	f3 0f 7e 04 fa	 movq	 xmm0, QWORD PTR [edx+edi*8]
  00122	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0

; 50   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00126	66 0f d6 0c fa	 movq	 QWORD PTR [edx+edi*8], xmm1

; 51   : 		}
; 52   : 		else {

  0012b	eb 20		 jmp	 SHORT $LN21@SortEx
$LN20@SortEx:

; 53   : 			memcpy(&stVal1, &arr[left], nSize);
; 54   : 			memcpy(&stVal2, &arr[right], nSize);
; 55   : 			memcpy(&arr[right], &arr[nMax], nSize);

  0012d	f3 0f 7e 04 da	 movq	 xmm0, QWORD PTR [edx+ebx*8]
  00132	f3 0f 7e 11	 movq	 xmm2, QWORD PTR [ecx]
  00136	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 56   : 			memcpy(&arr[left], &arr[nMin], nSize);

  0013a	f3 0f 7e 04 fa	 movq	 xmm0, QWORD PTR [edx+edi*8]
  0013f	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0

; 57   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00143	66 0f d6 0c fa	 movq	 QWORD PTR [edx+edi*8], xmm1
$LN35@SortEx:

; 58   : 			memcpy(&arr[nMax], &stVal2, nSize);

  00148	66 0f d6 14 da	 movq	 QWORD PTR [edx+ebx*8], xmm2
$LN21@SortEx:

; 7    : 	int nMin, nMax;
; 8    : 	int i, j, nSize = sizeof(STSortData);
; 9    : 	STSortData stVal1, stVal2;
; 10   : 
; 11   : 	for (i = 0; i < loopcnt; i++)

  0014d	8b 45 d8	 mov	 eax, DWORD PTR tv422[ebp]

; 59   : 		}
; 60   : 
; 61   : 		//-------------------------------------
; 62   : 		right--;

  00150	4e		 dec	 esi
  00151	83 45 f0 08	 add	 DWORD PTR tv417[ebp], 8
  00155	83 e9 08	 sub	 ecx, 8
  00158	83 45 f8 08	 add	 DWORD PTR tv415[ebp], 8
  0015c	89 75 e4	 mov	 DWORD PTR _right$1$[ebp], esi
  0015f	89 4d fc	 mov	 DWORD PTR tv416[ebp], ecx
  00162	89 45 e0	 mov	 DWORD PTR _i$1$[ebp], eax
  00165	3b 45 d4	 cmp	 eax, DWORD PTR _loopcnt$1$[ebp]
  00168	0f 8c d2 fe ff
	ff		 jl	 $LL4@SortEx
$LN33@SortEx:
  0016e	5f		 pop	 edi
  0016f	5b		 pop	 ebx
$LN32@SortEx:
  00170	5e		 pop	 esi

; 63   : 	}
; 64   : }

  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c3		 ret	 0
?SortEx@@YAXPAUSTSortData@@H@Z ENDP			; SortEx
_TEXT	ENDS
END
