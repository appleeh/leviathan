; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comEnv.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?g_pWorkDir@@3PADA				; g_pWorkDir
PUBLIC	?g_pWorkDir2@@3PADA				; g_pWorkDir2
PUBLIC	?g_pSystem@@3PADA				; g_pSystem
PUBLIC	?g_pProcessName@@3PADA				; g_pProcessName
PUBLIC	?g_pProcessConfig@@3PADA			; g_pProcessConfig
_BSS	SEGMENT
?g_pWorkDir@@3PADA DD 01H DUP (?)			; g_pWorkDir
?g_pWorkDir2@@3PADA DD 01H DUP (?)			; g_pWorkDir2
?g_pSystem@@3PADA DD 01H DUP (?)			; g_pSystem
?g_pProcessName@@3PADA DD 01H DUP (?)			; g_pProcessName
?g_pProcessConfig@@3PADA DD 01H DUP (?)			; g_pProcessConfig
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	_sprintf
PUBLIC	?FullName@CEnv@@SAHPBDPAPAD@Z			; CEnv::FullName
PUBLIC	?setWorkingDir@CEnv@@SA_NPAD@Z			; CEnv::setWorkingDir
PUBLIC	?setWorkingDir2@CEnv@@SA_NH@Z			; CEnv::setWorkingDir2
PUBLIC	?initWorkingPath@CEnv@@SA_NXZ			; CEnv::initWorkingPath
PUBLIC	?initSystem@CEnv@@SAHPAD@Z			; CEnv::initSystem
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0O@FGHEKOOO@SOLUTION_HOME?$AA@		; `string'
PUBLIC	??_C@_04PHHEBHMK@?4ini?$AA@			; `string'
PUBLIC	??_C@_0N@CCOLIIKL@?$CFssystem?4ini?$AA@		; `string'
PUBLIC	??_C@_0BD@JBBOFLLG@g_pSystem?5is?5NULL?6?$AA@	; `string'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp___mbsrchr:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__getenv:PROC
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	_GetModuleFileNameExA@16:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0BD@JBBOFLLG@g_pSystem?5is?5NULL?6?$AA@
CONST	SEGMENT
??_C@_0BD@JBBOFLLG@g_pSystem?5is?5NULL?6?$AA@ DB 'g_pSystem is NULL', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CCOLIIKL@?$CFssystem?4ini?$AA@
CONST	SEGMENT
??_C@_0N@CCOLIIKL@?$CFssystem?4ini?$AA@ DB '%ssystem.ini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHHEBHMK@?4ini?$AA@
CONST	SEGMENT
??_C@_04PHHEBHMK@?4ini?$AA@ DB '.ini', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGHEKOOO@SOLUTION_HOME?$AA@
CONST	SEGMENT
??_C@_0O@FGHEKOOO@SOLUTION_HOME?$AA@ DB 'SOLUTION_HOME', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?initSystem@CEnv@@SAHPAD@Z
_TEXT	SEGMENT
_szConfig$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
_pDir$ = 8						; size = 4
?initSystem@CEnv@@SAHPAD@Z PROC				; CEnv::initSystem, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 153  : 	if (g_pSystem) return 1;

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pSystem@@3PADA, 0 ; g_pSystem
  0001a	8b 45 08	 mov	 eax, DWORD PTR _pDir$[ebp]
  0001d	0f 85 82 00 00
	00		 jne	 $LN16@initSystem

; 154  : 
; 155  : 	int nLen;
; 156  : 	TCHAR szConfig[128];
; 157  : 	if (pDir) {

  00023	85 c0		 test	 eax, eax
  00025	74 03		 je	 SHORT $LN3@initSystem

; 158  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), pDir);

  00027	50		 push	 eax
  00028	eb 1b		 jmp	 SHORT $LN15@initSystem
$LN3@initSystem:

; 159  : 	}
; 160  : 	else if (g_pWorkDir) {

  0002a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0002f	85 c0		 test	 eax, eax
  00031	74 03		 je	 SHORT $LN5@initSystem

; 161  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  00033	50		 push	 eax

; 162  : 	}
; 163  : 	else {

  00034	eb 0f		 jmp	 SHORT $LN15@initSystem
$LN5@initSystem:

; 164  : 		if (CEnv::initWorkingPath()) {

  00036	e8 00 00 00 00	 call	 ?initWorkingPath@CEnv@@SA_NXZ ; CEnv::initWorkingPath
  0003b	84 c0		 test	 al, al
  0003d	74 42		 je	 SHORT $LN7@initSystem

; 165  : 			nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  0003f	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
$LN15@initSystem:
  00045	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szConfig$[ebp]
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CCOLIIKL@?$CFssystem?4ini?$AA@
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _sprintf
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 168  : 	}
; 169  : 	g_pSystem = new (std::nothrow) TCHAR[nLen + 1];

  00059	40		 inc	 eax
  0005a	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00065	8b c8		 mov	 ecx, eax
  00067	83 c4 08	 add	 esp, 8
  0006a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pSystem@@3PADA, ecx ; g_pSystem

; 170  : 	if (!g_pSystem) {

  00070	85 c9		 test	 ecx, ecx
  00072	75 1d		 jne	 SHORT $LN9@initSystem

; 171  : 		printf("g_pSystem is NULL\n");

  00074	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JBBOFLLG@g_pSystem?5is?5NULL?6?$AA@
  00079	e8 00 00 00 00	 call	 _printf
  0007e	83 c4 04	 add	 esp, 4
$LN7@initSystem:

; 166  : 		}
; 167  : 		else return 0;

  00081	33 c0		 xor	 eax, eax

; 175  : 
; 176  : 	return 1;
; 177  : }

  00083	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00086	33 cd		 xor	 ecx, ebp
  00088	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN9@initSystem:

; 172  : 		return 0;
; 173  : 	}
; 174  : 	_tcscpy(g_pSystem, szConfig);

  00091	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _szConfig$[ebp]
$LL11@initSystem:
  00097	8a 02		 mov	 al, BYTE PTR [edx]
  00099	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0009c	88 01		 mov	 BYTE PTR [ecx], al
  0009e	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000a1	84 c0		 test	 al, al
  000a3	75 f2		 jne	 SHORT $LL11@initSystem
$LN16@initSystem:

; 175  : 
; 176  : 	return 1;
; 177  : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	b8 01 00 00 00	 mov	 eax, 1
  000ad	33 cd		 xor	 ecx, ebp
  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?initSystem@CEnv@@SAHPAD@Z ENDP				; CEnv::initSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?initWorkingPath@CEnv@@SA_NXZ
_TEXT	SEGMENT
_szBuf$ = -132						; size = 128
__$ArrayPad$ = -4					; size = 4
?initWorkingPath@CEnv@@SA_NXZ PROC			; CEnv::initWorkingPath, COMDAT

; 37   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 38   : 	if (g_pWorkDir) return true;

  00013	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_pWorkDir@@3PADA, 0 ; g_pWorkDir
  0001a	74 10		 je	 SHORT $LN2@initWorkin
  0001c	b0 01		 mov	 al, 1

; 103  : 	}
; 104  : 	
; 105  : 	return false;
; 106  : }

  0001e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00021	33 cd		 xor	 ecx, ebp
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@initWorkin:
  0002c	53		 push	 ebx
  0002d	56		 push	 esi

; 39   : 
; 40   : 	// setting working path
; 41   : 
; 42   : 	TCHAR szBuf[128];
; 43   : 	size_t nLen = 0, nLen2=0;
; 44   : 	TCHAR *pPos = _tgetenv(SOLUTION_HOME);

  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FGHEKOOO@SOLUTION_HOME?$AA@
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getenv

; 45   : 	TCHAR *pDot;
; 46   : 	if (pPos) {

  00039	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp___mbsrchr
  0003f	8b f0		 mov	 esi, eax
  00041	83 c4 04	 add	 esp, 4
  00044	85 f6		 test	 esi, esi
  00046	74 16		 je	 SHORT $LN3@initWorkin

; 47   : 		nLen = _tcslen(pPos);

  00048	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  0004b	0f 1f 44 00 00	 npad	 5
$LL39@initWorkin:
  00050	8a 06		 mov	 al, BYTE PTR [esi]
  00052	46		 inc	 esi
  00053	84 c0		 test	 al, al
  00055	75 f9		 jne	 SHORT $LL39@initWorkin
  00057	2b f1		 sub	 esi, ecx

; 48   : 	}
; 49   : 	else {

  00059	e9 fe 00 00 00	 jmp	 $LN9@initWorkin
$LN3@initWorkin:

; 50   : 
; 51   : #ifdef WIN32
; 52   : 		nLen = GetModuleFileNameEx(GetCurrentProcess(), NULL, szBuf, 128);

  0005e	68 80 00 00 00	 push	 128			; 00000080H
  00063	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00069	50		 push	 eax
  0006a	6a 00		 push	 0
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00072	50		 push	 eax
  00073	e8 00 00 00 00	 call	 _GetModuleFileNameExA@16
  00078	8b f0		 mov	 esi, eax

; 53   : 		//HANDLE process_handle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION,FALSE,GetCurrentProcessId());
; 54   : 		//DWORD BufSize;
; 55   : 		//if (process_handle) {
; 56   : 		//	if (QueryFullProcessImageName(process_handle, 0, szBuf, &BufSize)) {
; 57   : 		//		nLen = BufSize;
; 58   : 		//	}
; 59   : 		//	else {
; 60   : 		//		//gs_cLogger.DebugLog(LEVEL_ERROR, "QueryFullProcessImageName is FAIL!");
; 61   : 		//	}
; 62   : 		//	CloseHandle(process_handle);			
; 63   : 		//}
; 64   : 
; 65   : #else
; 66   : 		if (argv0) {
; 67   : 			if (realpath(argv0, szBuf))	nLen = strlen(szBuf);
; 68   : 			else gs_cLogger.DebugLog(LEVEL_ERROR, "realpath [%s]", argv0);
; 69   : 		}
; 70   : 		else {
; 71   : 			nLen = GetProcessFullName(szBuf);
; 72   : 		}
; 73   : #endif
; 74   : 		if (nLen) {

  0007a	85 f6		 test	 esi, esi
  0007c	0f 84 3d 01 00
	00		 je	 $LN10@initWorkin

; 75   : 			g_pProcessConfig = new (std::nothrow) TCHAR[nLen + 8];

  00082	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00085	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0008a	51		 push	 ecx
  0008b	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00090	83 c4 08	 add	 esp, 8
  00093	a3 00 00 00 00	 mov	 DWORD PTR ?g_pProcessConfig@@3PADA, eax ; g_pProcessConfig

; 76   : 			_tcscpy(g_pProcessConfig, szBuf);

  00098	8d 95 7c ff ff
	ff		 lea	 edx, DWORD PTR _szBuf$[ebp]
  0009e	66 90		 npad	 2
$LL13@initWorkin:
  000a0	8a 0a		 mov	 cl, BYTE PTR [edx]
  000a2	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  000a5	88 08		 mov	 BYTE PTR [eax], cl
  000a7	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000aa	84 c9		 test	 cl, cl
  000ac	75 f2		 jne	 SHORT $LL13@initWorkin
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  000ae	6a 2e		 push	 46			; 0000002eH
  000b0	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pProcessConfig@@3PADA ; g_pProcessConfig
  000b6	ff d3		 call	 ebx
  000b8	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 78   : 			if(pDot) _tcscpy(pDot, _T(".ini"));

  000bb	85 c0		 test	 eax, eax
  000bd	74 13		 je	 SHORT $LN6@initWorkin
  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_04PHHEBHMK@?4ini?$AA@
  000c5	89 08		 mov	 DWORD PTR [eax], ecx
  000c7	8a 0d 04 00 00
	00		 mov	 cl, BYTE PTR ??_C@_04PHHEBHMK@?4ini?$AA@+4
  000cd	88 48 04	 mov	 BYTE PTR [eax+4], cl
  000d0	eb 15		 jmp	 SHORT $LN7@initWorkin
$LN6@initWorkin:

; 79   : 			else _stprintf(g_pProcessConfig+nLen, _T(".ini"));

  000d2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pProcessConfig@@3PADA ; g_pProcessConfig
  000d7	03 c6		 add	 eax, esi
  000d9	68 00 00 00 00	 push	 OFFSET ??_C@_04PHHEBHMK@?4ini?$AA@
  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 _sprintf
  000e4	83 c4 08	 add	 esp, 8
$LN7@initWorkin:
  000e7	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  000e8	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  000ee	6a 5c		 push	 92			; 0000005cH
  000f0	50		 push	 eax
  000f1	ff d3		 call	 ebx
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 81   : 			pPos = _tcsrchr(szBuf, g_s);

  000f3	8b f8		 mov	 edi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  000f5	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 82   : 			nLen = pPos - szBuf + 1;

  000f8	8b f7		 mov	 esi, edi
  000fa	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  00100	2b f0		 sub	 esi, eax
  00102	46		 inc	 esi

; 83   : 			pPos++;

  00103	47		 inc	 edi

; 84   : 			nLen2 = _tcslen(pPos);

  00104	8b cf		 mov	 ecx, edi
  00106	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00109	0f 1f 80 00 00
	00 00		 npad	 7
$LL40@initWorkin:
  00110	8a 01		 mov	 al, BYTE PTR [ecx]
  00112	41		 inc	 ecx
  00113	84 c0		 test	 al, al
  00115	75 f9		 jne	 SHORT $LL40@initWorkin
  00117	2b ca		 sub	 ecx, edx

; 85   : 			g_pProcessName = new (std::nothrow) TCHAR[nLen2 + 1];

  00119	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0011e	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00121	50		 push	 eax
  00122	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00127	8b c8		 mov	 ecx, eax
  00129	83 c4 08	 add	 esp, 8
  0012c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pProcessName@@3PADA, ecx ; g_pProcessName

; 86   : 			if (g_pProcessName) _tcscpy(g_pProcessName, pPos);

  00132	85 c9		 test	 ecx, ecx
  00134	74 16		 je	 SHORT $LN8@initWorkin
  00136	8b d7		 mov	 edx, edi
$LL14@initWorkin:
  00138	8a 02		 mov	 al, BYTE PTR [edx]
  0013a	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0013d	88 01		 mov	 BYTE PTR [ecx], al
  0013f	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00142	84 c0		 test	 al, al
  00144	75 f2		 jne	 SHORT $LL14@initWorkin
  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pProcessName@@3PADA ; g_pProcessName
$LN8@initWorkin:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  0014c	6a 2e		 push	 46			; 0000002eH
  0014e	51		 push	 ecx
  0014f	ff d3		 call	 ebx
  00151	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 88   : 			if (pPos) *pDot = 0;

  00154	85 ff		 test	 edi, edi
  00156	5f		 pop	 edi
  00157	74 03		 je	 SHORT $LN9@initWorkin
  00159	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN9@initWorkin:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if (nLen) {

  0015c	85 f6		 test	 esi, esi
  0015e	74 5f		 je	 SHORT $LN10@initWorkin

; 93   : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen];

  00160	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00165	56		 push	 esi
  00166	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0016b	83 c4 08	 add	 esp, 8
  0016e	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir@@3PADA, eax ; g_pWorkDir

; 94   : 		if (!g_pWorkDir) {

  00173	85 c0		 test	 eax, eax
  00175	74 48		 je	 SHORT $LN10@initWorkin
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00177	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0017d	6a 5c		 push	 92			; 0000005cH
  0017f	50		 push	 eax
  00180	ff d3		 call	 ebx
  00182	8b f0		 mov	 esi, eax
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 99   : 		nLen = pRear - szBuf + 1;

  00184	b9 01 00 00 00	 mov	 ecx, 1
  00189	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _szBuf$[ebp]
  0018f	2b c8		 sub	 ecx, eax
  00191	03 f1		 add	 esi, ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00193	56		 push	 esi
  00194	50		 push	 eax
  00195	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 101  : 		g_pWorkDir[nLen] = 0;

  001a1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  001a6	83 c4 14	 add	 esp, 20			; 00000014H
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 101  : 		g_pWorkDir[nLen] = 0;

  001a9	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 102  : 		return true;

  001ad	b0 01		 mov	 al, 1
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx

; 103  : 	}
; 104  : 	
; 105  : 	return false;
; 106  : }

  001b1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b4	33 cd		 xor	 ecx, ebp
  001b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
$LN10@initWorkin:
  001bf	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001c2	32 c0		 xor	 al, al
  001c4	5e		 pop	 esi
  001c5	33 cd		 xor	 ecx, ebp
  001c7	5b		 pop	 ebx
  001c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001cd	8b e5		 mov	 esp, ebp
  001cf	5d		 pop	 ebp
  001d0	c3		 ret	 0
?initWorkingPath@CEnv@@SA_NXZ ENDP			; CEnv::initWorkingPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?setWorkingDir2@CEnv@@SA_NH@Z
_TEXT	SEGMENT
_upCount$ = 8						; size = 4
?setWorkingDir2@CEnv@@SA_NH@Z PROC			; CEnv::setWorkingDir2, COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 129  : 	if (!g_pWorkDir) {

  00004	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  0000a	85 f6		 test	 esi, esi
  0000c	75 05		 jne	 SHORT $LN5@setWorking

; 130  : 		return false;

  0000e	32 c0		 xor	 al, al
  00010	5e		 pop	 esi

; 149  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN5@setWorking:

; 131  : 	}
; 132  : 	size_t	nLen = (int)_tcslen(g_pWorkDir);

  00013	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL28@setWorking:
  00016	8a 06		 mov	 al, BYTE PTR [esi]
  00018	46		 inc	 esi
  00019	84 c0		 test	 al, al
  0001b	75 f9		 jne	 SHORT $LL28@setWorking

; 133  : 	TCHAR *pRear = g_pWorkDir;
; 134  : 	if (g_pWorkDir2) delete g_pWorkDir2;

  0001d	57		 push	 edi
  0001e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00024	2b f1		 sub	 esi, ecx
  00026	85 ff		 test	 edi, edi
  00028	74 1f		 je	 SHORT $LN9@setWorking
  0002a	6a 01		 push	 1
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00037	83 c4 08	 add	 esp, 8
  0003a	85 ff		 test	 edi, edi
  0003c	b9 23 81 00 00	 mov	 ecx, 33059		; 00008123H
  00041	0f 45 c1	 cmovne	 eax, ecx
  00044	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir2@@3PADA, eax ; g_pWorkDir2
$LN9@setWorking:

; 135  : 	g_pWorkDir2 = new TCHAR[nLen + 1];

  00049	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 136  : 	_tcscpy(g_pWorkDir2, g_pWorkDir);

  00052	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00058	83 c4 04	 add	 esp, 4
  0005b	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir2@@3PADA, eax ; g_pWorkDir2
$LL10@setWorking:
  00060	8a 0a		 mov	 cl, BYTE PTR [edx]
  00062	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00065	88 08		 mov	 BYTE PTR [eax], cl
  00067	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0006a	84 c9		 test	 cl, cl
  0006c	75 f2		 jne	 SHORT $LL10@setWorking

; 137  : 
; 138  : 	int i;
; 139  : 	for (i = 0; i < upCount; i++) 

  0006e	8b 75 08	 mov	 esi, DWORD PTR _upCount$[ebp]
  00071	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp___mbsrchr
  00077	85 f6		 test	 esi, esi
  00079	7e 1a		 jle	 SHORT $LN3@setWorking
  0007b	0f 1f 44 00 00	 npad	 5
$LL4@setWorking:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00080	6a 5c		 push	 92			; 0000005cH
  00082	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  00088	ff d7		 call	 edi
  0008a	83 c4 08	 add	 esp, 8
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 142  : 		*pRear = 0;

  0008d	c6 00 00	 mov	 BYTE PTR [eax], 0
  00090	83 ee 01	 sub	 esi, 1
  00093	75 eb		 jne	 SHORT $LL4@setWorking
$LN3@setWorking:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00095	6a 5c		 push	 92			; 0000005cH
  00097	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  0009d	ff d7		 call	 edi
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 145  : 	nLen = pRear - g_pWorkDir2 + 1;

  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
  000a5	8b f0		 mov	 esi, eax
  000a7	2b f1		 sub	 esi, ecx
  000a9	46		 inc	 esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  000aa	56		 push	 esi
  000ab	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  000b1	51		 push	 ecx
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___mbsnbcpy
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 147  : 	_tcsncpy(g_pWorkDir2, g_pWorkDir, nLen); g_pWorkDir2[nLen] = 0;

  000b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir2@@3PADA ; g_pWorkDir2
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  000bd	83 c4 14	 add	 esp, 20			; 00000014H
; File e:\infinia-library-3.0\com\src\comenv.cpp

; 147  : 	_tcsncpy(g_pWorkDir2, g_pWorkDir, nLen); g_pWorkDir2[nLen] = 0;

  000c0	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 148  : 	return true;

  000c4	b0 01		 mov	 al, 1
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi

; 149  : }

  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
?setWorkingDir2@CEnv@@SA_NH@Z ENDP			; CEnv::setWorkingDir2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?setWorkingDir@CEnv@@SA_NPAD@Z
_TEXT	SEGMENT
_pPullPath$ = 8						; size = 4
?setWorkingDir@CEnv@@SA_NPAD@Z PROC			; CEnv::setWorkingDir, COMDAT

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 111  : 	if (pPullPath) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _pPullPath$[ebp]
  00007	57		 push	 edi
  00008	85 f6		 test	 esi, esi
  0000a	74 6a		 je	 SHORT $LN2@setWorking

; 112  : 		size_t	nLen = (int)_tcslen(pPullPath);

  0000c	8b fe		 mov	 edi, esi
  0000e	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
$LL13@setWorking:
  00011	8a 07		 mov	 al, BYTE PTR [edi]
  00013	47		 inc	 edi
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL13@setWorking
  00018	2b f9		 sub	 edi, ecx

; 113  : 		if (!nLen) return false;

  0001a	75 06		 jne	 SHORT $LN3@setWorking
$LN15@setWorking:
  0001c	5f		 pop	 edi
  0001d	32 c0		 xor	 al, al
  0001f	5e		 pop	 esi

; 125  : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN3@setWorking:
  00022	53		 push	 ebx

; 114  : 		if (g_pWorkDir) {

  00023	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00029	85 db		 test	 ebx, ebx
  0002b	74 1d		 je	 SHORT $LN8@setWorking

; 115  : 			delete[] g_pWorkDir;

  0002d	53		 push	 ebx
  0002e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00033	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00038	83 c4 04	 add	 esp, 4
  0003b	85 db		 test	 ebx, ebx
  0003d	b9 23 81 00 00	 mov	 ecx, 33059		; 00008123H
  00042	0f 45 c1	 cmovne	 eax, ecx
  00045	a3 00 00 00 00	 mov	 DWORD PTR ?g_pWorkDir@@3PADA, eax ; g_pWorkDir
$LN8@setWorking:

; 116  : 		}
; 117  : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen + 2];

  0004a	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  0004d	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  00058	83 c4 08	 add	 esp, 8
  0005b	8b c8		 mov	 ecx, eax
  0005d	89 0d 00 00 00
	00		 mov	 DWORD PTR ?g_pWorkDir@@3PADA, ecx ; g_pWorkDir
  00063	5b		 pop	 ebx

; 118  : 
; 119  : 		if (g_pWorkDir == NULL) return false;

  00064	85 c9		 test	 ecx, ecx
  00066	74 b4		 je	 SHORT $LN15@setWorking
$LL5@setWorking:

; 120  : 
; 121  : 		_tcscpy(g_pWorkDir, pPullPath);

  00068	8a 06		 mov	 al, BYTE PTR [esi]
  0006a	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0006d	88 01		 mov	 BYTE PTR [ecx], al
  0006f	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00072	84 c0		 test	 al, al
  00074	75 f2		 jne	 SHORT $LL5@setWorking
$LN2@setWorking:
  00076	5f		 pop	 edi

; 122  : 	}
; 123  : 
; 124  : 	return true;

  00077	b0 01		 mov	 al, 1
  00079	5e		 pop	 esi

; 125  : }

  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?setWorkingDir@CEnv@@SA_NPAD@Z ENDP			; CEnv::setWorkingDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?FullName@CEnv@@SAHPBDPAPAD@Z
_TEXT	SEGMENT
_fName$ = 8						; size = 4
_fPath$ = 12						; size = 4
?FullName@CEnv@@SAHPBDPAPAD@Z PROC			; CEnv::FullName, COMDAT

; 22   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 23   : 	*fPath = NULL;

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _fPath$[ebp]
  00008	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 24   : 	int	nLen;
; 25   : 
; 26   : 	nLen = (int)_tcslen(g_pWorkDir) + (int)_tcslen(fName) + 1;

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00014	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL4@FullName:
  00017	8a 01		 mov	 al, BYTE PTR [ecx]
  00019	41		 inc	 ecx
  0001a	84 c0		 test	 al, al
  0001c	75 f9		 jne	 SHORT $LL4@FullName
  0001e	2b ca		 sub	 ecx, edx
  00020	8b 55 08	 mov	 edx, DWORD PTR _fName$[ebp]
  00023	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
$LL5@FullName:
  00026	8a 02		 mov	 al, BYTE PTR [edx]
  00028	42		 inc	 edx
  00029	84 c0		 test	 al, al
  0002b	75 f9		 jne	 SHORT $LL5@FullName
  0002d	2b d6		 sub	 edx, esi
  0002f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  00032	03 f2		 add	 esi, edx

; 27   : 	*fPath = new (std::nothrow) TCHAR[nLen];

  00034	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ??_U@YAPAXIABUnothrow_t@std@@@Z ; operator new[]
  0003f	83 c4 08	 add	 esp, 8
  00042	89 07		 mov	 DWORD PTR [edi], eax

; 28   : 
; 29   : 	if (*fPath) {

  00044	85 c0		 test	 eax, eax
  00046	74 16		 je	 SHORT $LN6@FullName

; 30   : 		nLen = _stprintf(*fPath, g_pWorkDir, fName);

  00048	ff 75 08	 push	 DWORD PTR _fName$[ebp]
  0004b	ff 35 00 00 00
	00		 push	 DWORD PTR ?g_pWorkDir@@3PADA ; g_pWorkDir
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 _sprintf
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 33   : }

  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN6@FullName:
  0005e	5f		 pop	 edi

; 31   : 	}
; 32   : 	return nLen;

  0005f	8b c6		 mov	 eax, esi
  00061	5e		 pop	 esi

; 33   : }

  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
?FullName@CEnv@@SAHPBDPAPAD@Z ENDP			; CEnv::FullName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1776 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00006	8d 4d 10	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00009	51		 push	 ecx
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000f	6a ff		 push	 -1
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);
; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);
; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1455 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	6a ff		 push	 -1
  0000e	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00011	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00016	8b 08		 mov	 ecx, DWORD PTR [eax]
  00018	ff 70 04	 push	 DWORD PTR [eax+4]
  0001b	83 c9 01	 or	 ecx, 1
  0001e	51		 push	 ecx
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 1459 :     #pragma warning(pop)
; 1460 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1385 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00003	ff 75 18	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 14	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00026	83 c9 ff	 or	 ecx, -1
  00029	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002c	85 c0		 test	 eax, eax
  0002e	0f 48 c1	 cmovs	 eax, ecx

; 1391 : }

  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);
; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00012	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001f	ff 70 04	 push	 DWORD PTR [eax+4]
  00022	ff 30		 push	 DWORD PTR [eax]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	5e		 pop	 esi

; 955  :     __crt_va_end(_ArgList);
; 956  :     return _Result;
; 957  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPADPADI@Z
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 4
?_tcsrchr@@YAPADPADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___mbsrchr
?_tcsrchr@@YAPADPADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsrchr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___mbsrchr
__tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1546 : #pragma warning(pop)
; 1547 : }

  00003	5d		 pop	 ebp

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___mbsnbcpy
__tcsncpy ENDP
_TEXT	ENDS
END
