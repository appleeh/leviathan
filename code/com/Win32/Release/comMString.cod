; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comMString.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??0CmString@@QAE@XZ				; CmString::CmString
PUBLIC	??0CmString@@QAE@PBD@Z				; CmString::CmString
PUBLIC	??0CmString@@QAE@H@Z				; CmString::CmString
PUBLIC	??0CmString@@QAE@ABV0@@Z			; CmString::CmString
PUBLIC	??0CmString@@QAE@PBV0@@Z			; CmString::CmString
PUBLIC	??1CmString@@QAE@XZ				; CmString::~CmString
PUBLIC	??8CmString@@QAE_NPBD@Z				; CmString::operator==
PUBLIC	??4CmString@@QAEAAV0@PBD@Z			; CmString::operator=
PUBLIC	?append@CmString@@QAEAAV1@PBD@Z			; CmString::append
PUBLIC	?replace@CmString@@QAEAAV1@HHPBD@Z		; CmString::replace
PUBLIC	?reserve@CmString@@QAEXH@Z			; CmString::reserve
PUBLIC	?find@CmString@@QAEPADPBDH@Z			; CmString::find
PUBLIC	?find_next@CmString@@QAEPADPBDH@Z		; CmString::find_next
PUBLIC	?compare@CmString@@QAEHPBD@Z			; CmString::compare
PUBLIC	?compare@CmString@@QAEHHHPBD@Z			; CmString::compare
PUBLIC	??0CStringList@@QAE@XZ				; CStringList::CStringList
PUBLIC	??1CStringList@@QAE@XZ				; CStringList::~CStringList
PUBLIC	?del@CStringList@@QAE_NPAVCmString@@@Z		; CStringList::del
PUBLIC	?del@CStringList@@QAE_NH@Z			; CStringList::del
PUBLIC	?__alloc@CStringList@@AAEHH@Z			; CStringList::__alloc
PUBLIC	?_DEL@CStringList@@AAEXH@Z			; CStringList::_DEL
PUBLIC	?__add@CStringList@@AAEPAVCmString@@PADH@Z	; CStringList::__add
PUBLIC	?newIdx@CStringList@@AAEHXZ			; CStringList::newIdx
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___std_terminate:PROC
EXTRN	__imp___mbsnbcpy:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	?delBufByIndex@CMemManager@@QAEXPADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__newBuf@CMemManager@@AAEPADHI@Z:PROC		; CMemManager::__newBuf
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?g_nSizeList@@3QBHB:BYTE			; g_nSizeList
EXTRN	?gs_pMMgr@@3PAVCMemManager@@A:DWORD		; gs_pMMgr
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__add@CStringList@@AAEPAVCmString@@PADH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__add@CStringList@@AAEPAVCmString@@PADH@Z$0
__ehfuncinfo$?__add@CStringList@@AAEPAVCmString@@PADH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?__add@CStringList@@AAEPAVCmString@@PADH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_DEL@CStringList@@AAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_DEL@CStringList@@AAEXH@Z$1
__ehfuncinfo$?_DEL@CStringList@@AAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_DEL@CStringList@@AAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?del@CStringList@@QAE_NPAVCmString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?del@CStringList@@QAE_NPAVCmString@@@Z$1
__ehfuncinfo$?del@CStringList@@QAE_NPAVCmString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?del@CStringList@@QAE_NPAVCmString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CStringList@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CStringList@@QAE@XZ$1
__ehfuncinfo$??1CStringList@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CStringList@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_GCmString@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??_GCmString@@QAEPAXI@Z$0
__ehfuncinfo$??_GCmString@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??_GCmString@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CmString@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?newIdx@CStringList@@AAEHXZ
_TEXT	SEGMENT
?newIdx@CStringList@@AAEHXZ PROC			; CStringList::newIdx, COMDAT
; _this$ = ecx

; 252  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 253  : 	int nIdx = m_nLast, i;
; 254  : 	for (i = 0; i < m_nListCnt; i++)

  00004	33 d2		 xor	 edx, edx
  00006	57		 push	 edi
  00007	8b 3e		 mov	 edi, DWORD PTR [esi]
  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	85 ff		 test	 edi, edi
  0000e	7e 18		 jle	 SHORT $LN3@newIdx

; 255  : 	{
; 256  : 		if (nIdx >= m_nListCnt) nIdx = 0;
; 257  : 		if (!m_pList[nIdx]) {

  00010	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
$LL4@newIdx:
  00013	33 c0		 xor	 eax, eax
  00015	3b cf		 cmp	 ecx, edi
  00017	0f 4c c1	 cmovl	 eax, ecx
  0001a	83 3c 83 00	 cmp	 DWORD PTR [ebx+eax*4], 0
  0001e	74 52		 je	 SHORT $LN1@newIdx

; 258  : 			return nIdx;
; 259  : 		}
; 260  : 		nIdx++;

  00020	42		 inc	 edx
  00021	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00024	3b d7		 cmp	 edx, edi
  00026	7c eb		 jl	 SHORT $LL4@newIdx
$LN3@newIdx:

; 261  : 	}
; 262  : 	// realloc
; 263  : 	if (!__alloc(m_nListCnt + UNIT_ADD_SIZE)) {

  00028	8d 5f 20	 lea	 ebx, DWORD PTR [edi+32]

; 224  : 	CmString** pList = (CmString**)calloc(nMaxCount, sizeof(CmString*));

  0002b	6a 04		 push	 4
  0002d	53		 push	 ebx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00034	8b f8		 mov	 edi, eax
  00036	83 c4 08	 add	 esp, 8

; 225  : 	if (!pList) {

  00039	85 ff		 test	 edi, edi
  0003b	74 32		 je	 SHORT $LN18@newIdx

; 226  : 		return 0;
; 227  : 	}
; 228  : 
; 229  : 	if (m_pList) {

  0003d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00040	85 c0		 test	 eax, eax
  00042	74 19		 je	 SHORT $LN11@newIdx

; 230  : 		memcpy(pList, m_pList, m_nListCnt * sizeof(CmString*));

  00044	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00046	c1 e1 02	 shl	 ecx, 2
  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 _memcpy

; 231  : 		free(m_pList);

  00051	ff 76 10	 push	 DWORD PTR [esi+16]
  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@newIdx:

; 232  : 	}
; 233  : 	m_pList = pList;

  0005d	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 261  : 	}
; 262  : 	// realloc
; 263  : 	if (!__alloc(m_nListCnt + UNIT_ADD_SIZE)) {

  00060	85 db		 test	 ebx, ebx
  00062	74 0b		 je	 SHORT $LN18@newIdx

; 265  : 	}
; 266  : 	nIdx = m_nListCnt;

  00064	8b 06		 mov	 eax, DWORD PTR [esi]
  00066	5f		 pop	 edi

; 267  : 	m_nListCnt += UNIT_ADD_SIZE;

  00067	8d 48 20	 lea	 ecx, DWORD PTR [eax+32]
  0006a	89 0e		 mov	 DWORD PTR [esi], ecx
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx

; 268  : 	return nIdx;
; 269  : }

  0006e	c3		 ret	 0
$LN18@newIdx:

; 264  : 		return -1;

  0006f	83 c8 ff	 or	 eax, -1
$LN1@newIdx:
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx

; 268  : 	return nIdx;
; 269  : }

  00075	c3		 ret	 0
?newIdx@CStringList@@AAEHXZ ENDP			; CStringList::newIdx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?__add@CStringList@@AAEPAVCmString@@PADH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_pString$ = 8						; size = 4
$T2 = 12						; size = 4
_nIdx$ = 12						; size = 4
?__add@CStringList@@AAEPAVCmString@@PADH@Z PROC		; CStringList::__add, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__add@CStringList@@AAEPAVCmString@@PADH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 243  : 	if (0 > nIdx) return NULL;

  00026	8b 7d 0c	 mov	 edi, DWORD PTR _nIdx$[ebp]
  00029	85 ff		 test	 edi, edi
  0002b	79 15		 jns	 SHORT $LN2@add
  0002d	33 c0		 xor	 eax, eax

; 249  : }

  0002f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00032	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00039	59		 pop	 ecx
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 08 00	 ret	 8
$LN2@add:

; 244  : 	CmString *pNewString = new CmString(pString);

  00042	6a 08		 push	 8
  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00049	83 c4 04	 add	 esp, 4
  0004c	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  0004f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00056	85 c0		 test	 eax, eax
  00058	74 15		 je	 SHORT $LN4@add
  0005a	ff 75 08	 push	 DWORD PTR _pString$[ebp]
  0005d	0f 57 c0	 xorps	 xmm0, xmm0
  00060	8b c8		 mov	 ecx, eax
  00062	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00066	e8 00 00 00 00	 call	 ??0CmString@@QAE@PBD@Z	; CmString::CmString
  0006b	8b c8		 mov	 ecx, eax
  0006d	eb 02		 jmp	 SHORT $LN5@add
$LN4@add:
  0006f	33 c9		 xor	 ecx, ecx
$LN5@add:

; 245  : 	m_pList[nIdx] = pNewString;

  00071	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00074	89 0c b8	 mov	 DWORD PTR [eax+edi*4], ecx

; 246  : 	m_nLast = nIdx + 1;

  00077	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 247  : 	m_nUseCnt++;

  0007a	ff 46 04	 inc	 DWORD PTR [esi+4]
  0007d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 248  : 	return pNewString;

  00080	8b c1		 mov	 eax, ecx

; 249  : }

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__add@CStringList@@AAEPAVCmString@@PADH@Z$0:
  00000	6a 08		 push	 8
  00002	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__ehhandler$?__add@CStringList@@AAEPAVCmString@@PADH@Z:
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__add@CStringList@@AAEPAVCmString@@PADH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__add@CStringList@@AAEPAVCmString@@PADH@Z ENDP		; CStringList::__add
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commstring.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?_DEL@CStringList@@AAEXH@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_i$ = 8							; size = 4
?_DEL@CStringList@@AAEXH@Z PROC				; CStringList::_DEL, COMDAT
; _this$ = ecx

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_DEL@CStringList@@AAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	8b 5d 08	 mov	 ebx, DWORD PTR _i$[ebp]
  0002a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002d	8b 34 98	 mov	 esi, DWORD PTR [eax+ebx*4]
  00030	85 f6		 test	 esi, esi
  00032	74 44		 je	 SHORT $LN2@DEL
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 42   : 	if (m_pValue) {

  00034	8b 06		 mov	 eax, DWORD PTR [esi]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	85 c0		 test	 eax, eax
  0003f	74 1c		 je	 SHORT $LN11@DEL

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00041	ff 76 04	 push	 DWORD PTR [esi+4]
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 45   : 		m_nSftIdx = 0;

  00056	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN11@DEL:
  0005d	6a 08		 push	 8
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File e:\infinia-library-3.0\com\include\commstring.h

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

  00065	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00068	83 c4 08	 add	 esp, 8
  0006b	c7 04 98 00 00
	00 00		 mov	 DWORD PTR [eax+ebx*4], 0
  00072	ff 4f 04	 dec	 DWORD PTR [edi+4]
  00075	89 5f 0c	 mov	 DWORD PTR [edi+12], ebx
$LN2@DEL:
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_DEL@CStringList@@AAEXH@Z$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?_DEL@CStringList@@AAEXH@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_DEL@CStringList@@AAEXH@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_DEL@CStringList@@AAEXH@Z ENDP				; CStringList::_DEL
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?__alloc@CStringList@@AAEHH@Z
_TEXT	SEGMENT
_nMaxCount$ = 8						; size = 4
?__alloc@CStringList@@AAEHH@Z PROC			; CStringList::__alloc, COMDAT
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 224  : 	CmString** pList = (CmString**)calloc(nMaxCount, sizeof(CmString*));

  00005	6a 04		 push	 4
  00007	ff 75 08	 push	 DWORD PTR _nMaxCount$[ebp]
  0000a	8b f1		 mov	 esi, ecx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00012	8b f8		 mov	 edi, eax
  00014	83 c4 08	 add	 esp, 8

; 225  : 	if (!pList) {

  00017	85 ff		 test	 edi, edi
  00019	75 06		 jne	 SHORT $LN2@alloc
  0001b	5f		 pop	 edi
  0001c	5e		 pop	 esi

; 235  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@alloc:

; 226  : 		return 0;
; 227  : 	}
; 228  : 
; 229  : 	if (m_pList) {

  00021	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00024	85 c9		 test	 ecx, ecx
  00026	74 19		 je	 SHORT $LN3@alloc

; 230  : 		memcpy(pList, m_pList, m_nListCnt * sizeof(CmString*));

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
  0002a	c1 e0 02	 shl	 eax, 2
  0002d	50		 push	 eax
  0002e	51		 push	 ecx
  0002f	57		 push	 edi
  00030	e8 00 00 00 00	 call	 _memcpy

; 231  : 		free(m_pList);

  00035	ff 76 10	 push	 DWORD PTR [esi+16]
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0003e	83 c4 10	 add	 esp, 16			; 00000010H
$LN3@alloc:

; 232  : 	}
; 233  : 	m_pList = pList;
; 234  : 	return nMaxCount;

  00041	8b 45 08	 mov	 eax, DWORD PTR _nMaxCount$[ebp]
  00044	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 235  : }

  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
?__alloc@CStringList@@AAEHH@Z ENDP			; CStringList::__alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\comtypes.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?del@CStringList@@QAE_NH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?del@CStringList@@QAE_NH@Z PROC				; CStringList::del, COMDAT
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File e:\infinia-library-3.0\com\include\comtypes.h

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 10		 js	 SHORT $LN5@del
  0000a	3b 01		 cmp	 eax, DWORD PTR [ecx]
  0000c	7d 0c		 jge	 SHORT $LN5@del
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 291  : 	_DEL(i);

  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AAEXH@Z ; CStringList::_DEL

; 292  : 	return true;

  00014	b0 01		 mov	 al, 1

; 293  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN5@del:

; 287  : 	if (!ISINCLUDE(i, m_nListCnt)) {
; 288  : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 289  : 		return false;

  0001a	32 c0		 xor	 al, al

; 293  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?del@CStringList@@QAE_NH@Z ENDP				; CStringList::del
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commstring.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commstring.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?del@CStringList@@QAE_NPAVCmString@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?del@CStringList@@QAE_NPAVCmString@@@Z PROC		; CStringList::del, COMDAT
; _this$ = ecx

; 273  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?del@CStringList@@QAE_NPAVCmString@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 274  : 	int i;
; 275  : 	for (i = 0; i < m_nListCnt; i++) {

  00027	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00029	33 f6		 xor	 esi, esi
  0002b	85 c9		 test	 ecx, ecx
  0002d	7e 14		 jle	 SHORT $LN3@del

; 276  : 		if (m_pList[i] == p) {

  0002f	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00032	8b c3		 mov	 eax, ebx
  00034	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
$LL4@del:
  00037	39 10		 cmp	 DWORD PTR [eax], edx
  00039	74 1e		 je	 SHORT $LN21@del

; 274  : 	int i;
; 275  : 	for (i = 0; i < m_nListCnt; i++) {

  0003b	46		 inc	 esi
  0003c	83 c0 04	 add	 eax, 4
  0003f	3b f1		 cmp	 esi, ecx
  00041	7c f4		 jl	 SHORT $LL4@del
$LN3@del:

; 279  : 		}
; 280  : 	}
; 281  : 	//gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 282  : 	return false;

  00043	32 c0		 xor	 al, al

; 283  : }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN21@del:
; File e:\infinia-library-3.0\com\include\commstring.h

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

  00059	8b 1c b3	 mov	 ebx, DWORD PTR [ebx+esi*4]
  0005c	85 db		 test	 ebx, ebx
  0005e	74 44		 je	 SHORT $LN8@del
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 42   : 	if (m_pValue) {

  00060	8b 03		 mov	 eax, DWORD PTR [ebx]
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00069	85 c0		 test	 eax, eax
  0006b	74 1c		 je	 SHORT $LN17@del

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0006d	ff 73 04	 push	 DWORD PTR [ebx+4]
  00070	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  0007c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 45   : 		m_nSftIdx = 0;

  00082	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
$LN17@del:
  00089	6a 08		 push	 8
  0008b	53		 push	 ebx
  0008c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File e:\infinia-library-3.0\com\include\commstring.h

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

  00091	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00094	83 c4 08	 add	 esp, 8
  00097	c7 04 b0 00 00
	00 00		 mov	 DWORD PTR [eax+esi*4], 0
  0009e	ff 4f 04	 dec	 DWORD PTR [edi+4]
  000a1	89 77 0c	 mov	 DWORD PTR [edi+12], esi
$LN8@del:
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 278  : 			return true;

  000a4	b0 01		 mov	 al, 1

; 283  : }

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?del@CStringList@@QAE_NPAVCmString@@@Z$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$?del@CStringList@@QAE_NPAVCmString@@@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?del@CStringList@@QAE_NPAVCmString@@@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?del@CStringList@@QAE_NPAVCmString@@@Z ENDP		; CStringList::del
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??1CStringList@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CStringList@@QAE@XZ PROC				; CStringList::~CStringList, COMDAT
; _this$ = ecx

; 209  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CStringList@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx

; 210  : 	if (!m_pList) return;

  00027	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0002b	74 73		 je	 SHORT $LN1@CStringLis

; 211  : 	int i;
; 212  : 	for (i = 0; i < m_nListCnt; i++) {

  0002d	33 db		 xor	 ebx, ebx
  0002f	39 1f		 cmp	 DWORD PTR [edi], ebx
  00031	7e 54		 jle	 SHORT $LN3@CStringLis
$LL4@CStringLis:

; 213  : 		if (m_pList[i]) {

  00033	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00036	8b 34 9e	 mov	 esi, DWORD PTR [esi+ebx*4]
  00039	85 f6		 test	 esi, esi
  0003b	74 45		 je	 SHORT $LN2@CStringLis

; 42   : 	if (m_pValue) {

  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00046	85 c0		 test	 eax, eax
  00048	74 1c		 je	 SHORT $LN15@CStringLis

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0004a	ff 76 04	 push	 DWORD PTR [esi+4]
  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  00059	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 45   : 		m_nSftIdx = 0;

  0005f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN15@CStringLis:
  00066	6a 08		 push	 8
  00068	56		 push	 esi

; 46   : 	}
; 47   : }

  00069	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00070	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 214  : 			delete m_pList[i];
; 215  : 			m_pList[i] = NULL;

  00075	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00078	83 c4 08	 add	 esp, 8
  0007b	c7 04 98 00 00
	00 00		 mov	 DWORD PTR [eax+ebx*4], 0
$LN2@CStringLis:

; 211  : 	int i;
; 212  : 	for (i = 0; i < m_nListCnt; i++) {

  00082	43		 inc	 ebx
  00083	3b 1f		 cmp	 ebx, DWORD PTR [edi]
  00085	7c ac		 jl	 SHORT $LL4@CStringLis
$LN3@CStringLis:

; 216  : 		}
; 217  : 	}
; 218  : 	free(m_pList);

  00087	ff 77 10	 push	 DWORD PTR [edi+16]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00090	83 c4 04	 add	 esp, 4

; 219  : 	m_pList = NULL;

  00093	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 220  : 	m_nListCnt = 0;

  0009a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN1@CStringLis:

; 221  : }

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5f		 pop	 edi
  000ac	5e		 pop	 esi
  000ad	5b		 pop	 ebx
  000ae	8b e5		 mov	 esp, ebp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CStringList@@QAE@XZ$1:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??1CStringList@@QAE@XZ:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CStringList@@QAE@XZ
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CStringList@@QAE@XZ ENDP				; CStringList::~CStringList
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CStringList@@QAE@XZ
_TEXT	SEGMENT
??0CStringList@@QAE@XZ PROC				; CStringList::CStringList, COMDAT
; _this$ = ecx

; 205  : 	m_nListCnt = 0; m_nLast = 0; m_nDelIdx = 0; m_pList = NULL; m_nUseCnt = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 206  : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  00016	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00024	c3		 ret	 0
??0CStringList@@QAE@XZ ENDP				; CStringList::CStringList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??_GCmString@@QAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_GCmString@@QAEPAXI@Z PROC				; CmString::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_GCmString@@QAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 42   : 	if (m_pValue) {

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002e	85 c0		 test	 eax, eax
  00030	74 1c		 je	 SHORT $LN5@scalar

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00032	ff 76 04	 push	 DWORD PTR [esi+4]
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 45   : 		m_nSftIdx = 0;

  00047	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN5@scalar:
  0004e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00052	74 0b		 je	 SHORT $LN8@scalar
  00054	6a 08		 push	 8
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
$LN8@scalar:
  0005f	8b c6		 mov	 eax, esi
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5e		 pop	 esi
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??_GCmString@@QAEPAXI@Z$0:
  00000	e8 00 00 00 00	 call	 ___std_terminate
  00005	c3		 ret	 0
__ehhandler$??_GCmString@@QAEPAXI@Z:
  00006	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00010	33 c8		 xor	 ecx, eax
  00012	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00017	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_GCmString@@QAEPAXI@Z
  0001c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_GCmString@@QAEPAXI@Z ENDP				; CmString::`scalar deleting destructor'
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@CmString@@QAEXI@Z
_TEXT	SEGMENT
_classSize$ = 8						; size = 4
?__autoclassinit2@CmString@@QAEXI@Z PROC		; CmString::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	ff 75 08	 push	 DWORD PTR _classSize$[ebp]
  00006	6a 00		 push	 0
  00008	51		 push	 ecx
  00009	e8 00 00 00 00	 call	 _memset
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?__autoclassinit2@CmString@@QAEXI@Z ENDP		; CmString::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?compare@CmString@@QAEHHHPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_index$ = 8						; size = 4
_len$ = 12						; size = 4
_str$ = 16						; size = 4
?compare@CmString@@QAEHHHPBD@Z PROC			; CmString::compare, COMDAT
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 190  : 	int i, idx=index, nLen = (int)_tcslen(str);

  00005	8b 5d 10	 mov	 ebx, DWORD PTR _str$[ebp]
  00008	8b d3		 mov	 edx, ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  0000e	57		 push	 edi
  0000f	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  00012	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
$LL15@compare:
  00015	8a 02		 mov	 al, BYTE PTR [edx]
  00017	42		 inc	 edx
  00018	84 c0		 test	 al, al
  0001a	75 f9		 jne	 SHORT $LL15@compare
  0001c	2b d7		 sub	 edx, edi

; 191  : 	if (nLen < len)  len = nLen;

  0001e	8b 7d 0c	 mov	 edi, DWORD PTR _len$[ebp]
  00021	3b d7		 cmp	 edx, edi
  00023	0f 4c fa	 cmovl	 edi, edx

; 192  : 
; 193  : 	for (i = 0; i < len; i++) {

  00026	33 c0		 xor	 eax, eax
  00028	85 ff		 test	 edi, edi
  0002a	7e 12		 jle	 SHORT $LN3@compare

; 194  : 		if (m_pValue[idx] != str[i]) {

  0002c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002e	03 d6		 add	 edx, esi
$LL4@compare:
  00030	8a 0c 02	 mov	 cl, BYTE PTR [edx+eax]
  00033	3a 0c 18	 cmp	 cl, BYTE PTR [eax+ebx]
  00036	75 11		 jne	 SHORT $LN11@compare

; 196  : 			else return -1;
; 197  : 		}
; 198  : 		idx++;

  00038	40		 inc	 eax
  00039	46		 inc	 esi
  0003a	3b c7		 cmp	 eax, edi
  0003c	7c f2		 jl	 SHORT $LL4@compare
$LN3@compare:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 199  : 	}
; 200  : 	return 0;

  00040	33 c0		 xor	 eax, eax
  00042	5b		 pop	 ebx

; 201  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
$LN11@compare:

; 195  : 			if (m_pValue[idx] > str[i]) return 1;

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	5f		 pop	 edi
  0004d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0004f	33 d2		 xor	 edx, edx
  00051	8a 0c 31	 mov	 cl, BYTE PTR [ecx+esi]
  00054	3a 0c 18	 cmp	 cl, BYTE PTR [eax+ebx]
  00057	5e		 pop	 esi
  00058	0f 9f c2	 setg	 dl
  0005b	5b		 pop	 ebx
  0005c	8d 04 55 ff ff
	ff ff		 lea	 eax, DWORD PTR [edx*2-1]

; 201  : }

  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 0c 00	 ret	 12			; 0000000cH
?compare@CmString@@QAEHHHPBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?compare@CmString@@QAEHPBD@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_str$ = 8						; size = 4
?compare@CmString@@QAEHPBD@Z PROC			; CmString::compare, COMDAT
; _this$ = ecx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 176  : 	size_t nLen = _tcslen(str),i, orignLen = _tcslen(m_pValue);

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _str$[ebp]
  00008	8b d3		 mov	 edx, ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000f	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
$LL15@compare:
  00012	8a 02		 mov	 al, BYTE PTR [edx]
  00014	42		 inc	 edx
  00015	84 c0		 test	 al, al
  00017	75 f9		 jne	 SHORT $LL15@compare
  00019	8b 39		 mov	 edi, DWORD PTR [ecx]
  0001b	2b d6		 sub	 edx, esi
  0001d	8b cf		 mov	 ecx, edi
  0001f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL16@compare:
  00022	8a 01		 mov	 al, BYTE PTR [ecx]
  00024	41		 inc	 ecx
  00025	84 c0		 test	 al, al
  00027	75 f9		 jne	 SHORT $LL16@compare
  00029	2b ce		 sub	 ecx, esi

; 177  : 	if (nLen > orignLen)  nLen = orignLen;

  0002b	3b d1		 cmp	 edx, ecx
  0002d	0f 47 d1	 cmova	 edx, ecx

; 178  : 
; 179  : 	for (i = 0; i < nLen; i++) {

  00030	33 f6		 xor	 esi, esi
  00032	85 d2		 test	 edx, edx
  00034	74 17		 je	 SHORT $LN3@compare

; 180  : 		if (m_pValue[i] != str[i]) {

  00036	8b cb		 mov	 ecx, ebx
  00038	2b fb		 sub	 edi, ebx
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL4@compare:
  00040	8a 04 0f	 mov	 al, BYTE PTR [edi+ecx]
  00043	3a 01		 cmp	 al, BYTE PTR [ecx]
  00045	75 11		 jne	 SHORT $LN11@compare

; 178  : 
; 179  : 	for (i = 0; i < nLen; i++) {

  00047	46		 inc	 esi
  00048	41		 inc	 ecx
  00049	3b f2		 cmp	 esi, edx
  0004b	72 f3		 jb	 SHORT $LL4@compare
$LN3@compare:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 182  : 			else return -1;
; 183  : 		}
; 184  : 	}
; 185  : 	return 0;

  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx

; 186  : }

  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN11@compare:

; 181  : 			if (m_pValue[i] > str[i]) return 1;

  00058	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0005b	5f		 pop	 edi
  0005c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005e	8a 0c 30	 mov	 cl, BYTE PTR [eax+esi]
  00061	33 c0		 xor	 eax, eax
  00063	3a 0c 1e	 cmp	 cl, BYTE PTR [esi+ebx]
  00066	5e		 pop	 esi
  00067	0f 9f c0	 setg	 al
  0006a	5b		 pop	 ebx
  0006b	8d 04 45 ff ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-1]

; 186  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
?compare@CmString@@QAEHPBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?find_next@CmString@@QAEPADPBDH@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_index$ = 12						; size = 4
?find_next@CmString@@QAEPADPBDH@Z PROC			; CmString::find_next, COMDAT
; _this$ = ecx

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 133  : 	TCHAR *pPos = m_pValue+index;

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	03 4d 0c	 add	 ecx, DWORD PTR _index$[ebp]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 134  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0000b	8b 7d 08	 mov	 edi, DWORD PTR _str$[ebp]
  0000e	8b f7		 mov	 esi, edi
  00010	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL20@find_next:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL20@find_next
  0001a	2b f2		 sub	 esi, edx

; 135  : 	while (*pPos) {

  0001c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0001e	84 d2		 test	 dl, dl
  00020	74 27		 je	 SHORT $LN19@find_next
  00022	8a 1f		 mov	 bl, BYTE PTR [edi]
$LL2@find_next:

; 136  : 		while (*pPos == str[nIdx++]) {

  00024	33 c0		 xor	 eax, eax
  00026	3a d3		 cmp	 dl, bl
  00028	75 17		 jne	 SHORT $LN13@find_next
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@find_next:
  00030	40		 inc	 eax

; 137  : 			pPos++;

  00031	41		 inc	 ecx

; 138  : 			if (nIdx >= nLen) return pPos;

  00032	3b c6		 cmp	 eax, esi
  00034	7d 1c		 jge	 SHORT $LN11@find_next

; 139  : 			if (!*pPos) return NULL;

  00036	8a 11		 mov	 dl, BYTE PTR [ecx]
  00038	84 d2		 test	 dl, dl
  0003a	74 0d		 je	 SHORT $LN19@find_next

; 136  : 		while (*pPos == str[nIdx++]) {

  0003c	3a 14 38	 cmp	 dl, BYTE PTR [eax+edi]
  0003f	74 ef		 je	 SHORT $LL4@find_next
$LN13@find_next:

; 135  : 	while (*pPos) {

  00041	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]

; 140  : 		}
; 141  : 		nIdx = 0;
; 142  : 		pPos++;

  00044	41		 inc	 ecx
  00045	84 d2		 test	 dl, dl
  00047	75 db		 jne	 SHORT $LL2@find_next
$LN19@find_next:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 143  : 	}
; 144  : 
; 145  : 	return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	5b		 pop	 ebx

; 146  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN11@find_next:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 138  : 			if (nIdx >= nLen) return pPos;

  00054	8b c1		 mov	 eax, ecx
  00056	5b		 pop	 ebx

; 146  : }

  00057	5d		 pop	 ebp
  00058	c2 08 00	 ret	 8
?find_next@CmString@@QAEPADPBDH@Z ENDP			; CmString::find_next
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?find@CmString@@QAEPADPBDH@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_index$ = 12						; size = 4
?find@CmString@@QAEPADPBDH@Z PROC			; CmString::find, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  : 	TCHAR *pPos = m_pValue + index;

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	03 4d 0c	 add	 ecx, DWORD PTR _index$[ebp]
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	57		 push	 edi

; 151  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0000b	8b 7d 08	 mov	 edi, DWORD PTR _str$[ebp]
  0000e	8b f7		 mov	 esi, edi
  00010	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
$LL20@find:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL20@find
  0001a	2b f2		 sub	 esi, edx

; 152  : 	while (*pPos) {

  0001c	8a 11		 mov	 dl, BYTE PTR [ecx]
  0001e	84 d2		 test	 dl, dl
  00020	74 27		 je	 SHORT $LN19@find
  00022	8a 1f		 mov	 bl, BYTE PTR [edi]
$LL2@find:

; 153  : 		while (*pPos == str[nIdx++]) {

  00024	33 c0		 xor	 eax, eax
  00026	3a d3		 cmp	 dl, bl
  00028	75 17		 jne	 SHORT $LN13@find
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL4@find:
  00030	40		 inc	 eax

; 154  : 			pPos++;

  00031	41		 inc	 ecx

; 155  : 			if (nIdx >= nLen) return pPos-nLen;

  00032	3b c6		 cmp	 eax, esi
  00034	7d 1c		 jge	 SHORT $LN11@find

; 156  : 			if (!*pPos) return NULL;

  00036	8a 11		 mov	 dl, BYTE PTR [ecx]
  00038	84 d2		 test	 dl, dl
  0003a	74 0d		 je	 SHORT $LN19@find

; 153  : 		while (*pPos == str[nIdx++]) {

  0003c	3a 14 38	 cmp	 dl, BYTE PTR [eax+edi]
  0003f	74 ef		 je	 SHORT $LL4@find
$LN13@find:

; 152  : 	while (*pPos) {

  00041	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]

; 157  : 		}
; 158  : 		nIdx = 0;
; 159  : 		pPos++;

  00044	41		 inc	 ecx
  00045	84 d2		 test	 dl, dl
  00047	75 db		 jne	 SHORT $LL2@find
$LN19@find:
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi

; 160  : 	}
; 161  : 
; 162  : 	return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	5b		 pop	 ebx

; 163  : }

  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN11@find:
  00052	5f		 pop	 edi

; 155  : 			if (nIdx >= nLen) return pPos-nLen;

  00053	2b ce		 sub	 ecx, esi
  00055	5e		 pop	 esi
  00056	8b c1		 mov	 eax, ecx
  00058	5b		 pop	 ebx

; 163  : }

  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
?find@CmString@@QAEPADPBDH@Z ENDP			; CmString::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?reserve@CmString@@QAEXH@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_n$ = 8							; size = 4
?reserve@CmString@@QAEXH@Z PROC				; CmString::reserve, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 119  : 	if (getSizeByIndex(m_nSftIdx) > n) {

  0000a	8b 7d 08	 mov	 edi, DWORD PTR _n$[ebp]
; File e:\infinia-library-3.0\com\include\combufpool.h

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 119  : 	if (getSizeByIndex(m_nSftIdx) > n) {

  00010	39 3c 85 00 00
	00 00		 cmp	 DWORD PTR ?g_nSizeList@@3QBHB[eax*4], edi
  00017	7f 55		 jg	 SHORT $LN3@reserve

; 120  : 		return;
; 121  : 	}
; 122  : 	else {
; 123  : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  0001f	50		 push	 eax
  00020	ff 36		 push	 DWORD PTR [esi]
  00022	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
  00027	66 0f 6e c7	 movd	 xmm0, edi
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00034	6a 00		 push	 0
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00036	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _$S1$1[ebp+4]
  0003e	c1 fa 14	 sar	 edx, 20			; 00000014H
  00041	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  00047	8b ca		 mov	 ecx, edx
  00049	d3 e0		 shl	 eax, cl
  0004b	8b cf		 mov	 ecx, edi
  0004d	2b c8		 sub	 ecx, eax
  0004f	23 cf		 and	 ecx, edi
  00051	f7 d9		 neg	 ecx
  00053	1b c9		 sbb	 ecx, ecx
  00055	f7 d9		 neg	 ecx
  00057	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 124  : 		m_nSftIdx = getIndex(n);

  0005a	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 125  : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00069	89 06		 mov	 DWORD PTR [esi], eax

; 126  : 		m_pValue[0] = 0;

  0006b	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN3@reserve:
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi

; 127  : 	}
; 128  : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?reserve@CmString@@QAEXH@Z ENDP				; CmString::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?replace@CmString@@QAEAAV1@HHPBD@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_newBuf$1$ = -4						; size = 4
_index$ = 8						; size = 4
_len$ = 12						; size = 4
_str$ = 16						; size = 4
?replace@CmString@@QAEAAV1@HHPBD@Z PROC			; CmString::replace, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 100  : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00003	8b 55 10	 mov	 edx, DWORD PTR _str$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL16@replace:
  00011	8a 02		 mov	 al, BYTE PTR [edx]
  00013	42		 inc	 edx
  00014	84 c0		 test	 al, al
  00016	75 f9		 jne	 SHORT $LL16@replace
  00018	2b d1		 sub	 edx, ecx
  0001a	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0001f	90		 npad	 1
$LL17@replace:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL17@replace
  00027	2b ce		 sub	 ecx, esi
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00029	b8 01 00 00 00	 mov	 eax, 1
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 103  : 	int newIdx = getIndex(size + oSize - len + 1);

  0002e	2b 4d 0c	 sub	 ecx, DWORD PTR _len$[ebp]
  00031	41		 inc	 ecx
  00032	03 d1		 add	 edx, ecx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00034	8b da		 mov	 ebx, edx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00036	6a 00		 push	 0
  00038	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0003c	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00040	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00045	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$1[ebp+4]
  00048	c1 f9 14	 sar	 ecx, 20			; 00000014H
  0004b	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  00051	d3 e0		 shl	 eax, cl
  00053	2b d8		 sub	 ebx, eax
  00055	23 da		 and	 ebx, edx
  00057	f7 db		 neg	 ebx
  00059	1b db		 sbb	 ebx, ebx
  0005b	f7 db		 neg	 ebx
  0005d	03 d9		 add	 ebx, ecx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00065	53		 push	 ebx
  00066	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 106  : 	if (index) _tcsncpy(newBuf, m_pValue, index);

  0006b	8b 75 08	 mov	 esi, DWORD PTR _index$[ebp]
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___mbsnbcpy
  00074	89 45 fc	 mov	 DWORD PTR _newBuf$1$[ebp], eax
  00077	85 f6		 test	 esi, esi
  00079	74 12		 je	 SHORT $LN2@replace
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  0007b	56		 push	 esi
  0007c	ff 37		 push	 DWORD PTR [edi]
  0007e	50		 push	 eax
  0007f	ff d1		 call	 ecx
  00081	8b 45 fc	 mov	 eax, DWORD PTR _newBuf$1$[ebp]
  00084	83 c4 0c	 add	 esp, 12			; 0000000cH
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp___mbsnbcpy
$LN2@replace:
  0008d	ff 75 0c	 push	 DWORD PTR _len$[ebp]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 107  : 	_tcsncpy(newBuf + index, str, len);

  00090	03 f0		 add	 esi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00092	ff 75 10	 push	 DWORD PTR _str$[ebp]
  00095	56		 push	 esi
  00096	ff d1		 call	 ecx
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 108  : 	_tcscpy(newBuf + index + len, m_pValue + index + len);

  00098	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h

; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 108  : 	_tcscpy(newBuf + index + len, m_pValue + index + len);

  0009e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a0	03 4d 08	 add	 ecx, DWORD PTR _index$[ebp]
  000a3	03 c8		 add	 ecx, eax
  000a5	8d 14 06	 lea	 edx, DWORD PTR [esi+eax]
$LL4@replace:
  000a8	8a 01		 mov	 al, BYTE PTR [ecx]
  000aa	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  000ad	88 02		 mov	 BYTE PTR [edx], al
  000af	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  000b2	84 c0		 test	 al, al
  000b4	75 f2		 jne	 SHORT $LL4@replace

; 109  : 
; 110  : 	gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000b6	ff 77 04	 push	 DWORD PTR [edi+4]
  000b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000bf	ff 37		 push	 DWORD PTR [edi]
  000c1	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 111  : 	m_pValue = newBuf;

  000c6	8b 45 fc	 mov	 eax, DWORD PTR _newBuf$1$[ebp]
  000c9	89 07		 mov	 DWORD PTR [edi], eax

; 112  : 	m_nSftIdx = newIdx;
; 113  : 	return *this;

  000cb	8b c7		 mov	 eax, edi
  000cd	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx

; 114  : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
?replace@CmString@@QAEAAV1@HHPBD@Z ENDP			; CmString::replace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?append@CmString@@QAEAAV1@PBD@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_newIdx$1$ = -4						; size = 4
tv249 = 8						; size = 4
_s$1$ = 8						; size = 4
_newBuf$1$ = 8						; size = 4
_str$ = 8						; size = 4
?append@CmString@@QAEAAV1@PBD@Z PROC			; CmString::append, COMDAT
; _this$ = ecx

; 75   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 76   : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00008	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	8b d6		 mov	 edx, esi
  0000f	57		 push	 edi
  00010	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL23@append:
  00013	8a 02		 mov	 al, BYTE PTR [edx]
  00015	42		 inc	 edx
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL23@append
  0001a	2b d1		 sub	 edx, ecx
  0001c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0001e	8b f9		 mov	 edi, ecx
  00020	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00023	89 45 08	 mov	 DWORD PTR tv249[ebp], eax
$LL24@append:
  00026	8a 07		 mov	 al, BYTE PTR [edi]
  00028	47		 inc	 edi
  00029	84 c0		 test	 al, al
  0002b	75 f9		 jne	 SHORT $LL24@append
  0002d	2b 7d 08	 sub	 edi, DWORD PTR tv249[ebp]

; 79   : 	if (getSizeByIndex(m_nSftIdx) > size + oSize + 1) {

  00030	42		 inc	 edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

  00031	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 79   : 	if (getSizeByIndex(m_nSftIdx) > size + oSize + 1) {

  00034	03 d7		 add	 edx, edi
  00036	89 55 08	 mov	 DWORD PTR _s$1$[ebp], edx
  00039	39 14 85 00 00
	00 00		 cmp	 DWORD PTR ?g_nSizeList@@3QBHB[eax*4], edx
  00040	7e 1b		 jle	 SHORT $LN2@append

; 80   : 		_tcscpy(m_pValue + nOLen, str);

  00042	03 cf		 add	 ecx, edi
$LL5@append:
  00044	8a 06		 mov	 al, BYTE PTR [esi]
  00046	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00049	88 01		 mov	 BYTE PTR [ecx], al
  0004b	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0004e	84 c0		 test	 al, al
  00050	75 f2		 jne	 SHORT $LL5@append

; 90   : 
; 91   : 	}
; 92   : 
; 93   : 	return *this;

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	8b c3		 mov	 eax, ebx
  00056	5b		 pop	 ebx

; 94   : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
$LN2@append:
  0005d	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0006a	6a 00		 push	 0
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0006c	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00071	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$1[ebp+4]
  00074	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00077	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0007d	d3 e0		 shl	 eax, cl
  0007f	2b d0		 sub	 edx, eax
  00081	23 55 08	 and	 edx, DWORD PTR _s$1$[ebp]
  00084	f7 da		 neg	 edx
  00086	1b d2		 sbb	 edx, edx
  00088	f7 da		 neg	 edx
  0008a	03 d1		 add	 edx, ecx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00092	52		 push	 edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00093	89 55 fc	 mov	 DWORD PTR _newIdx$1$[ebp], edx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00096	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 85   : 		_tcscpy(newBuf, m_pValue);

  0009b	8b 13		 mov	 edx, DWORD PTR [ebx]
  0009d	89 45 08	 mov	 DWORD PTR _newBuf$1$[ebp], eax
$LL6@append:
  000a0	8a 0a		 mov	 cl, BYTE PTR [edx]
  000a2	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  000a5	88 08		 mov	 BYTE PTR [eax], cl
  000a7	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000aa	84 c9		 test	 cl, cl
  000ac	75 f2		 jne	 SHORT $LL6@append

; 86   : 		_tcscpy(newBuf + nOLen, str);

  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _newBuf$1$[ebp]
  000b1	03 cf		 add	 ecx, edi
  000b3	2b ce		 sub	 ecx, esi
$LL7@append:
  000b5	8a 06		 mov	 al, BYTE PTR [esi]
  000b7	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000ba	88 44 31 ff	 mov	 BYTE PTR [ecx+esi-1], al
  000be	84 c0		 test	 al, al
  000c0	75 f3		 jne	 SHORT $LL7@append

; 87   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000c2	ff 73 04	 push	 DWORD PTR [ebx+4]
  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000cb	ff 33		 push	 DWORD PTR [ebx]
  000cd	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 88   : 		m_pValue = newBuf;

  000d2	8b 45 08	 mov	 eax, DWORD PTR _newBuf$1$[ebp]
  000d5	89 03		 mov	 DWORD PTR [ebx], eax

; 89   : 		m_nSftIdx = newIdx;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _newIdx$1$[ebp]
  000da	5f		 pop	 edi
  000db	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 90   : 
; 91   : 	}
; 92   : 
; 93   : 	return *this;

  000de	8b c3		 mov	 eax, ebx
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx

; 94   : }

  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
?append@CmString@@QAEAAV1@PBD@Z ENDP			; CmString::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??4CmString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_$S1$2 = -8						; size = 8
_str$ = 8						; size = 4
??4CmString@@QAEAAV0@PBD@Z PROC				; CmString::operator=, COMDAT
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 53   : 	int size = STRING_SIZE(str);

  00008	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  0000b	8b d6		 mov	 edx, esi
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx
  00010	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL29@operator:
  00013	8a 02		 mov	 al, BYTE PTR [edx]
  00015	42		 inc	 edx
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL29@operator

; 54   : 
; 55   : 	if (m_nSftIdx) {

  0001a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001d	2b d1		 sub	 edx, ecx
  0001f	8d 5a 01	 lea	 ebx, DWORD PTR [edx+1]
  00022	85 c0		 test	 eax, eax
  00024	0f 84 8f 00 00
	00		 je	 $LN2@operator

; 56   : 		if (getSizeByIndex(m_nSftIdx) > size) {

  0002a	39 1c 85 00 00
	00 00		 cmp	 DWORD PTR ?g_nSizeList@@3QBHB[eax*4], ebx
  00031	7e 1b		 jle	 SHORT $LN4@operator

; 57   : 			_tcscpy(m_pValue, str);

  00033	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LL7@operator:
  00035	8a 06		 mov	 al, BYTE PTR [esi]
  00037	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  0003a	88 01		 mov	 BYTE PTR [ecx], al
  0003c	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  0003f	84 c0		 test	 al, al
  00041	75 f2		 jne	 SHORT $LL7@operator

; 70   : 	}	
; 71   : 	return *this;

  00043	8b c7		 mov	 eax, edi
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi
  00047	5b		 pop	 ebx

; 72   : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 04 00	 ret	 4
$LN4@operator:

; 58   : 		}
; 59   : 		else {
; 60   : 			gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00054	50		 push	 eax
  00055	ff 37		 push	 DWORD PTR [edi]
  00057	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
  0005c	66 0f 6e c3	 movd	 xmm0, ebx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00069	6a 00		 push	 0
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0006b	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$2[ebp], xmm0
  00070	8b 55 fc	 mov	 edx, DWORD PTR _$S1$2[ebp+4]
  00073	c1 fa 14	 sar	 edx, 20			; 00000014H
  00076	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  0007c	8b ca		 mov	 ecx, edx
  0007e	d3 e0		 shl	 eax, cl
  00080	8b cb		 mov	 ecx, ebx
  00082	2b c8		 sub	 ecx, eax
  00084	23 cb		 and	 ecx, ebx
  00086	f7 d9		 neg	 ecx
  00088	1b c9		 sbb	 ecx, ecx
  0008a	f7 d9		 neg	 ecx
  0008c	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 61   : 			m_nSftIdx = getIndex(size);

  0008f	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 62   : 			m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0009e	89 07		 mov	 DWORD PTR [edi], eax
$LL8@operator:

; 63   : 			_tcscpy(m_pValue, str);

  000a0	8a 0e		 mov	 cl, BYTE PTR [esi]
  000a2	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  000a5	88 08		 mov	 BYTE PTR [eax], cl
  000a7	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  000aa	84 c9		 test	 cl, cl
  000ac	75 f2		 jne	 SHORT $LL8@operator

; 70   : 	}	
; 71   : 	return *this;

  000ae	8b c7		 mov	 eax, edi
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx

; 72   : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
$LN2@operator:
  000b9	66 0f 6e c3	 movd	 xmm0, ebx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  000c6	6a 00		 push	 0
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  000c8	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  000cd	8b 55 fc	 mov	 edx, DWORD PTR _$S1$1[ebp+4]
  000d0	c1 fa 14	 sar	 edx, 20			; 00000014H
  000d3	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  000d9	8b ca		 mov	 ecx, edx
  000db	d3 e0		 shl	 eax, cl
  000dd	8b cb		 mov	 ecx, ebx
  000df	2b c8		 sub	 ecx, eax
  000e1	23 cb		 and	 ecx, ebx
  000e3	f7 d9		 neg	 ecx
  000e5	1b c9		 sbb	 ecx, ecx
  000e7	f7 d9		 neg	 ecx
  000e9	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 67   : 		m_nSftIdx = getIndex(size);

  000ec	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 68   : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  000fb	89 07		 mov	 DWORD PTR [edi], eax
  000fd	0f 1f 00	 npad	 3
$LL9@operator:

; 69   : 		_tcscpy(m_pValue, str);

  00100	8a 0e		 mov	 cl, BYTE PTR [esi]
  00102	8d 76 01	 lea	 esi, DWORD PTR [esi+1]
  00105	88 08		 mov	 BYTE PTR [eax], cl
  00107	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0010a	84 c9		 test	 cl, cl
  0010c	75 f2		 jne	 SHORT $LL9@operator

; 70   : 	}	
; 71   : 	return *this;

  0010e	8b c7		 mov	 eax, edi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx

; 72   : }

  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
??4CmString@@QAEAAV0@PBD@Z ENDP				; CmString::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??8CmString@@QAE_NPBD@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
??8CmString@@QAE_NPBD@Z PROC				; CmString::operator==, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 166  : 	size_t nLen = _tcslen(str), i, orignLen = _tcslen(m_pValue);

  00003	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  00006	8b d0		 mov	 edx, eax
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0000f	90		 npad	 1
$LL13@operator:
  00010	8a 0a		 mov	 cl, BYTE PTR [edx]
  00012	42		 inc	 edx
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL13@operator
  00017	8b 3f		 mov	 edi, DWORD PTR [edi]
  00019	2b d6		 sub	 edx, esi
  0001b	8b f7		 mov	 esi, edi
  0001d	53		 push	 ebx
  0001e	8d 5e 01	 lea	 ebx, DWORD PTR [esi+1]
$LL14@operator:
  00021	8a 0e		 mov	 cl, BYTE PTR [esi]
  00023	46		 inc	 esi
  00024	84 c9		 test	 cl, cl
  00026	75 f9		 jne	 SHORT $LL14@operator
  00028	2b f3		 sub	 esi, ebx
  0002a	5b		 pop	 ebx

; 167  : 	if (nLen != orignLen) return false;

  0002b	3b d6		 cmp	 edx, esi
  0002d	74 08		 je	 SHORT $LN5@operator
$LN9@operator:
  0002f	5f		 pop	 edi
  00030	32 c0		 xor	 al, al
  00032	5e		 pop	 esi

; 172  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
$LN5@operator:

; 168  : 	for (i = 0; i < nLen; i++) {

  00037	33 f6		 xor	 esi, esi
  00039	85 d2		 test	 edx, edx
  0003b	74 10		 je	 SHORT $LN3@operator
  0003d	2b f8		 sub	 edi, eax
  0003f	90		 npad	 1
$LL4@operator:

; 169  : 		if (m_pValue[i] != str[i]) return false;

  00040	8a 0c 07	 mov	 cl, BYTE PTR [edi+eax]
  00043	3a 08		 cmp	 cl, BYTE PTR [eax]
  00045	75 e8		 jne	 SHORT $LN9@operator

; 168  : 	for (i = 0; i < nLen; i++) {

  00047	46		 inc	 esi
  00048	40		 inc	 eax
  00049	3b f2		 cmp	 esi, edx
  0004b	72 f3		 jb	 SHORT $LL4@operator
$LN3@operator:
  0004d	5f		 pop	 edi

; 170  : 	}
; 171  : 	return true;

  0004e	b0 01		 mov	 al, 1
  00050	5e		 pop	 esi

; 172  : }

  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??8CmString@@QAE_NPBD@Z ENDP				; CmString::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?capacity_idx@CmString@@QBEHXZ
_TEXT	SEGMENT
?capacity_idx@CmString@@QBEHXZ PROC			; CmString::capacity_idx, COMDAT
; _this$ = ecx

; 37   : 	inline int capacity_idx() const {return m_nSftIdx;}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?capacity_idx@CmString@@QBEHXZ ENDP			; CmString::capacity_idx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?c_str@CmString@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@CmString@@QBEPBDXZ PROC				; CmString::c_str, COMDAT
; _this$ = ecx

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	c3		 ret	 0
?c_str@CmString@@QBEPBDXZ ENDP				; CmString::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??1CmString@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CmString@@QAE@XZ PROC				; CmString::~CmString, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CmString@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 42   : 	if (m_pValue) {

  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	85 c0		 test	 eax, eax
  00029	74 1c		 je	 SHORT $LN2@CmString

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex

; 44   : 		m_pValue = NULL;

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 45   : 		m_nSftIdx = 0;

  00040	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$LN2@CmString:

; 46   : 	}
; 47   : }

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CmString@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CmString@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CmString@@QAE@XZ ENDP				; CmString::~CmString
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commstring.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QAE@PBV0@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
??0CmString@@QAE@PBV0@@Z PROC				; CmString::CmString, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 35   : 	m_nSftIdx = str->capacity_idx();

  00004	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0000a	6a 00		 push	 0
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 35   : 	m_nSftIdx = str->capacity_idx();

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0000f	50		 push	 eax
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 35   : 	m_nSftIdx = str->capacity_idx();

  00010	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00019	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 36   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0001e	89 07		 mov	 DWORD PTR [edi], eax
; File e:\infinia-library-3.0\com\include\commstring.h

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

  00020	8b 16		 mov	 edx, DWORD PTR [esi]
$LL3@CmString:
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 37   : 	_tcscpy(m_pValue, str->c_str());

  00022	8a 0a		 mov	 cl, BYTE PTR [edx]
  00024	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00027	88 08		 mov	 BYTE PTR [eax], cl
  00029	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0002c	84 c9		 test	 cl, cl
  0002e	75 f2		 jne	 SHORT $LL3@CmString

; 38   : }

  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0CmString@@QAE@PBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commstring.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QAE@ABV0@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
??0CmString@@QAE@ABV0@@Z PROC				; CmString::CmString, COMDAT
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 28   : 	m_nSftIdx = str.capacity_idx();

  00004	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0000a	6a 00		 push	 0
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 28   : 	m_nSftIdx = str.capacity_idx();

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0000f	50		 push	 eax
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 28   : 	m_nSftIdx = str.capacity_idx();

  00010	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00013	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00019	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 29   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0001e	89 07		 mov	 DWORD PTR [edi], eax
; File e:\infinia-library-3.0\com\include\commstring.h

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

  00020	8b 16		 mov	 edx, DWORD PTR [esi]
$LL3@CmString:
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 30   : 	_tcscpy(m_pValue, str.c_str());

  00022	8a 0a		 mov	 cl, BYTE PTR [edx]
  00024	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  00027	88 08		 mov	 BYTE PTR [eax], cl
  00029	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0002c	84 c9		 test	 cl, cl
  0002e	75 f2		 jne	 SHORT $LL3@CmString

; 31   : }

  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
??0CmString@@QAE@ABV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QAE@H@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_size$ = 8						; size = 4
??0CmString@@QAE@H@Z PROC				; CmString::CmString, COMDAT
; _this$ = ecx

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00006	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 20   : {

  00010	8b f9		 mov	 edi, ecx
  00012	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00016	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  0001a	6a 00		 push	 0
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0001c	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00021	8b 75 fc	 mov	 esi, DWORD PTR _$S1$1[ebp+4]
  00024	c1 fe 14	 sar	 esi, 20			; 00000014H
  00027	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  0002d	8b ce		 mov	 ecx, esi
  0002f	d3 e0		 shl	 eax, cl
  00031	8b ca		 mov	 ecx, edx
  00033	2b c8		 sub	 ecx, eax
  00035	23 ca		 and	 ecx, edx
  00037	f7 d9		 neg	 ecx
  00039	1b c9		 sbb	 ecx, ecx
  0003b	f7 d9		 neg	 ecx
  0003d	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 21   : 	m_nSftIdx = getIndex(size);

  00040	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 22   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0004f	89 07		 mov	 DWORD PTR [edi], eax

; 23   : 	m_pValue[0] = 0;

  00051	c6 00 00	 mov	 BYTE PTR [eax], 0

; 24   : }

  00054	8b c7		 mov	 eax, edi
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
??0CmString@@QAE@H@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QAE@PBD@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_str$ = 8						; size = 4
??0CmString@@QAE@PBD@Z PROC				; CmString::CmString, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 13   : 	int size = STRING_SIZE(str);

  00008	8b 7d 08	 mov	 edi, DWORD PTR _str$[ebp]
  0000b	8b d9		 mov	 ebx, ecx
  0000d	8b d7		 mov	 edx, edi
  0000f	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL11@CmString:
  00012	8a 02		 mov	 al, BYTE PTR [edx]
  00014	42		 inc	 edx
  00015	84 c0		 test	 al, al
  00017	75 f9		 jne	 SHORT $LL11@CmString
  00019	2b d1		 sub	 edx, ecx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0001b	b8 01 00 00 00	 mov	 eax, 1
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 13   : 	int size = STRING_SIZE(str);

  00020	42		 inc	 edx
  00021	56		 push	 esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00022	6a 00		 push	 0
  00024	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00028	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0002c	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00031	8b 75 fc	 mov	 esi, DWORD PTR _$S1$1[ebp+4]
  00034	c1 fe 14	 sar	 esi, 20			; 00000014H
  00037	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  0003d	8b ce		 mov	 ecx, esi
  0003f	d3 e0		 shl	 eax, cl
  00041	8b ca		 mov	 ecx, edx
  00043	2b c8		 sub	 ecx, eax
  00045	23 ca		 and	 ecx, edx
  00047	f7 d9		 neg	 ecx
  00049	1b c9		 sbb	 ecx, ecx
  0004b	f7 d9		 neg	 ecx
  0004d	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 14   : 	m_nSftIdx = getIndex(size);

  00050	89 43 04	 mov	 DWORD PTR [ebx+4], eax
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
; File e:\infinia-library-3.0\com\src\commstring.cpp

; 15   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0005f	89 03		 mov	 DWORD PTR [ebx], eax
  00061	5e		 pop	 esi
$LL3@CmString:

; 16   : 	_tcscpy(m_pValue, str);

  00062	8a 0f		 mov	 cl, BYTE PTR [edi]
  00064	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00067	88 08		 mov	 BYTE PTR [eax], cl
  00069	8d 40 01	 lea	 eax, DWORD PTR [eax+1]
  0006c	84 c9		 test	 cl, cl
  0006e	75 f2		 jne	 SHORT $LL3@CmString

; 17   : }

  00070	5f		 pop	 edi
  00071	8b c3		 mov	 eax, ebx
  00073	5b		 pop	 ebx
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??0CmString@@QAE@PBD@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QAE@XZ
_TEXT	SEGMENT
??0CmString@@QAE@XZ PROC				; CmString::CmString, COMDAT
; _this$ = ecx

; 7    : 	m_nSftIdx = 0;

  00000	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 8    : 	m_pValue = NULL;
; 9    : }

  00007	8b c1		 mov	 eax, ecx
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0000f	c3		 ret	 0
??0CmString@@QAE@XZ ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?newBufByIndex@CMemManager@@QAEPADH@Z
_TEXT	SEGMENT
_nIdx$ = 8						; size = 4
?newBufByIndex@CMemManager@@QAEPADH@Z PROC		; CMemManager::newBufByIndex, COMDAT
; _this$ = ecx

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a 00		 push	 0
  00005	ff 75 08	 push	 DWORD PTR _nIdx$[ebp]
  00008	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AAEPADHI@Z ; CMemManager::__newBuf
  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?newBufByIndex@CMemManager@@QAEPADH@Z ENDP		; CMemManager::newBufByIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getSizeByIndex@@YAHH@Z
_TEXT	SEGMENT
_nIdx$ = 8						; size = 4
?getSizeByIndex@@YAHH@Z PROC				; getSizeByIndex, COMDAT

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00006	8b 04 85 00 00
	00 00		 mov	 eax, DWORD PTR ?g_nSizeList@@3QBHB[eax*4]
  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?getSizeByIndex@@YAHH@Z ENDP				; getSizeByIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
_$S1$ = -8						; size = 8
_s$ = 8							; size = 4
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	8b c6		 mov	 eax, esi
  00011	66 0f 6e c6	 movd	 xmm0, esi
  00015	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00019	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$[ebp], xmm0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$[ebp+4]
  00021	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00024	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0002a	d3 e2		 shl	 edx, cl
  0002c	2b c2		 sub	 eax, edx
  0002e	23 c6		 and	 eax, esi
  00030	f7 d8		 neg	 eax
  00032	5e		 pop	 esi
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax
  00037	03 c1		 add	 eax, ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_max$ = 12						; size = 4
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 09		 js	 SHORT $LN2@ISINCLUDE
  0000a	3b 45 0c	 cmp	 eax, DWORD PTR _max$[ebp]
  0000d	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  0000f	b0 01		 mov	 al, 1
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@ISINCLUDE:
  00013	32 c0		 xor	 al, al
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__Dst$ = 8						; size = 4
__Source$ = 12						; size = 4
__Count$ = 16						; size = 4
__tcsncpy PROC						; COMDAT

; 1542 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1546 : #pragma warning(pop)
; 1547 : }

  00003	5d		 pop	 ebp

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00004	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___mbsnbcpy
__tcsncpy ENDP
_TEXT	ENDS
END
