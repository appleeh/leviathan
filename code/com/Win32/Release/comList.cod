; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comList.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?delBuf@CMemManager@@QAEXPADH@Z			; CMemManager::delBuf
PUBLIC	??0CSList@@QAE@XZ				; CSList::CSList
PUBLIC	??1CSList@@QAE@XZ				; CSList::~CSList
PUBLIC	?clear@CSList@@QAEXXZ				; CSList::clear
PUBLIC	?add@CSList@@QAE_NPAXPAH@Z			; CSList::add
PUBLIC	?push_back@CSList@@QAE_NPAXPAH@Z		; CSList::push_back
PUBLIC	?del@CSList@@QAE_NPAX_N@Z			; CSList::del
PUBLIC	?del@CSList@@QAE_NH_N@Z				; CSList::del
PUBLIC	?__alloc@CSList@@AAEHH@Z			; CSList::__alloc
PUBLIC	??_C@_0BA@HCJGBAAI@m_nMaxCount?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BA@KIHCGAO@CSList?3?3__alloc?$AA@	; `string'
PUBLIC	??_C@_0CC@EGLLKMDN@i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CFd@ ; `string'
PUBLIC	??_C@_0M@OPJAIMPK@CSList?3?3add?$AA@		; `string'
PUBLIC	??_C@_0CD@JBMGBPLG@?5i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CF@ ; `string'
PUBLIC	??_C@_0BC@DDDJFOPN@CSList?3?3push_back?$AA@	; `string'
PUBLIC	??_C@_0BM@PMNIAOLF@?5del?5FAIL?$CB?5i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@ ; `string'
PUBLIC	??_C@_0M@BBFFJMPH@CSList?3?3del?$AA@		; `string'
PUBLIC	??_C@_0BB@GJFHJAKG@i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@ ; `string'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	?delBufByIndex@CMemManager@@QAEXPADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__debugLog@CLogger@@QAAXHPBDH0ZZ:PROC		; CLogger::__debugLog
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?gs_pMMgr@@3PAVCMemManager@@A:DWORD		; gs_pMMgr
EXTRN	?gs_cLogger@@3VCLogger@@A:BYTE			; gs_cLogger
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BB@GJFHJAKG@i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BB@GJFHJAKG@i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@ DB 'i[%d] m_n'
	DB	'Max[%d]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBFFJMPH@CSList?3?3del?$AA@
CONST	SEGMENT
??_C@_0M@BBFFJMPH@CSList?3?3del?$AA@ DB 'CSList::del', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PMNIAOLF@?5del?5FAIL?$CB?5i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BM@PMNIAOLF@?5del?5FAIL?$CB?5i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@ DB ' '
	DB	'del FAIL! i[%d] m_nMax[%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DDDJFOPN@CSList?3?3push_back?$AA@
CONST	SEGMENT
??_C@_0BC@DDDJFOPN@CSList?3?3push_back?$AA@ DB 'CSList::push_back', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JBMGBPLG@?5i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CF@
CONST	SEGMENT
??_C@_0CD@JBMGBPLG@?5i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CF@ DB ' '
	DB	'i[%d] m_nLast[%d] m_nCurCount[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OPJAIMPK@CSList?3?3add?$AA@
CONST	SEGMENT
??_C@_0M@OPJAIMPK@CSList?3?3add?$AA@ DB 'CSList::add', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EGLLKMDN@i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CFd@
CONST	SEGMENT
??_C@_0CC@EGLLKMDN@i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CFd@ DB 'i'
	DB	'[%d] m_nLast[%d] m_nCurCount[%d]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KIHCGAO@CSList?3?3__alloc?$AA@
CONST	SEGMENT
??_C@_0BA@KIHCGAO@CSList?3?3__alloc?$AA@ DB 'CSList::__alloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCJGBAAI@m_nMaxCount?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_0BA@HCJGBAAI@m_nMaxCount?$FL?$CFd?$FN?$AA@ DB 'm_nMaxCount[%d]', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSList@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comlist.h
;	COMDAT ?_DEL@CSList@@AAEXH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
?_DEL@CSList@@AAEXH@Z PROC				; CSList::_DEL, COMDAT
; _this$ = ecx

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	c7 04 90 00 00
	00 00		 mov	 DWORD PTR [eax+edx*4], 0
  0000f	ff 49 04	 dec	 DWORD PTR [ecx+4]
  00012	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?_DEL@CSList@@AAEXH@Z ENDP				; CSList::_DEL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?__alloc@CSList@@AAEHH@Z
_TEXT	SEGMENT
_nMaxCount$ = 8						; size = 4
?__alloc@CSList@@AAEHH@Z PROC				; CSList::__alloc, COMDAT
; _this$ = ecx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 67   : 	if (nMaxCount <= m_nMax) return m_nMax;

  00004	8b 75 08	 mov	 esi, DWORD PTR _nMaxCount$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0000d	3b f0		 cmp	 esi, eax
  0000f	7e 5c		 jle	 SHORT $LN1@alloc

; 68   : 	void** pList = (void**)calloc(nMaxCount, sizeof(void*));

  00011	53		 push	 ebx
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0001b	8b d8		 mov	 ebx, eax
  0001d	83 c4 08	 add	 esp, 8

; 69   : 	if (!pList) {

  00020	85 db		 test	 ebx, ebx
  00022	75 25		 jne	 SHORT $LN3@alloc

; 70   : 		gs_cLogger.DebugLog(LEVEL_ERROR, _T("m_nMaxCount[%d]"), nMaxCount);

  00024	56		 push	 esi
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HCJGBAAI@m_nMaxCount?$FL?$CFd?$FN?$AA@
  0002a	6a 46		 push	 70			; 00000046H
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KIHCGAO@CSList?3?3__alloc?$AA@
  00031	6a 05		 push	 5
  00033	68 00 00 00 00	 push	 OFFSET ?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  00038	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QAAXHPBDH0ZZ ; CLogger::__debugLog
  0003d	83 c4 18	 add	 esp, 24			; 00000018H

; 71   : 		return 0;

  00040	33 c0		 xor	 eax, eax
  00042	5b		 pop	 ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi

; 80   : }

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN3@alloc:

; 72   : 	}
; 73   : 	//_stprintf(g_szMessage, _T("CList::__alloc list m_nMaxCount[%d]"), nMaxCount);
; 74   : 	if (m_pArray) {

  00049	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0004b	85 c9		 test	 ecx, ecx
  0004d	74 19		 je	 SHORT $LN4@alloc

; 75   : 		memcpy(pList, m_pArray, m_nMax * sizeof(void*));

  0004f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00052	c1 e0 02	 shl	 eax, 2
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	53		 push	 ebx
  00058	e8 00 00 00 00	 call	 _memcpy

; 76   : 		free(m_pArray);

  0005d	ff 37		 push	 DWORD PTR [edi]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00065	83 c4 10	 add	 esp, 16			; 00000010H
$LN4@alloc:

; 77   : 	}
; 78   : 	m_pArray = pList;

  00068	89 1f		 mov	 DWORD PTR [edi], ebx

; 79   : 	return nMaxCount;

  0006a	8b c6		 mov	 eax, esi
  0006c	5b		 pop	 ebx
$LN1@alloc:
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 80   : }

  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?__alloc@CSList@@AAEHH@Z ENDP				; CSList::__alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comlist.h
;	COMDAT ?getNext@CSList@@QAEPAXPAH@Z
_TEXT	SEGMENT
_pIdx$ = 8						; size = 4
?getNext@CSList@@QAEPAXPAH@Z PROC			; CSList::getNext, COMDAT
; _this$ = ecx

; 35   : 	inline void* getNext(int *pIdx) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  00004	8b 75 08	 mov	 esi, DWORD PTR _pIdx$[ebp]
  00007	8b d1		 mov	 edx, ecx
  00009	8b 06		 mov	 eax, DWORD PTR [esi]
  0000b	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0000e	7d 14		 jge	 SHORT $LN3@getNext
$LL4@getNext:

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	8b 02		 mov	 eax, DWORD PTR [edx]
  00014	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00018	75 11		 jne	 SHORT $LN8@getNext

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0001a	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00022	7c ec		 jl	 SHORT $LL4@getNext
$LN3@getNext:

; 38   : 		}
; 39   : 		return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	5e		 pop	 esi

; 40   : 	}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
$LN8@getNext:

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  0002b	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0002e	5e		 pop	 esi

; 40   : 	}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?getNext@CSList@@QAEPAXPAH@Z ENDP			; CSList::getNext
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comtypes.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comtypes.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?del@CSList@@QAE_NH_N@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_bDeepDelete$ = 12					; size = 1
?del@CSList@@QAE_NH_N@Z PROC				; CSList::del, COMDAT
; _this$ = ecx

; 178  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
; File e:\infinia-library-3.0\com\include\comtypes.h

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00005	8b 7d 08	 mov	 edi, DWORD PTR _i$[ebp]
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 178  : {

  00008	8b f1		 mov	 esi, ecx
; File e:\infinia-library-3.0\com\include\comtypes.h

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  0000a	85 ff		 test	 edi, edi
  0000c	0f 88 8e 00 00
	00		 js	 $LN14@del
  00012	3b 7e 10	 cmp	 edi, DWORD PTR [esi+16]
  00015	0f 8d 85 00 00
	00		 jge	 $LN14@del
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 183  : 	if (bDeepDelete) {

  0001b	80 7d 0c 00	 cmp	 BYTE PTR _bDeepDelete$[ebp], 0
  0001f	74 68		 je	 SHORT $LN11@del

; 184  : 		switch (m_nObjAllocType) {

  00021	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00024	83 c0 fe	 add	 eax, -2			; fffffffeH
  00027	83 f8 03	 cmp	 eax, 3
  0002a	77 5d		 ja	 SHORT $LN11@del
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@del[eax*4]
$LN6@del:

; 185  : 		case eAlloc_Type_new:	delete m_pArray[i]; break;

  00033	8b 06		 mov	 eax, DWORD PTR [esi]
  00035	6a 00		 push	 0
  00037	ff 34 b8	 push	 DWORD PTR [eax+edi*4]
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
  00042	eb 45		 jmp	 SHORT $LN11@del
$LN7@del:

; 186  : 		case eAlloc_Type_alloc:	free(m_pArray[i]); break;

  00044	8b 06		 mov	 eax, DWORD PTR [esi]
  00046	ff 34 b8	 push	 DWORD PTR [eax+edi*4]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0004f	eb 35		 jmp	 SHORT $LN20@del
$LN8@del:

; 187  : 		case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)m_pArray[i], STRING_SIZE((TCHAR *)m_pArray[i])); break;

  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	53		 push	 ebx
  00054	8b 14 b8	 mov	 edx, DWORD PTR [eax+edi*4]
  00057	8b ca		 mov	 ecx, edx
  00059	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
  0005c	0f 1f 40 00	 npad	 4
$LL19@del:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL19@del
  00067	2b cb		 sub	 ecx, ebx
  00069	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00072	50		 push	 eax
  00073	52		 push	 edx
  00074	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QAEXPADH@Z ; CMemManager::delBuf
  00079	5b		 pop	 ebx
  0007a	eb 0d		 jmp	 SHORT $LN11@del
$LN9@del:

; 188  : 		case eAlloc_Type_newArray:	delete[] m_pArray[i]; break;

  0007c	8b 06		 mov	 eax, DWORD PTR [esi]
  0007e	ff 34 b8	 push	 DWORD PTR [eax+edi*4]
  00081	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN20@del:
  00086	83 c4 04	 add	 esp, 4
$LN11@del:
; File e:\infinia-library-3.0\com\include\comlist.h

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

  00089	8b 06		 mov	 eax, DWORD PTR [esi]
  0008b	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 195  : 	return true;

  00092	b0 01		 mov	 al, 1
; File e:\infinia-library-3.0\com\include\comlist.h

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

  00094	ff 4e 04	 dec	 DWORD PTR [esi+4]
  00097	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 196  : }

  0009c	5d		 pop	 ebp
  0009d	c2 08 00	 ret	 8
$LN14@del:

; 179  : 	if (!ISINCLUDE(i, m_nMax)) {
; 180  : 		gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nMax[%d]", i, m_nMax);

  000a0	ff 76 10	 push	 DWORD PTR [esi+16]
  000a3	57		 push	 edi
  000a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GJFHJAKG@i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@
  000a9	68 b4 00 00 00	 push	 180			; 000000b4H
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BBFFJMPH@CSList?3?3del?$AA@
  000b3	6a 05		 push	 5
  000b5	68 00 00 00 00	 push	 OFFSET ?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  000ba	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QAAXHPBDH0ZZ ; CLogger::__debugLog
  000bf	83 c4 1c	 add	 esp, 28			; 0000001cH

; 181  : 		return false;

  000c2	32 c0		 xor	 al, al
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi

; 196  : }

  000c6	5d		 pop	 ebp
  000c7	c2 08 00	 ret	 8
  000ca	66 90		 npad	 2
$LN22@del:
  000cc	00 00 00 00	 DD	 $LN6@del
  000d0	00 00 00 00	 DD	 $LN7@del
  000d4	00 00 00 00	 DD	 $LN8@del
  000d8	00 00 00 00	 DD	 $LN9@del
?del@CSList@@QAE_NH_N@Z ENDP				; CSList::del
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?del@CSList@@QAE_NPAX_N@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_bDeepDelete$ = 12					; size = 1
?del@CSList@@QAE_NPAX_N@Z PROC				; CSList::del, COMDAT
; _this$ = ecx

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
  00007	57		 push	 edi

; 155  : 	int i;
; 156  : 	for (i = 0; i < m_nMax; i++) {

  00008	33 f6		 xor	 esi, esi
  0000a	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  0000d	85 ff		 test	 edi, edi
  0000f	7e 11		 jle	 SHORT $LN3@del

; 157  : 		if (m_pArray[i] == p) {

  00011	8b 03		 mov	 eax, DWORD PTR [ebx]
  00013	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
$LL4@del:
  00016	39 10		 cmp	 DWORD PTR [eax], edx
  00018	74 31		 je	 SHORT $LN23@del

; 155  : 	int i;
; 156  : 	for (i = 0; i < m_nMax; i++) {

  0001a	46		 inc	 esi
  0001b	83 c0 04	 add	 eax, 4
  0001e	3b f7		 cmp	 esi, edi
  00020	7c f4		 jl	 SHORT $LL4@del
$LN3@del:

; 171  : 		}
; 172  : 	}
; 173  : 	gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nMax[%d]", i, m_nMax);

  00022	57		 push	 edi
  00023	56		 push	 esi
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@PMNIAOLF@?5del?5FAIL?$CB?5i?$FL?$CFd?$FN?5m_nMax?$FL?$CFd?$FN?$AA@
  00029	68 ad 00 00 00	 push	 173			; 000000adH
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BBFFJMPH@CSList?3?3del?$AA@
  00033	6a 05		 push	 5
  00035	68 00 00 00 00	 push	 OFFSET ?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  0003a	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QAAXHPBDH0ZZ ; CLogger::__debugLog
  0003f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 174  : 	return false;

  00042	32 c0		 xor	 al, al
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx

; 175  : }

  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
$LN23@del:

; 158  : 			if (bDeepDelete) {

  0004b	80 7d 0c 00	 cmp	 BYTE PTR _bDeepDelete$[ebp], 0
  0004f	74 53		 je	 SHORT $LN18@del

; 159  : 				switch (m_nObjAllocType) {

  00051	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00054	83 c0 fe	 add	 eax, -2			; fffffffeH
  00057	83 f8 03	 cmp	 eax, 3
  0005a	77 48		 ja	 SHORT $LN18@del
  0005c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN30@del[eax*4]
$LN9@del:

; 160  : 				case eAlloc_Type_new:	delete p; break;

  00063	6a 00		 push	 0
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006b	83 c4 08	 add	 esp, 8
  0006e	eb 34		 jmp	 SHORT $LN18@del
$LN10@del:

; 161  : 				case eAlloc_Type_alloc:	free(p); break;

  00070	52		 push	 edx
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00077	eb 28		 jmp	 SHORT $LN28@del
$LN11@del:

; 162  : 				case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00079	8b ca		 mov	 ecx, edx
  0007b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0007e	66 90		 npad	 2
$LL27@del:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL27@del
  00087	2b cf		 sub	 ecx, edi
  00089	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00092	50		 push	 eax
  00093	52		 push	 edx
  00094	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QAEXPADH@Z ; CMemManager::delBuf
  00099	eb 09		 jmp	 SHORT $LN18@del
$LN12@del:

; 163  : 				case eAlloc_Type_newArray:	delete[] p; break;

  0009b	52		 push	 edx
  0009c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN28@del:
  000a1	83 c4 04	 add	 esp, 4
$LN18@del:
; File e:\infinia-library-3.0\com\include\comlist.h

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

  000a4	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a6	5f		 pop	 edi
  000a7	c7 04 b0 00 00
	00 00		 mov	 DWORD PTR [eax+esi*4], 0
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 170  : 			return true;

  000ae	b0 01		 mov	 al, 1
; File e:\infinia-library-3.0\com\include\comlist.h

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

  000b0	ff 4b 04	 dec	 DWORD PTR [ebx+4]
  000b3	89 73 0c	 mov	 DWORD PTR [ebx+12], esi
  000b6	5e		 pop	 esi
  000b7	5b		 pop	 ebx
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 175  : }

  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
$LN30@del:
  000bc	00 00 00 00	 DD	 $LN9@del
  000c0	00 00 00 00	 DD	 $LN10@del
  000c4	00 00 00 00	 DD	 $LN11@del
  000c8	00 00 00 00	 DD	 $LN12@del
?del@CSList@@QAE_NPAX_N@Z ENDP				; CSList::del
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?push_back@CSList@@QAE_NPAXPAH@Z
_TEXT	SEGMENT
tv297 = -4						; size = 4
_Obj$ = 8						; size = 4
_pIdx$ = 12						; size = 4
?push_back@CSList@@QAE_NPAXPAH@Z PROC			; CSList::push_back, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 120  : 	int nIdx, i;
; 121  : 
; 122  : 	if (m_nUse >= m_nMax) {

  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000f	89 45 fc	 mov	 DWORD PTR tv297[ebp], eax
  00012	3b c1		 cmp	 eax, ecx
  00014	7c 3a		 jl	 SHORT $LN5@push_back

; 123  : 		if (!__alloc(m_nMax + UNIT_ADD_SIZE)) return false;

  00016	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 ?__alloc@CSList@@AAEHH@Z ; CSList::__alloc
  00021	85 c0		 test	 eax, eax
  00023	74 7c		 je	 SHORT $LN20@push_back

; 124  : 		nIdx = m_nMax;

  00025	8b 56 10	 mov	 edx, DWORD PTR [esi+16]

; 125  : 		m_nMax += UNIT_ADD_SIZE;

  00028	8d 42 0a	 lea	 eax, DWORD PTR [edx+10]
  0002b	89 46 10	 mov	 DWORD PTR [esi+16], eax
$ADD_SUCCESS$22:

; 144  : 	m_nUse++;
; 145  : 	m_pArray[nIdx] = Obj;

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	ff 46 04	 inc	 DWORD PTR [esi+4]
  00033	8b 45 08	 mov	 eax, DWORD PTR _Obj$[ebp]
  00036	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 146  : 	m_nLast++;

  00039	ff 46 08	 inc	 DWORD PTR [esi+8]

; 147  : 	//_stprintf(g_szMessage, _T("CMemList::add i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);
; 148  : 	if (pIdx) *pIdx = nIdx;

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _pIdx$[ebp]
  0003f	85 c0		 test	 eax, eax
  00041	74 02		 je	 SHORT $LN13@push_back
  00043	89 10		 mov	 DWORD PTR [eax], edx
$LN13@push_back:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 149  : 	return true;

  00047	b0 01		 mov	 al, 1
  00049	5b		 pop	 ebx

; 150  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN5@push_back:

; 126  : 		goto ADD_SUCCESS;
; 127  : 	}
; 128  : 
; 129  : 	if (!m_pArray[m_nLast]) { nIdx = m_nLast;  goto ADD_SUCCESS; }

  00050	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	83 3c 98 00	 cmp	 DWORD PTR [eax+ebx*4], 0
  00059	75 04		 jne	 SHORT $LN8@push_back
  0005b	8b d3		 mov	 edx, ebx

; 142  : 
; 143  : ADD_SUCCESS:

  0005d	eb cf		 jmp	 SHORT $ADD_SUCCESS$22
$LN8@push_back:

; 130  : 
; 131  : 	nIdx = m_nLast;
; 132  : 	for (i = 0; i < m_nMax; i++)

  0005f	33 c0		 xor	 eax, eax
  00061	8b fb		 mov	 edi, ebx
  00063	85 c9		 test	 ecx, ecx
  00065	7e 17		 jle	 SHORT $LN3@push_back
$LL4@push_back:
  00067	33 d2		 xor	 edx, edx
  00069	3b f9		 cmp	 edi, ecx
  0006b	0f 4c d7	 cmovl	 edx, edi

; 133  : 	{
; 134  : 		if (nIdx >= m_nMax) nIdx = 0;
; 135  : 		if (!m_pArray[nIdx]) {

  0006e	8b 3e		 mov	 edi, DWORD PTR [esi]
  00070	83 3c 97 00	 cmp	 DWORD PTR [edi+edx*4], 0
  00074	74 b8		 je	 SHORT $ADD_SUCCESS$22

; 136  : 			goto ADD_SUCCESS;
; 137  : 		}
; 138  : 		nIdx++;

  00076	40		 inc	 eax
  00077	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  0007a	3b c1		 cmp	 eax, ecx
  0007c	7c e9		 jl	 SHORT $LL4@push_back
$LN3@push_back:

; 139  : 	}
; 140  : 	gs_cLogger.DebugLog(LEVEL_ERROR, " i[%d] m_nLast[%d] m_nCurCount[%d]", nIdx, m_nLast, m_nUse);

  0007e	ff 75 fc	 push	 DWORD PTR tv297[ebp]
  00081	53		 push	 ebx
  00082	57		 push	 edi
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JBMGBPLG@?5i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CF@
  00088	68 8c 00 00 00	 push	 140			; 0000008cH
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DDDJFOPN@CSList?3?3push_back?$AA@
  00092	6a 05		 push	 5
  00094	68 00 00 00 00	 push	 OFFSET ?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  00099	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QAAXHPBDH0ZZ ; CLogger::__debugLog
  0009e	83 c4 20	 add	 esp, 32			; 00000020H
$LN20@push_back:

; 141  : 	return false;

  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	32 c0		 xor	 al, al
  000a5	5b		 pop	 ebx

; 150  : }

  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?push_back@CSList@@QAE_NPAXPAH@Z ENDP			; CSList::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?add@CSList@@QAE_NPAXPAH@Z
_TEXT	SEGMENT
tv295 = -8						; size = 4
tv301 = -4						; size = 4
_Obj$ = 8						; size = 4
_pIdx$ = 12						; size = 4
?add@CSList@@QAE_NPAXPAH@Z PROC				; CSList::add, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi

; 84   : 	int nIdx, i;
; 85   : 
; 86   : 	if (m_nUse >= m_nMax) {

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00011	89 45 fc	 mov	 DWORD PTR tv301[ebp], eax
  00014	3b c1		 cmp	 eax, ecx
  00016	7c 3e		 jl	 SHORT $LN5@add

; 87   : 		if (!__alloc(m_nMax + UNIT_ADD_SIZE)) {

  00018	8d 41 0a	 lea	 eax, DWORD PTR [ecx+10]
  0001b	8b ce		 mov	 ecx, esi
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ?__alloc@CSList@@AAEHH@Z ; CSList::__alloc
  00023	85 c0		 test	 eax, eax
  00025	0f 84 7c 00 00
	00		 je	 $LN20@add

; 88   : 			return false;
; 89   : 		}
; 90   : 		nIdx = m_nMax;

  0002b	8b 56 10	 mov	 edx, DWORD PTR [esi+16]

; 91   : 		m_nMax += UNIT_ADD_SIZE;

  0002e	8d 42 0a	 lea	 eax, DWORD PTR [edx+10]
  00031	89 46 10	 mov	 DWORD PTR [esi+16], eax
$ADD_SUCCESS$22:

; 108  : 
; 109  : ADD_SUCCESS:
; 110  : 	m_nUse++;
; 111  : 	m_pArray[nIdx] = Obj;

  00034	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00036	ff 46 04	 inc	 DWORD PTR [esi+4]
  00039	8b 45 08	 mov	 eax, DWORD PTR _Obj$[ebp]
  0003c	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 112  : 	m_nLast++;

  0003f	ff 46 08	 inc	 DWORD PTR [esi+8]

; 113  : 	//_stprintf(g_szMessage, _T("CMemList::add i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);
; 114  : 	if (pIdx) *pIdx = nIdx;

  00042	8b 45 0c	 mov	 eax, DWORD PTR _pIdx$[ebp]
  00045	85 c0		 test	 eax, eax
  00047	74 02		 je	 SHORT $LN13@add
  00049	89 10		 mov	 DWORD PTR [eax], edx
$LN13@add:
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 115  : 	return true;

  0004d	b0 01		 mov	 al, 1
  0004f	5b		 pop	 ebx

; 116  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
$LN5@add:

; 92   : 		goto ADD_SUCCESS;
; 93   : 	}
; 94   : 
; 95   : 	if (!m_pArray[m_nDelIdx]) { nIdx = m_nDelIdx; goto ADD_SUCCESS; }

  00056	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00059	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0005b	83 3c 93 00	 cmp	 DWORD PTR [ebx+edx*4], 0
  0005f	74 d3		 je	 SHORT $ADD_SUCCESS$22

; 96   : 
; 97   : 	nIdx = m_nLast;

  00061	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00064	8b f8		 mov	 edi, eax
  00066	89 45 f8	 mov	 DWORD PTR tv295[ebp], eax

; 98   : 	for (i = 0; i < m_nMax; i++)

  00069	33 c0		 xor	 eax, eax
  0006b	85 c9		 test	 ecx, ecx
  0006d	7e 16		 jle	 SHORT $LN3@add
  0006f	90		 npad	 1
$LL4@add:
  00070	33 d2		 xor	 edx, edx
  00072	3b f9		 cmp	 edi, ecx
  00074	0f 4c d7	 cmovl	 edx, edi

; 99   : 	{
; 100  : 		if (nIdx >= m_nMax) nIdx = 0;
; 101  : 		if (!m_pArray[nIdx]) {

  00077	83 3c 93 00	 cmp	 DWORD PTR [ebx+edx*4], 0
  0007b	74 b7		 je	 SHORT $ADD_SUCCESS$22

; 102  : 			goto ADD_SUCCESS;
; 103  : 		}
; 104  : 		nIdx++;

  0007d	40		 inc	 eax
  0007e	8d 7a 01	 lea	 edi, DWORD PTR [edx+1]
  00081	3b c1		 cmp	 eax, ecx
  00083	7c eb		 jl	 SHORT $LL4@add
$LN3@add:

; 105  : 	}
; 106  : 	gs_cLogger.DebugLog(LEVEL_ERROR, _T("i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);

  00085	ff 75 fc	 push	 DWORD PTR tv301[ebp]
  00088	ff 75 f8	 push	 DWORD PTR tv295[ebp]
  0008b	57		 push	 edi
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EGLLKMDN@i?$FL?$CFd?$FN?5m_nLast?$FL?$CFd?$FN?5m_nCurCount?$FL?$CFd@
  00091	6a 6a		 push	 106			; 0000006aH
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OPJAIMPK@CSList?3?3add?$AA@
  00098	6a 05		 push	 5
  0009a	68 00 00 00 00	 push	 OFFSET ?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  0009f	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QAAXHPBDH0ZZ ; CLogger::__debugLog
  000a4	83 c4 20	 add	 esp, 32			; 00000020H
$LN20@add:

; 107  : 	return false;

  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	32 c0		 xor	 al, al
  000ab	5b		 pop	 ebx

; 116  : }

  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 08 00	 ret	 8
?add@CSList@@QAE_NPAXPAH@Z ENDP				; CSList::add
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ?clear@CSList@@QAEXXZ
_TEXT	SEGMENT
_$S1$1 = -12						; size = 8
_p$1$ = -4						; size = 4
?clear@CSList@@QAEXXZ PROC				; CSList::clear, COMDAT
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	83 7b 14 01	 cmp	 DWORD PTR [ebx+20], 1

; 42   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  0000d	0f 8e e4 00 00
	00		 jle	 $LN53@clear
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  00013	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00016	57		 push	 edi
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 43   : 		int idx = 0;

  00017	33 ff		 xor	 edi, edi
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  00019	85 c9		 test	 ecx, ecx
  0001b	0f 8e d5 00 00
	00		 jle	 $LN54@clear

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00021	8b 13		 mov	 edx, DWORD PTR [ebx]
  00023	8b c2		 mov	 eax, edx
$LL24@clear:
  00025	83 38 00	 cmp	 DWORD PTR [eax], 0
  00028	75 0d		 jne	 SHORT $LN40@clear

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0002a	47		 inc	 edi
  0002b	83 c0 04	 add	 eax, 4
  0002e	3b f9		 cmp	 edi, ecx
  00030	7c f3		 jl	 SHORT $LL24@clear

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00032	e9 bf 00 00 00	 jmp	 $LN54@clear
$LN40@clear:
  00037	8b 0c ba	 mov	 ecx, DWORD PTR [edx+edi*4]
  0003a	89 4d fc	 mov	 DWORD PTR _p$1$[ebp], ecx
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 45   : 		while (p) {

  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 84 b1 00 00
	00		 je	 $LN54@clear
  00045	56		 push	 esi
$LL2@clear:

; 46   : 			idx++;
; 47   : 			switch (m_nObjAllocType) {

  00046	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00049	47		 inc	 edi
  0004a	83 c0 fe	 add	 eax, -2			; fffffffeH
  0004d	83 f8 03	 cmp	 eax, 3
  00050	0f 87 76 00 00
	00		 ja	 $LN16@clear
  00056	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN58@clear[eax*4]
$LN7@clear:

; 48   : 			case eAlloc_Type_new:	delete p; break;

  0005d	6a 00		 push	 0
  0005f	51		 push	 ecx
  00060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00065	83 c4 08	 add	 esp, 8
  00068	eb 62		 jmp	 SHORT $LN16@clear
$LN8@clear:

; 49   : 			case eAlloc_Type_alloc:	free(p); break;

  0006a	51		 push	 ecx
  0006b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00071	eb 56		 jmp	 SHORT $LN56@clear
$LN9@clear:

; 50   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00073	8b d1		 mov	 edx, ecx
  00075	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL52@clear:
  00078	8a 02		 mov	 al, BYTE PTR [edx]
  0007a	42		 inc	 edx
  0007b	84 c0		 test	 al, al
  0007d	75 f9		 jne	 SHORT $LL52@clear
  0007f	2b d1		 sub	 edx, ecx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00081	b8 01 00 00 00	 mov	 eax, 1
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 50   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00086	42		 inc	 edx
  00087	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0008b	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0008f	f2 0f 11 45 f4	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00094	8b 75 f8	 mov	 esi, DWORD PTR _$S1$1[ebp+4]
  00097	c1 fe 14	 sar	 esi, 20			; 00000014H
  0009a	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  000a0	8b ce		 mov	 ecx, esi
  000a2	d3 e0		 shl	 eax, cl
  000a4	8b ca		 mov	 ecx, edx
  000a6	2b c8		 sub	 ecx, eax
  000a8	23 ca		 and	 ecx, edx
  000aa	f7 d9		 neg	 ecx
  000ac	1b c9		 sbb	 ecx, ecx
  000ae	f7 d9		 neg	 ecx
  000b0	03 ce		 add	 ecx, esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  000b2	51		 push	 ecx
  000b3	ff 75 fc	 push	 DWORD PTR _p$1$[ebp]
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000bc	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 50   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  000c1	eb 09		 jmp	 SHORT $LN16@clear
$LN10@clear:

; 51   : 			case eAlloc_Type_newArray:	delete[] p; break;

  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN56@clear:
  000c9	83 c4 04	 add	 esp, 4
$LN16@clear:
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  000cc	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  000cf	3b f9		 cmp	 edi, ecx
  000d1	7d 22		 jge	 SHORT $LN55@clear

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  000d3	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d5	8d 04 ba	 lea	 eax, DWORD PTR [edx+edi*4]
$LL34@clear:
  000d8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000db	75 0a		 jne	 SHORT $LN41@clear

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  000dd	47		 inc	 edi
  000de	83 c0 04	 add	 eax, 4
  000e1	3b f9		 cmp	 edi, ecx
  000e3	7c f3		 jl	 SHORT $LL34@clear
  000e5	eb 0e		 jmp	 SHORT $LN55@clear
$LN41@clear:

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  000e7	8b 0c ba	 mov	 ecx, DWORD PTR [edx+edi*4]
  000ea	89 4d fc	 mov	 DWORD PTR _p$1$[ebp], ecx
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 45   : 		while (p) {

  000ed	85 c9		 test	 ecx, ecx
  000ef	0f 85 51 ff ff
	ff		 jne	 $LL2@clear
$LN55@clear:
  000f5	5e		 pop	 esi
$LN54@clear:
  000f6	5f		 pop	 edi
$LN53@clear:

; 52   : 			case eAlloc_Type_none: break;
; 53   : 			case eAlloc_Type_MemPool: break;
; 54   : 			}
; 55   : 			p = getNext(&idx);
; 56   : 		}
; 57   : 	}
; 58   : 	memset(m_pArray, 0, sizeof(void *) * m_nMax);

  000f7	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  000fa	c1 e0 02	 shl	 eax, 2
  000fd	50		 push	 eax
  000fe	6a 00		 push	 0
  00100	ff 33		 push	 DWORD PTR [ebx]
  00102	e8 00 00 00 00	 call	 _memset
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH

; 59   : 	m_nUse = 0;

  0010a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 60   : 	m_nLast = 0;

  00111	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 61   : 	m_nDelIdx = 0;

  00118	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  0011f	5b		 pop	 ebx

; 62   : }

  00120	8b e5		 mov	 esp, ebp
  00122	5d		 pop	 ebp
  00123	c3		 ret	 0
$LN58@clear:
  00124	00 00 00 00	 DD	 $LN7@clear
  00128	00 00 00 00	 DD	 $LN8@clear
  0012c	00 00 00 00	 DD	 $LN9@clear
  00130	00 00 00 00	 DD	 $LN10@clear
?clear@CSList@@QAEXXZ ENDP				; CSList::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
; File e:\infinia-library-3.0\com\include\comlist.h
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ??1CSList@@QAE@XZ
_TEXT	SEGMENT
_$S1$2 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSList@@QAE@XZ PROC					; CSList::~CSList, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSList@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
  0002a	89 75 f0	 mov	 DWORD PTR _this$1$[ebp], esi

; 17   : 	if (!m_pArray) return;

  0002d	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0002f	85 db		 test	 ebx, ebx
  00031	0f 84 f7 00 00
	00		 je	 $LN1@CSList

; 18   : 
; 19   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  00037	83 7e 14 01	 cmp	 DWORD PTR [esi+20], 1
  0003b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__free
  00041	0f 8e da 00 00
	00		 jle	 $LN54@CSList
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  00047	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 20   : 		int idx = 0;

  0004a	33 ff		 xor	 edi, edi
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0004c	85 c9		 test	 ecx, ecx
  0004e	0f 8e cd 00 00
	00		 jle	 $LN54@CSList

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00054	8b c3		 mov	 eax, ebx
$LL25@CSList:
  00056	83 38 00	 cmp	 DWORD PTR [eax], 0
  00059	75 0d		 jne	 SHORT $LN41@CSList

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0005b	47		 inc	 edi
  0005c	83 c0 04	 add	 eax, 4
  0005f	3b f9		 cmp	 edi, ecx
  00061	7c f3		 jl	 SHORT $LL25@CSList

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00063	e9 b9 00 00 00	 jmp	 $LN54@CSList
$LN41@CSList:
  00068	8b 1c bb	 mov	 ebx, DWORD PTR [ebx+edi*4]
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 22   : 		while (p) {

  0006b	85 db		 test	 ebx, ebx
  0006d	0f 84 ae 00 00
	00		 je	 $LN54@CSList
$LL2@CSList:

; 23   : 			idx++;
; 24   : 			switch (m_nObjAllocType) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	47		 inc	 edi
  00077	83 c0 fe	 add	 eax, -2			; fffffffeH
  0007a	83 f8 03	 cmp	 eax, 3
  0007d	77 7c		 ja	 SHORT $LN17@CSList
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN58@CSList[eax*4]
$LN8@CSList:

; 25   : 			case eAlloc_Type_new:	delete p; break;

  00086	6a 00		 push	 0
  00088	53		 push	 ebx
  00089	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008e	83 c4 08	 add	 esp, 8
  00091	eb 62		 jmp	 SHORT $LN56@CSList
$LN9@CSList:

; 26   : 			case eAlloc_Type_alloc:	free(p); break;

  00093	53		 push	 ebx
  00094	ff d2		 call	 edx
  00096	eb 5a		 jmp	 SHORT $LN57@CSList
$LN10@CSList:

; 27   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00098	8b d3		 mov	 edx, ebx
  0009a	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
  0009d	0f 1f 00	 npad	 3
$LL53@CSList:
  000a0	8a 02		 mov	 al, BYTE PTR [edx]
  000a2	42		 inc	 edx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL53@CSList
  000a7	2b d1		 sub	 edx, ecx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  000a9	b8 01 00 00 00	 mov	 eax, 1
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 27   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  000ae	42		 inc	 edx
  000af	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  000b3	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000b7	f2 0f 11 45 e8	 movsd	 QWORD PTR _$S1$2[ebp], xmm0
  000bc	8b 75 ec	 mov	 esi, DWORD PTR _$S1$2[ebp+4]
  000bf	c1 fe 14	 sar	 esi, 20			; 00000014H
  000c2	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  000c8	8b ce		 mov	 ecx, esi
  000ca	d3 e0		 shl	 eax, cl
  000cc	8b ca		 mov	 ecx, edx
  000ce	2b c8		 sub	 ecx, eax
  000d0	23 ca		 and	 ecx, edx
  000d2	f7 d9		 neg	 ecx
  000d4	1b c9		 sbb	 ecx, ecx
  000d6	f7 d9		 neg	 ecx
  000d8	03 ce		 add	 ecx, esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  000da	51		 push	 ecx
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  000e1	53		 push	 ebx
  000e2	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 27   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  000e7	8b 75 f0	 mov	 esi, DWORD PTR _this$1$[ebp]
  000ea	eb 09		 jmp	 SHORT $LN56@CSList
$LN11@CSList:

; 28   : 			case eAlloc_Type_newArray:	delete[] p; break;

  000ec	53		 push	 ebx
  000ed	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN57@CSList:
  000f2	83 c4 04	 add	 esp, 4
$LN56@CSList:
  000f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__free
$LN17@CSList:
; File e:\infinia-library-3.0\com\include\comlist.h

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  000fb	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000fe	3b f9		 cmp	 edi, ecx
  00100	7d 1f		 jge	 SHORT $LN54@CSList

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00102	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00104	8d 04 bb	 lea	 eax, DWORD PTR [ebx+edi*4]
$LL35@CSList:
  00107	83 38 00	 cmp	 DWORD PTR [eax], 0
  0010a	75 0a		 jne	 SHORT $LN42@CSList

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0010c	47		 inc	 edi
  0010d	83 c0 04	 add	 eax, 4
  00110	3b f9		 cmp	 edi, ecx
  00112	7c f3		 jl	 SHORT $LL35@CSList
  00114	eb 0b		 jmp	 SHORT $LN54@CSList
$LN42@CSList:

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  00116	8b 1c bb	 mov	 ebx, DWORD PTR [ebx+edi*4]
; File e:\infinia-library-3.0\com\src\comlist.cpp

; 22   : 		while (p) {

  00119	85 db		 test	 ebx, ebx
  0011b	0f 85 52 ff ff
	ff		 jne	 $LL2@CSList
$LN54@CSList:

; 29   : 			case eAlloc_Type_none: break;
; 30   : 			case eAlloc_Type_MemPool: break;
; 31   : 			}
; 32   : 			p = getNext(&idx);
; 33   : 		}
; 34   : 	}
; 35   : 
; 36   : 	free(m_pArray);

  00121	ff 36		 push	 DWORD PTR [esi]
  00123	ff d2		 call	 edx
  00125	83 c4 04	 add	 esp, 4

; 37   : 	m_pArray = 0;

  00128	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN1@CSList:

; 38   : }

  0012e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	5b		 pop	 ebx
  0013c	8b e5		 mov	 esp, ebp
  0013e	5d		 pop	 ebp
  0013f	c3		 ret	 0
$LN58@CSList:
  00140	00 00 00 00	 DD	 $LN8@CSList
  00144	00 00 00 00	 DD	 $LN9@CSList
  00148	00 00 00 00	 DD	 $LN10@CSList
  0014c	00 00 00 00	 DD	 $LN11@CSList
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSList@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSList@@QAE@XZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSList@@QAE@XZ ENDP					; CSList::~CSList
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\comlist.cpp
;	COMDAT ??0CSList@@QAE@XZ
_TEXT	SEGMENT
??0CSList@@QAE@XZ PROC					; CSList::CSList, COMDAT
; _this$ = ecx

; 7    : 	m_pArray = NULL;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 8    : 	m_nUse = 0;
; 9    : 	m_nLast = 0;
; 10   : 	m_nDelIdx = 0;
; 11   : 	m_nMax = 0;
; 12   : 	m_nObjAllocType = eAlloc_Type_none;
; 13   : }

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c3		 ret	 0
??0CSList@@QAE@XZ ENDP					; CSList::CSList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?delBuf@CMemManager@@QAEXPADH@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_pBuf$ = 8						; size = 4
_nSize$ = 12						; size = 4
?delBuf@CMemManager@@QAEXPADH@Z PROC			; CMemManager::delBuf, COMDAT
; _this$ = ecx

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00006	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00010	8b f9		 mov	 edi, ecx
  00012	66 0f 6e c2	 movd	 xmm0, edx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00016	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0001a	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  0001f	8b 75 fc	 mov	 esi, DWORD PTR _$S1$1[ebp+4]
  00022	c1 fe 14	 sar	 esi, 20			; 00000014H
  00025	81 ee ff 03 00
	00		 sub	 esi, 1023		; 000003ffH
  0002b	8b ce		 mov	 ecx, esi
  0002d	d3 e0		 shl	 eax, cl
  0002f	8b ca		 mov	 ecx, edx
  00031	2b c8		 sub	 ecx, eax
  00033	23 ca		 and	 ecx, edx
  00035	f7 d9		 neg	 ecx
  00037	1b c9		 sbb	 ecx, ecx
  00039	f7 d9		 neg	 ecx
  0003b	03 ce		 add	 ecx, esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  0003d	51		 push	 ecx
  0003e	ff 75 08	 push	 DWORD PTR _pBuf$[ebp]
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QAEXPADH@Z ; CMemManager::delBufByIndex
  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?delBuf@CMemManager@@QAEXPADH@Z ENDP			; CMemManager::delBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
_$S1$ = -8						; size = 8
_s$ = 8							; size = 4
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	8b c6		 mov	 eax, esi
  00011	66 0f 6e c6	 movd	 xmm0, esi
  00015	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00019	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$[ebp], xmm0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$[ebp+4]
  00021	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00024	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0002a	d3 e2		 shl	 edx, cl
  0002c	2b c2		 sub	 eax, edx
  0002e	23 c6		 and	 eax, esi
  00030	f7 d8		 neg	 eax
  00032	5e		 pop	 esi
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax
  00037	03 c1		 add	 eax, ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
_max$ = 12						; size = 4
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _i$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	78 09		 js	 SHORT $LN2@ISINCLUDE
  0000a	3b 45 0c	 cmp	 eax, DWORD PTR _max$[ebp]
  0000d	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  0000f	b0 01		 mov	 al, 1
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN2@ISINCLUDE:
  00013	32 c0		 xor	 al, al
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
_TEXT	SEGMENT
_e$ = 8							; size = 4
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z PROC		; ISABLETODELETE, COMDAT

; 247  : inline bool ISABLETODELETE(E_ALLOC_TYPE e) { if (eAlloc_Type_MemPool < e) return true; return false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 7d 08 01	 cmp	 DWORD PTR _e$[ebp], 1
  00007	0f 9f c0	 setg	 al
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ENDP		; ISABLETODELETE
_TEXT	ENDS
END
