; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	E:\InfiniA-Library-3.0\com\src\comMemManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?gs_pMMgr@@3PAVCMemManager@@A			; gs_pMMgr
PUBLIC	?g_szSystemError@@3PADA				; g_szSystemError
PUBLIC	?g_szMessage@@3PADA				; g_szMessage
_BSS	SEGMENT
?gs_pMMgr@@3PAVCMemManager@@A DD 01H DUP (?)		; gs_pMMgr
?g_szSystemError@@3PADA DB 0400H DUP (?)		; g_szSystemError
?g_szMessage@@3PADA DB 080H DUP (?)			; g_szMessage
_BSS	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	_printf
PUBLIC	??0CMemManager@@QAE@XZ				; CMemManager::CMemManager
PUBLIC	??1CMemManager@@QAE@XZ				; CMemManager::~CMemManager
PUBLIC	?init@CMemManager@@QAEXPAUSTBufConf@@@Z		; CMemManager::init
PUBLIC	?init@CMemManager@@QAEHPADH@Z			; CMemManager::init
PUBLIC	?alloc@CMemManager@@QAE_NXZ			; CMemManager::alloc
PUBLIC	?delBuf@CMemManager@@QAEXPADH@Z			; CMemManager::delBuf
PUBLIC	?delBufByIndex@CMemManager@@QAEXPADH@Z		; CMemManager::delBufByIndex
PUBLIC	?getStrToInt@CMemManager@@QAEHPAD@Z		; CMemManager::getStrToInt
PUBLIC	?__newBuf@CMemManager@@AAEPADHI@Z		; CMemManager::__newBuf
PUBLIC	?OBJ_DELETE@@YAXW4E_ALLOC_TYPE@@PAX@Z		; OBJ_DELETE
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0CH@FIAACEOP@getStrToInt?5parsing?5FAIL?$CB?$CB?$CB?5cUni@ ; `string'
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__atoi:PROC
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??3@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete
EXTRN	??0CBufPool@@QAE@XZ:PROC			; CBufPool::CBufPool
EXTRN	??1CBufPool@@QAE@XZ:PROC			; CBufPool::~CBufPool
EXTRN	?alloc@CBufPool@@QAE_NHH@Z:PROC			; CBufPool::alloc
EXTRN	?newMem@CBufPool@@QAEPADXZ:PROC			; CBufPool::newMem
EXTRN	?delMem@CBufPool@@QAEXPAD@Z:PROC		; CBufPool::delMem
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0CH@FIAACEOP@getStrToInt?5parsing?5FAIL?$CB?$CB?$CB?5cUni@
CONST	SEGMENT
??_C@_0CH@FIAACEOP@getStrToInt?5parsing?5FAIL?$CB?$CB?$CB?5cUni@ DB 'getS'
	DB	'trToInt parsing FAIL!!! cUnit[%c]', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?alloc@CMemManager@@QAE_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?alloc@CMemManager@@QAE_NXZ$0
__ehfuncinfo$?alloc@CMemManager@@QAE_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?alloc@CMemManager@@QAE_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?OBJ_DELETE@@YAXW4E_ALLOC_TYPE@@PAX@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
_p$ = 12						; size = 4
?OBJ_DELETE@@YAXW4E_ALLOC_TYPE@@PAX@Z PROC		; OBJ_DELETE, COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 151  : 	switch (type) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  00006	83 c0 fe	 add	 eax, -2			; fffffffeH
  00009	83 f8 03	 cmp	 eax, 3
  0000c	77 59		 ja	 SHORT $LN13@OBJ_DELETE
  0000e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@OBJ_DELETE[eax*4]
$LN4@OBJ_DELETE:

; 152  : 	case eAlloc_Type_new		: delete p; break;

  00015	6a 00		 push	 0
  00017	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8

; 156  : 	case eAlloc_Type_none		: break;
; 157  : 	case eAlloc_Type_MemPool	: break;
; 158  : 	}
; 159  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN5@OBJ_DELETE:

; 153  : 	case eAlloc_Type_alloc		: free(p); break;

  00024	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free

; 155  : 	case eAlloc_Type_newArray	: delete[] p; break;

  0002d	83 c4 04	 add	 esp, 4

; 156  : 	case eAlloc_Type_none		: break;
; 157  : 	case eAlloc_Type_MemPool	: break;
; 158  : 	}
; 159  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN6@OBJ_DELETE:

; 154  : 	case eAlloc_Type_BufPool	: gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00032	8b 55 0c	 mov	 edx, DWORD PTR _p$[ebp]
  00035	8b ca		 mov	 ecx, edx
  00037	56		 push	 esi
  00038	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0003b	0f 1f 44 00 00	 npad	 5
$LL15@OBJ_DELETE:
  00040	8a 01		 mov	 al, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 c0		 test	 al, al
  00045	75 f9		 jne	 SHORT $LL15@OBJ_DELETE
  00047	2b ce		 sub	 ecx, esi
  00049	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pMMgr@@3PAVCMemManager@@A ; gs_pMMgr
  00052	50		 push	 eax
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QAEXPADH@Z ; CMemManager::delBuf
  00059	5e		 pop	 esi

; 156  : 	case eAlloc_Type_none		: break;
; 157  : 	case eAlloc_Type_MemPool	: break;
; 158  : 	}
; 159  : }

  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN7@OBJ_DELETE:

; 155  : 	case eAlloc_Type_newArray	: delete[] p; break;

  0005c	ff 75 0c	 push	 DWORD PTR _p$[ebp]
  0005f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00064	83 c4 04	 add	 esp, 4
$LN13@OBJ_DELETE:

; 156  : 	case eAlloc_Type_none		: break;
; 157  : 	case eAlloc_Type_MemPool	: break;
; 158  : 	}
; 159  : }

  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
  00069	0f 1f 00	 npad	 3
$LN18@OBJ_DELETE:
  0006c	00 00 00 00	 DD	 $LN4@OBJ_DELETE
  00070	00 00 00 00	 DD	 $LN5@OBJ_DELETE
  00074	00 00 00 00	 DD	 $LN6@OBJ_DELETE
  00078	00 00 00 00	 DD	 $LN7@OBJ_DELETE
?OBJ_DELETE@@YAXW4E_ALLOC_TYPE@@PAX@Z ENDP		; OBJ_DELETE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?__newBuf@CMemManager@@AAEPADHI@Z
_TEXT	SEGMENT
_nIdx$ = 8						; size = 4
_size$ = 12						; size = 4
?__newBuf@CMemManager@@AAEPADHI@Z PROC			; CMemManager::__newBuf, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  : 	if (IDX_BUF_2m < nIdx || !m_pBufList[nIdx]) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00006	83 f8 15	 cmp	 eax, 21			; 00000015H
  00009	7f 12		 jg	 SHORT $LN3@newBuf
  0000b	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0000e	85 d2		 test	 edx, edx
  00010	74 0b		 je	 SHORT $LN3@newBuf

; 129  : /*		if (p) {
; 130  : 			gs_cLogger.DebugLog(LEVEL_TRACE, "overIdx:%d, overSize:%lld calloc address[%p]", m_nOverMaxIdx, size, p);
; 131  : 		}
; 132  : 		else {
; 133  : 			gs_cLogger.DebugLog(LEVEL_ERROR, "calloc has Failed");
; 134  : 		}	*/	
; 135  : 		return p;
; 136  : 	}
; 137  : 
; 138  : 	return m_pBufList[nIdx]->newMem();

  00012	8b ca		 mov	 ecx, edx
  00014	e8 00 00 00 00	 call	 ?newMem@CBufPool@@QAEPADXZ ; CBufPool::newMem

; 139  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN3@newBuf:

; 127  : 		if (m_nOverMaxIdx < nIdx) m_nOverMaxIdx = nIdx;

  0001d	39 81 b0 00 00
	00		 cmp	 DWORD PTR [ecx+176], eax
  00023	7d 06		 jge	 SHORT $LN4@newBuf
  00025	89 81 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], eax
$LN4@newBuf:

; 128  : 		char *p = (char *)calloc(1, size);

  0002b	ff 75 0c	 push	 DWORD PTR _size$[ebp]
  0002e	6a 01		 push	 1
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00036	83 c4 08	 add	 esp, 8

; 139  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?__newBuf@CMemManager@@AAEPADHI@Z ENDP			; CMemManager::__newBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?getStrToInt@CMemManager@@QAEHPAD@Z
_TEXT	SEGMENT
_szNum$ = -36						; size = 32
__$ArrayPad$ = -4					; size = 4
_pData$ = 8						; size = 4
?getStrToInt@CMemManager@@QAEHPAD@Z PROC		; CMemManager::getStrToInt, COMDAT
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _pData$[ebp]
  00013	53		 push	 ebx

; 48   : 	TCHAR *pPos = pData;
; 49   : 	TCHAR szNum[32], cUnit = 0;

  00014	32 db		 xor	 bl, bl
  00016	56		 push	 esi

; 50   : 	int i = 0, nRes=0;
; 51   : 	while (*pPos) {

  00017	8a 01		 mov	 al, BYTE PTR [ecx]
  00019	84 c0		 test	 al, al
  0001b	74 1a		 je	 SHORT $LN3@getStrToIn
  0001d	8d 55 dc	 lea	 edx, DWORD PTR _szNum$[ebp]
$LL2@getStrToIn:

; 52   : 		if ('0' <= *pPos && *pPos <= '9') szNum[i++] = *pPos;

  00020	3c 30		 cmp	 al, 48			; 00000030H
  00022	7c 09		 jl	 SHORT $LN6@getStrToIn
  00024	3c 39		 cmp	 al, 57			; 00000039H
  00026	7f 05		 jg	 SHORT $LN6@getStrToIn
  00028	88 02		 mov	 BYTE PTR [edx], al
  0002a	42		 inc	 edx
  0002b	eb 02		 jmp	 SHORT $LN7@getStrToIn
$LN6@getStrToIn:

; 53   : 		else cUnit = *pPos;

  0002d	8a d8		 mov	 bl, al
$LN7@getStrToIn:

; 50   : 	int i = 0, nRes=0;
; 51   : 	while (*pPos) {

  0002f	8a 41 01	 mov	 al, BYTE PTR [ecx+1]

; 54   : 		pPos++;

  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 e9		 jne	 SHORT $LL2@getStrToIn
$LN3@getStrToIn:

; 55   : 	}
; 56   : 	nRes = _ttoi(szNum);

  00037	8d 45 dc	 lea	 eax, DWORD PTR _szNum$[ebp]
  0003a	50		 push	 eax
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__atoi
  00041	83 c4 04	 add	 esp, 4
  00044	8b f0		 mov	 esi, eax

; 57   : 	if (cUnit) {

  00046	84 db		 test	 bl, bl
  00048	74 6e		 je	 SHORT $LN4@getStrToIn

; 58   : 		switch (cUnit) {

  0004a	0f be cb	 movsx	 ecx, bl
  0004d	8d 41 b9	 lea	 eax, DWORD PTR [ecx-71]
  00050	83 f8 26	 cmp	 eax, 38			; 00000026H
  00053	77 53		 ja	 SHORT $LN12@getStrToIn
  00055	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@getStrToIn[eax]
  0005c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN22@getStrToIn[eax*4]
$LN9@getStrToIn:

; 59   : 		case 'k': case 'K': nRes = nRes * 1024; break;

  00063	c1 e6 0a	 shl	 esi, 10			; 0000000aH

; 63   : 		}
; 64   : 	}
; 65   : 	return nRes;

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx

; 66   : }

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
$LN10@getStrToIn:

; 60   : 		case 'm': case 'M': nRes = nRes * 1024 * 1024; break;

  0007a	c1 e6 14	 shl	 esi, 20			; 00000014H

; 63   : 		}
; 64   : 	}
; 65   : 	return nRes;

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx

; 66   : }

  00081	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00084	33 cd		 xor	 ecx, ebp
  00086	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
$LN11@getStrToIn:

; 61   : 		case 'g': case 'G': nRes = nRes * 1024 * 1024 * 1024; break;

  00091	c1 e6 1e	 shl	 esi, 30			; 0000001eH

; 63   : 		}
; 64   : 	}
; 65   : 	return nRes;

  00094	8b c6		 mov	 eax, esi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 66   : }

  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN12@getStrToIn:

; 62   : 		default: printf("getStrToInt parsing FAIL!!! cUnit[%c]\n", cUnit);

  000a8	51		 push	 ecx
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FIAACEOP@getStrToInt?5parsing?5FAIL?$CB?$CB?$CB?5cUni@
  000ae	e8 00 00 00 00	 call	 _printf
  000b3	83 c4 08	 add	 esp, 8

; 63   : 		}
; 64   : 	}
; 65   : 	return nRes;

  000b6	8b c6		 mov	 eax, esi
$LN4@getStrToIn:

; 66   : }

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bb	5e		 pop	 esi
  000bc	33 cd		 xor	 ecx, ebp
  000be	5b		 pop	 ebx
  000bf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c2 04 00	 ret	 4
  000ca	66 90		 npad	 2
$LN22@getStrToIn:
  000cc	00 00 00 00	 DD	 $LN11@getStrToIn
  000d0	00 00 00 00	 DD	 $LN9@getStrToIn
  000d4	00 00 00 00	 DD	 $LN10@getStrToIn
  000d8	00 00 00 00	 DD	 $LN12@getStrToIn
$LN18@getStrToIn:
  000dc	00		 DB	 0
  000dd	03		 DB	 3
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	01		 DB	 1
  000e1	03		 DB	 3
  000e2	02		 DB	 2
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	03		 DB	 3
  000f1	03		 DB	 3
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	03		 DB	 3
  000f9	03		 DB	 3
  000fa	03		 DB	 3
  000fb	03		 DB	 3
  000fc	00		 DB	 0
  000fd	03		 DB	 3
  000fe	03		 DB	 3
  000ff	03		 DB	 3
  00100	01		 DB	 1
  00101	03		 DB	 3
  00102	02		 DB	 2
?getStrToInt@CMemManager@@QAEHPAD@Z ENDP		; CMemManager::getStrToInt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?delBufByIndex@CMemManager@@QAEXPADH@Z
_TEXT	SEGMENT
_pBuf$ = 8						; size = 4
_nIdx$ = 12						; size = 4
?delBufByIndex@CMemManager@@QAEXPADH@Z PROC		; CMemManager::delBufByIndex, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 144  : 	if (IDX_BUF_2m < nIdx || !m_pBufList[nIdx]) { if (pBuf) free(pBuf); return; }

  00003	8b 45 0c	 mov	 eax, DWORD PTR _nIdx$[ebp]
  00006	83 f8 15	 cmp	 eax, 21			; 00000015H
  00009	7f 13		 jg	 SHORT $LN3@delBufByIn
  0000b	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 0c		 je	 SHORT $LN3@delBufByIn

; 145  : 	if(m_pBufList[nIdx]) m_pBufList[nIdx]->delMem(pBuf);

  00012	ff 75 08	 push	 DWORD PTR _pBuf$[ebp]
  00015	e8 00 00 00 00	 call	 ?delMem@CBufPool@@QAEXPAD@Z ; CBufPool::delMem

; 146  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
$LN3@delBufByIn:

; 144  : 	if (IDX_BUF_2m < nIdx || !m_pBufList[nIdx]) { if (pBuf) free(pBuf); return; }

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pBuf$[ebp]
  00021	85 c0		 test	 eax, eax
  00023	74 0a		 je	 SHORT $LN4@delBufByIn
  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0002c	83 c4 04	 add	 esp, 4
$LN4@delBufByIn:

; 146  : }

  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?delBufByIndex@CMemManager@@QAEXPADH@Z ENDP		; CMemManager::delBufByIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?delBuf@CMemManager@@QAEXPADH@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_pBuf$ = 8						; size = 4
_nSize$ = 12						; size = 4
?delBuf@CMemManager@@QAEXPADH@Z PROC			; CMemManager::delBuf, COMDAT
; _this$ = ecx

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00006	8b 55 0c	 mov	 edx, DWORD PTR _nSize$[ebp]
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	56		 push	 esi
  0000f	57		 push	 edi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00010	8b f9		 mov	 edi, ecx
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00012	8b f2		 mov	 esi, edx
  00014	66 0f 6e c2	 movd	 xmm0, edx
  00018	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0001c	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$1[ebp+4]
  00024	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00027	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0002d	d3 e0		 shl	 eax, cl
  0002f	2b f0		 sub	 esi, eax
  00031	23 f2		 and	 esi, edx
  00033	f7 de		 neg	 esi
  00035	1b f6		 sbb	 esi, esi
  00037	f7 de		 neg	 esi
  00039	03 f1		 add	 esi, ecx
; File e:\infinia-library-3.0\com\src\commemmanager.cpp

; 144  : 	if (IDX_BUF_2m < nIdx || !m_pBufList[nIdx]) { if (pBuf) free(pBuf); return; }

  0003b	83 fe 15	 cmp	 esi, 21			; 00000015H
  0003e	7f 17		 jg	 SHORT $LN7@delBuf
  00040	8b 0c b7	 mov	 ecx, DWORD PTR [edi+esi*4]
  00043	85 c9		 test	 ecx, ecx
  00045	74 10		 je	 SHORT $LN7@delBuf

; 145  : 	if(m_pBufList[nIdx]) m_pBufList[nIdx]->delMem(pBuf);

  00047	ff 75 08	 push	 DWORD PTR _pBuf$[ebp]
  0004a	e8 00 00 00 00	 call	 ?delMem@CBufPool@@QAEXPAD@Z ; CBufPool::delMem
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
$LN7@delBuf:
; File e:\infinia-library-3.0\com\src\commemmanager.cpp

; 144  : 	if (IDX_BUF_2m < nIdx || !m_pBufList[nIdx]) { if (pBuf) free(pBuf); return; }

  00057	8b 45 08	 mov	 eax, DWORD PTR _pBuf$[ebp]
  0005a	85 c0		 test	 eax, eax
  0005c	74 0a		 je	 SHORT $LN8@delBuf
  0005e	50		 push	 eax
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00065	83 c4 04	 add	 esp, 4
$LN8@delBuf:
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
; File e:\infinia-library-3.0\com\include\commemmanager.h

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
?delBuf@CMemManager@@QAEXPADH@Z ENDP			; CMemManager::delBuf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?alloc@CMemManager@@QAE_NXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?alloc@CMemManager@@QAE_NXZ PROC			; CMemManager::alloc, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?alloc@CMemManager@@QAE_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 90   : 	int i;
; 91   : 	for (i = IDX_BUF_2; i < IDX_BUF_MAX; i++)

  00028	be 01 00 00 00	 mov	 esi, 1
  0002d	0f 1f 00	 npad	 3
$LL4@alloc:

; 92   : 	{
; 93   : 		if (!m_stConfig.nMaxList[i]) continue;

  00030	83 7c b3 58 00	 cmp	 DWORD PTR [ebx+esi*4+88], 0
  00035	74 66		 je	 SHORT $LN2@alloc

; 94   : 
; 95   : 		if (m_pBufList[i]) {

  00037	8b 3c b3	 mov	 edi, DWORD PTR [ebx+esi*4]
  0003a	85 ff		 test	 edi, edi
  0003c	74 19		 je	 SHORT $LN6@alloc

; 96   : 			delete m_pBufList[i];
; 97   : 			m_pBufList[i] = NULL;

  0003e	8b cf		 mov	 ecx, edi
  00040	e8 00 00 00 00	 call	 ??1CBufPool@@QAE@XZ	; CBufPool::~CBufPool
  00045	6a 20		 push	 32			; 00000020H
  00047	57		 push	 edi
  00048	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004d	83 c4 08	 add	 esp, 8
  00050	c7 04 b3 00 00
	00 00		 mov	 DWORD PTR [ebx+esi*4], 0
$LN6@alloc:

; 98   : 		}
; 99   : 		m_pBufList[i] = new (std::nothrow) CBufPool();

  00057	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0005c	6a 20		 push	 32			; 00000020H
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXIABUnothrow_t@std@@@Z ; operator new
  00063	83 c4 08	 add	 esp, 8
  00066	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	85 c0		 test	 eax, eax
  00072	74 09		 je	 SHORT $LN12@alloc
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??0CBufPool@@QAE@XZ	; CBufPool::CBufPool
  0007b	eb 02		 jmp	 SHORT $LN13@alloc
$LN12@alloc:
  0007d	33 c0		 xor	 eax, eax
$LN13@alloc:
  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 100  : 		if (m_pBufList[i]) {

  00089	85 c0		 test	 eax, eax
  0008b	74 10		 je	 SHORT $LN2@alloc

; 101  : 			if (!m_pBufList[i]->alloc(i, m_stConfig.nMaxList[i])) {

  0008d	ff 74 b3 58	 push	 DWORD PTR [ebx+esi*4+88]
  00091	8b c8		 mov	 ecx, eax
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ?alloc@CBufPool@@QAE_NHH@Z ; CBufPool::alloc
  00099	84 c0		 test	 al, al
  0009b	74 1a		 je	 SHORT $LN26@alloc
$LN2@alloc:

; 90   : 	int i;
; 91   : 	for (i = IDX_BUF_2; i < IDX_BUF_MAX; i++)

  0009d	46		 inc	 esi
  0009e	83 fe 16	 cmp	 esi, 22			; 00000016H
  000a1	7c 8d		 jl	 SHORT $LL4@alloc

; 105  : 			}
; 106  : 		}
; 107  : 	}
; 108  : 	return true;

  000a3	b0 01		 mov	 al, 1

; 109  : 
; 110  : }

  000a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000af	59		 pop	 ecx
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	5b		 pop	 ebx
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN26@alloc:

; 102  : 				delete m_pBufList[i];

  000b7	8d 3c b3	 lea	 edi, DWORD PTR [ebx+esi*4]
  000ba	8b 37		 mov	 esi, DWORD PTR [edi]
  000bc	85 f6		 test	 esi, esi
  000be	74 12		 je	 SHORT $LN22@alloc
  000c0	8b ce		 mov	 ecx, esi
  000c2	e8 00 00 00 00	 call	 ??1CBufPool@@QAE@XZ	; CBufPool::~CBufPool
  000c7	6a 20		 push	 32			; 00000020H
  000c9	56		 push	 esi
  000ca	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000cf	83 c4 08	 add	 esp, 8
$LN22@alloc:

; 103  : 				m_pBufList[i] = NULL;

  000d2	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 104  : 				return false;

  000d8	32 c0		 xor	 al, al

; 109  : 
; 110  : }

  000da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e4	59		 pop	 ecx
  000e5	5f		 pop	 edi
  000e6	5e		 pop	 esi
  000e7	5b		 pop	 ebx
  000e8	8b e5		 mov	 esp, ebp
  000ea	5d		 pop	 ebp
  000eb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?alloc@CMemManager@@QAE_NXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXABUnothrow_t@std@@@Z ; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__ehhandler$?alloc@CMemManager@@QAE_NXZ:
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?alloc@CMemManager@@QAE_NXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?alloc@CMemManager@@QAE_NXZ ENDP			; CMemManager::alloc
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
; File e:\infinia-library-3.0\com\include\combufpool.h
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?init@CMemManager@@QAEHPADH@Z
_TEXT	SEGMENT
_$S1$1 = -8						; size = 8
_pStrSize$ = 8						; size = 4
_nCount$ = 12						; size = 4
?init@CMemManager@@QAEHPADH@Z PROC			; CMemManager::init, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi

; 79   : 	int nSize = getStrToInt(pStrSize);

  00008	ff 75 08	 push	 DWORD PTR _pStrSize$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	e8 00 00 00 00	 call	 ?getStrToInt@CMemManager@@QAEHPAD@Z ; CMemManager::getStrToInt
  00012	8b f0		 mov	 esi, eax

; 80   : 	int nIdx;
; 81   : 	if (nSize) {

  00014	85 f6		 test	 esi, esi
  00016	74 39		 je	 SHORT $LN2@init
  00018	66 0f 6e c6	 movd	 xmm0, esi
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00025	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$1[ebp], xmm0
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _$S1$1[ebp+4]
  0002d	c1 fa 14	 sar	 edx, 20			; 00000014H
  00030	81 ea ff 03 00
	00		 sub	 edx, 1023		; 000003ffH
  00036	8b ca		 mov	 ecx, edx
  00038	d3 e0		 shl	 eax, cl
  0003a	8b ce		 mov	 ecx, esi
  0003c	2b c8		 sub	 ecx, eax
; File e:\infinia-library-3.0\com\src\commemmanager.cpp

; 83   : 		m_stConfig.nMaxList[nIdx] += nCount;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR _nCount$[ebp]
; File e:\infinia-library-3.0\com\include\combufpool.h

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00041	23 ce		 and	 ecx, esi
  00043	f7 d9		 neg	 ecx
  00045	1b c9		 sbb	 ecx, ecx
  00047	f7 d9		 neg	 ecx
  00049	03 ca		 add	 ecx, edx
; File e:\infinia-library-3.0\com\src\commemmanager.cpp

; 83   : 		m_stConfig.nMaxList[nIdx] += nCount;

  0004b	01 44 8f 58	 add	 DWORD PTR [edi+ecx*4+88], eax

; 84   : 	}
; 85   : 	return nSize;

  0004f	8b c6		 mov	 eax, esi
$LN2@init:
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 86   : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
?init@CMemManager@@QAEHPADH@Z ENDP			; CMemManager::init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ?init@CMemManager@@QAEXPAUSTBufConf@@@Z
_TEXT	SEGMENT
_pConf$ = 8						; size = 4
?init@CMemManager@@QAEXPAUSTBufConf@@@Z PROC		; CMemManager::init, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 70   : 	int i;
; 71   : 	for (i = 0; i < IDX_BUF_MAX; i++)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pConf$[ebp]
  00007	8d 41 5c	 lea	 eax, DWORD PTR [ecx+92]
  0000a	33 d2		 xor	 edx, edx
  0000c	0f 1f 40 00	 npad	 4
$LL4@init:

; 72   : 	{
; 73   : 		m_stConfig.nMaxList[i] += pConf->nMaxList[i];

  00010	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00013	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00016	01 48 f4	 add	 DWORD PTR [eax-12], ecx
  00019	8b 4c 96 04	 mov	 ecx, DWORD PTR [esi+edx*4+4]
  0001d	83 c2 02	 add	 edx, 2
  00020	01 48 f8	 add	 DWORD PTR [eax-8], ecx
  00023	83 fa 16	 cmp	 edx, 22			; 00000016H
  00026	7c e8		 jl	 SHORT $LL4@init
  00028	5e		 pop	 esi

; 74   : 	}
; 75   : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?init@CMemManager@@QAEXPAUSTBufConf@@@Z ENDP		; CMemManager::init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ??1CMemManager@@QAE@XZ
_TEXT	SEGMENT
??1CMemManager@@QAE@XZ PROC				; CMemManager::~CMemManager, COMDAT
; _this$ = ecx

; 35   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b d9		 mov	 ebx, ecx

; 36   : 	int i =  0;
; 37   : 	for (i = IDX_BUF_2; i < IDX_BUF_MAX; i++) {

  00005	be 01 00 00 00	 mov	 esi, 1
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@CMemManage:

; 38   : 		if (m_pBufList[i]) {

  00010	8b 3c b3	 mov	 edi, DWORD PTR [ebx+esi*4]
  00013	85 ff		 test	 edi, edi
  00015	74 19		 je	 SHORT $LN2@CMemManage

; 39   : 			delete m_pBufList[i]; m_pBufList[i] = 0;

  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ??1CBufPool@@QAE@XZ	; CBufPool::~CBufPool
  0001e	6a 20		 push	 32			; 00000020H
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	c7 04 b3 00 00
	00 00		 mov	 DWORD PTR [ebx+esi*4], 0
$LN2@CMemManage:

; 36   : 	int i =  0;
; 37   : 	for (i = IDX_BUF_2; i < IDX_BUF_MAX; i++) {

  00030	46		 inc	 esi
  00031	83 fe 16	 cmp	 esi, 22			; 00000016H
  00034	7c da		 jl	 SHORT $LL4@CMemManage

; 40   : 		}
; 41   : 	}
; 42   : 
; 43   : 
; 44   : }

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx
  00039	c3		 ret	 0
??1CMemManager@@QAE@XZ ENDP				; CMemManager::~CMemManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\src\commemmanager.cpp
;	COMDAT ??0CMemManager@@QAE@XZ
_TEXT	SEGMENT
??0CMemManager@@QAE@XZ PROC				; CMemManager::CMemManager, COMDAT
; _this$ = ecx

; 9    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	68 b0 00 00 00	 push	 176			; 000000b0H
  00008	6a 00		 push	 0
  0000a	56		 push	 esi

; 10   : 	m_nOverMaxIdx = 0;

  0000b	c7 86 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+176], 0
  00015	e8 00 00 00 00	 call	 _memset

; 11   : 	memset(m_pBufList, 0, sizeof(m_pBufList));
; 12   : 	memset(&m_stConfig, 0, sizeof(STBufConf));
; 13   : 	int i;
; 14   : 
; 15   : 	m_stConfig.nMaxList[IDX_BUF_2] = 256;

  0001a	c7 46 5c 00 01
	00 00		 mov	 DWORD PTR [esi+92], 256	; 00000100H
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 16   : 	m_stConfig.nMaxList[IDX_BUF_4] = 256;

  00024	c7 46 60 00 01
	00 00		 mov	 DWORD PTR [esi+96], 256	; 00000100H

; 17   : 	m_stConfig.nMaxList[IDX_BUF_8] = 2048;
; 18   : 	m_stConfig.nMaxList[IDX_BUF_16] = 2048;
; 19   : 	for (i = IDX_BUF_32; i < IDX_BUF_16k; i++)
; 20   : 	{
; 21   : 		m_stConfig.nMaxList[i] = 64;
; 22   : 	}
; 23   : 	for (i = IDX_BUF_16k; i < IDX_BUF_64k; i++)
; 24   : 	{
; 25   : 		m_stConfig.nMaxList[i] = 4;
; 26   : 	}
; 27   : 	for (i = IDX_BUF_64k; i < IDX_BUF_512k; i++)
; 28   : 	{
; 29   : 		m_stConfig.nMaxList[i] = 2;
; 30   : 	}
; 31   : 	m_stConfig.nMaxList[IDX_BUF_1m] = 1;
; 32   : }

  0002b	8b c6		 mov	 eax, esi
  0002d	c7 46 64 00 08
	00 00		 mov	 DWORD PTR [esi+100], 2048 ; 00000800H
  00034	c7 46 68 00 08
	00 00		 mov	 DWORD PTR [esi+104], 2048 ; 00000800H
  0003b	c7 46 6c 40 00
	00 00		 mov	 DWORD PTR [esi+108], 64	; 00000040H
  00042	c7 46 70 40 00
	00 00		 mov	 DWORD PTR [esi+112], 64	; 00000040H
  00049	c7 46 74 40 00
	00 00		 mov	 DWORD PTR [esi+116], 64	; 00000040H
  00050	c7 46 78 40 00
	00 00		 mov	 DWORD PTR [esi+120], 64	; 00000040H
  00057	c7 46 7c 40 00
	00 00		 mov	 DWORD PTR [esi+124], 64	; 00000040H
  0005e	c7 86 80 00 00
	00 40 00 00 00	 mov	 DWORD PTR [esi+128], 64	; 00000040H
  00068	c7 86 84 00 00
	00 40 00 00 00	 mov	 DWORD PTR [esi+132], 64	; 00000040H
  00072	c7 86 88 00 00
	00 40 00 00 00	 mov	 DWORD PTR [esi+136], 64	; 00000040H
  0007c	c7 86 8c 00 00
	00 40 00 00 00	 mov	 DWORD PTR [esi+140], 64	; 00000040H
  00086	c7 86 90 00 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+144], 4
  00090	c7 86 94 00 00
	00 04 00 00 00	 mov	 DWORD PTR [esi+148], 4
  0009a	c7 86 98 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+152], 2
  000a4	c7 86 9c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+156], 2
  000ae	c7 86 a0 00 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+160], 2
  000b8	c7 86 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+168], 1
  000c2	5e		 pop	 esi
  000c3	c3		 ret	 0
??0CMemManager@@QAE@XZ ENDP				; CMemManager::CMemManager
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBufPool@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBufPool@@QAEPAXI@Z PROC				; CBufPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBufPool@@QAE@XZ	; CBufPool::~CBufPool
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 20		 push	 32			; 00000020H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBufPool@@QAEPAXI@Z ENDP				; CBufPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
_$S1$ = -8						; size = 8
_s$ = 8							; size = 4
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000a	ba 01 00 00 00	 mov	 edx, 1
  0000f	8b c6		 mov	 eax, esi
  00011	66 0f 6e c6	 movd	 xmm0, esi
  00015	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00019	f2 0f 11 45 f8	 movsd	 QWORD PTR _$S1$[ebp], xmm0
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _$S1$[ebp+4]
  00021	c1 f9 14	 sar	 ecx, 20			; 00000014H
  00024	81 e9 ff 03 00
	00		 sub	 ecx, 1023		; 000003ffH
  0002a	d3 e2		 shl	 edx, cl
  0002c	2b c2		 sub	 eax, edx
  0002e	23 c6		 and	 eax, esi
  00030	f7 d8		 neg	 eax
  00032	5e		 pop	 esi
  00033	1b c0		 sbb	 eax, eax
  00035	f7 d8		 neg	 eax
  00037	03 c1		 add	 eax, ecx
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 950  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);
; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Format$[ebp]
  00007	6a 01		 push	 1
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0000f	83 c4 04	 add	 esp, 4

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00012	8d 4d 0c	 lea	 ecx, DWORD PTR __Format$[ebp+4]
  00015	51		 push	 ecx
  00016	6a 00		 push	 0
  00018	56		 push	 esi
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001f	ff 70 04	 push	 DWORD PTR [eax+4]
  00022	ff 30		 push	 DWORD PTR [eax]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0002a	83 c4 18	 add	 esp, 24			; 00000018H
  0002d	5e		 pop	 esi

; 955  :     __crt_va_end(_ArgList);
; 956  :     return _Result;
; 957  : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	ff 75 14	 push	 DWORD PTR __ArgList$[ebp]
  00006	ff 75 10	 push	 DWORD PTR __Locale$[ebp]
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0001f	83 c4 18	 add	 esp, 24			; 00000018H

; 640  : }

  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
