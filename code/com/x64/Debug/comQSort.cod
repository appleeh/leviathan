; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?SortEx@@YAXPEAUSTSortData@@H@Z			; SortEx
EXTRN	memcpy:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$?SortEx@@YAXPEAUSTSortData@@H@Z DD imagerel $LN23
	DD	imagerel $LN23+1737
	DD	imagerel $unwind$?SortEx@@YAXPEAUSTSortData@@H@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?SortEx@@YAXPEAUSTSortData@@H@Z DD 033a19H
	DD	01c0111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0d8H
xdata	ENDS
CONST	SEGMENT
?SortEx@@YAXPEAUSTSortData@@H@Z$rtcName$0 DB 073H	; SortEx
	DB	074H
	DB	056H
	DB	061H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+1
?SortEx@@YAXPEAUSTSortData@@H@Z$rtcName$1 DB 073H	; SortEx
	DB	074H
	DB	056H
	DB	061H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+1
?SortEx@@YAXPEAUSTSortData@@H@Z$rtcVarDesc DD 078H	; SortEx
	DD	010H
	DQ	FLAT:?SortEx@@YAXPEAUSTSortData@@H@Z$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?SortEx@@YAXPEAUSTSortData@@H@Z$rtcName$0
	ORG $+96
?SortEx@@YAXPEAUSTSortData@@H@Z$rtcFrameData DD 02H	; SortEx
	DD	00H
	DQ	FLAT:?SortEx@@YAXPEAUSTSortData@@H@Z$rtcVarDesc
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqsort.cpp
_TEXT	SEGMENT
loopcnt$ = 32
left$ = 36
right$ = 40
nMin$ = 44
nMax$ = 48
i$ = 52
j$ = 56
nSize$ = 60
stVal1$ = 72
stVal2$ = 120
tv140 = 160
tv164 = 168
tv196 = 176
tv228 = 184
tv260 = 192
tv291 = 200
tv301 = 208
__$ArrayPad$ = 216
arr$ = 240
nCount$ = 248
?SortEx@@YAXPEAUSTSortData@@H@Z PROC			; SortEx

; 5    : {

$LN23:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00011	48 8b fc	 mov	 rdi, rsp
  00014	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]
  00028	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002f	48 33 c4	 xor	 rax, rsp
  00032	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6    : 	int loopcnt = nCount >> 1, left, right = nCount - 1;

  0003a	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR nCount$[rsp]
  00041	d1 f8		 sar	 eax, 1
  00043	89 44 24 20	 mov	 DWORD PTR loopcnt$[rsp], eax
  00047	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR nCount$[rsp]
  0004e	ff c8		 dec	 eax
  00050	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 7    : 	int nMin, nMax;
; 8    : 	int i, j, nSize = sizeof(STSortData);

  00054	c7 44 24 3c 10
	00 00 00	 mov	 DWORD PTR nSize$[rsp], 16

; 9    : 	STSortData stVal1, stVal2;
; 10   : 
; 11   : 	for (i = 0; i < loopcnt; i++)

  0005c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00064	eb 0a		 jmp	 SHORT $LN4@SortEx
$LN2@SortEx:
  00066	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN4@SortEx:
  00070	8b 44 24 20	 mov	 eax, DWORD PTR loopcnt$[rsp]
  00074	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  00078	0f 8d 23 06 00
	00		 jge	 $LN3@SortEx

; 12   : 	{
; 13   : 		left = i;

  0007e	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00082	89 44 24 24	 mov	 DWORD PTR left$[rsp], eax

; 14   : 		//------------------------------------
; 15   : 		nMin = left; nMax = left;

  00086	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  0008a	89 44 24 2c	 mov	 DWORD PTR nMin$[rsp], eax
  0008e	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  00092	89 44 24 30	 mov	 DWORD PTR nMax$[rsp], eax

; 16   : 		for (j = left + 1; j <= right; j++) {

  00096	8b 44 24 24	 mov	 eax, DWORD PTR left$[rsp]
  0009a	ff c0		 inc	 eax
  0009c	89 44 24 38	 mov	 DWORD PTR j$[rsp], eax
  000a0	eb 0a		 jmp	 SHORT $LN7@SortEx
$LN5@SortEx:
  000a2	8b 44 24 38	 mov	 eax, DWORD PTR j$[rsp]
  000a6	ff c0		 inc	 eax
  000a8	89 44 24 38	 mov	 DWORD PTR j$[rsp], eax
$LN7@SortEx:
  000ac	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  000b0	39 44 24 38	 cmp	 DWORD PTR j$[rsp], eax
  000b4	7f 6a		 jg	 SHORT $LN6@SortEx

; 17   : 			if (arr[nMin].address > arr[j].address)nMin = j;

  000b6	48 63 44 24 2c	 movsxd	 rax, DWORD PTR nMin$[rsp]
  000bb	48 6b c0 10	 imul	 rax, rax, 16
  000bf	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR j$[rsp]
  000c4	48 6b c9 10	 imul	 rcx, rcx, 16
  000c8	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  000d0	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  000d8	41 8b 0c 08	 mov	 ecx, DWORD PTR [r8+rcx]
  000dc	39 0c 02	 cmp	 DWORD PTR [rdx+rax], ecx
  000df	76 0a		 jbe	 SHORT $LN8@SortEx
  000e1	8b 44 24 38	 mov	 eax, DWORD PTR j$[rsp]
  000e5	89 44 24 2c	 mov	 DWORD PTR nMin$[rsp], eax
  000e9	eb 33		 jmp	 SHORT $LN9@SortEx
$LN8@SortEx:

; 18   : 			else if (arr[nMax].address < arr[j].address)nMax = j;

  000eb	48 63 44 24 30	 movsxd	 rax, DWORD PTR nMax$[rsp]
  000f0	48 6b c0 10	 imul	 rax, rax, 16
  000f4	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR j$[rsp]
  000f9	48 6b c9 10	 imul	 rcx, rcx, 16
  000fd	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00105	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  0010d	41 8b 0c 08	 mov	 ecx, DWORD PTR [r8+rcx]
  00111	39 0c 02	 cmp	 DWORD PTR [rdx+rax], ecx
  00114	73 08		 jae	 SHORT $LN10@SortEx
  00116	8b 44 24 38	 mov	 eax, DWORD PTR j$[rsp]
  0011a	89 44 24 30	 mov	 DWORD PTR nMax$[rsp], eax
$LN10@SortEx:
$LN9@SortEx:

; 19   : 		}

  0011e	eb 82		 jmp	 SHORT $LN5@SortEx
$LN6@SortEx:

; 20   : 		if (nMin == nMax) return;

  00120	8b 44 24 30	 mov	 eax, DWORD PTR nMax$[rsp]
  00124	39 44 24 2c	 cmp	 DWORD PTR nMin$[rsp], eax
  00128	75 05		 jne	 SHORT $LN11@SortEx
  0012a	e9 72 05 00 00	 jmp	 $LN1@SortEx
$LN11@SortEx:

; 21   : 
; 22   : 		if (left == nMax) {

  0012f	8b 44 24 30	 mov	 eax, DWORD PTR nMax$[rsp]
  00133	39 44 24 24	 cmp	 DWORD PTR left$[rsp], eax
  00137	0f 85 89 01 00
	00		 jne	 $LN12@SortEx

; 23   : 			memcpy(&stVal2, &arr[nMax], nSize);

  0013d	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00142	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00147	48 6b c9 10	 imul	 rcx, rcx, 16
  0014b	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00153	48 03 d1	 add	 rdx, rcx
  00156	48 8b ca	 mov	 rcx, rdx
  00159	4c 8b c0	 mov	 r8, rax
  0015c	48 8b d1	 mov	 rdx, rcx
  0015f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR stVal2$[rsp]
  00164	e8 00 00 00 00	 call	 memcpy

; 24   : 			if (right == nMin) {

  00169	8b 44 24 2c	 mov	 eax, DWORD PTR nMin$[rsp]
  0016d	39 44 24 28	 cmp	 DWORD PTR right$[rsp], eax
  00171	75 7f		 jne	 SHORT $LN14@SortEx

; 25   : 				memcpy(&arr[left], &arr[nMin], nSize);

  00173	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00178	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  0017d	48 6b c9 10	 imul	 rcx, rcx, 16
  00181	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00189	48 03 d1	 add	 rdx, rcx
  0018c	48 8b ca	 mov	 rcx, rdx
  0018f	48 63 54 24 24	 movsxd	 rdx, DWORD PTR left$[rsp]
  00194	48 6b d2 10	 imul	 rdx, rdx, 16
  00198	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  001a0	4c 03 c2	 add	 r8, rdx
  001a3	49 8b d0	 mov	 rdx, r8
  001a6	48 89 94 24 a0
	00 00 00	 mov	 QWORD PTR tv140[rsp], rdx
  001ae	4c 8b c0	 mov	 r8, rax
  001b1	48 8b d1	 mov	 rdx, rcx
  001b4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv140[rsp]
  001bc	48 8b c8	 mov	 rcx, rax
  001bf	e8 00 00 00 00	 call	 memcpy

; 26   : 				memcpy(&arr[right], &stVal2, nSize);

  001c4	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  001c9	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR right$[rsp]
  001ce	48 6b c9 10	 imul	 rcx, rcx, 16
  001d2	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  001da	48 03 d1	 add	 rdx, rcx
  001dd	48 8b ca	 mov	 rcx, rdx
  001e0	4c 8b c0	 mov	 r8, rax
  001e3	48 8d 54 24 78	 lea	 rdx, QWORD PTR stVal2$[rsp]
  001e8	e8 00 00 00 00	 call	 memcpy

; 27   : 			}
; 28   : 			else {

  001ed	e9 cf 00 00 00	 jmp	 $LN15@SortEx
$LN14@SortEx:

; 29   : 				memcpy(&stVal1, &arr[right], nSize);

  001f2	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  001f7	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR right$[rsp]
  001fc	48 6b c9 10	 imul	 rcx, rcx, 16
  00200	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00208	48 03 d1	 add	 rdx, rcx
  0020b	48 8b ca	 mov	 rcx, rdx
  0020e	4c 8b c0	 mov	 r8, rax
  00211	48 8b d1	 mov	 rdx, rcx
  00214	48 8d 4c 24 48	 lea	 rcx, QWORD PTR stVal1$[rsp]
  00219	e8 00 00 00 00	 call	 memcpy

; 30   : 				memcpy(&arr[left], &arr[nMin], nSize);

  0021e	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00223	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00228	48 6b c9 10	 imul	 rcx, rcx, 16
  0022c	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00234	48 03 d1	 add	 rdx, rcx
  00237	48 8b ca	 mov	 rcx, rdx
  0023a	48 63 54 24 24	 movsxd	 rdx, DWORD PTR left$[rsp]
  0023f	48 6b d2 10	 imul	 rdx, rdx, 16
  00243	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  0024b	4c 03 c2	 add	 r8, rdx
  0024e	49 8b d0	 mov	 rdx, r8
  00251	48 89 94 24 a8
	00 00 00	 mov	 QWORD PTR tv164[rsp], rdx
  00259	4c 8b c0	 mov	 r8, rax
  0025c	48 8b d1	 mov	 rdx, rcx
  0025f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv164[rsp]
  00267	48 8b c8	 mov	 rcx, rax
  0026a	e8 00 00 00 00	 call	 memcpy

; 31   : 				memcpy(&arr[right], &stVal2, nSize);

  0026f	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00274	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR right$[rsp]
  00279	48 6b c9 10	 imul	 rcx, rcx, 16
  0027d	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00285	48 03 d1	 add	 rdx, rcx
  00288	48 8b ca	 mov	 rcx, rdx
  0028b	4c 8b c0	 mov	 r8, rax
  0028e	48 8d 54 24 78	 lea	 rdx, QWORD PTR stVal2$[rsp]
  00293	e8 00 00 00 00	 call	 memcpy

; 32   : 				memcpy(&arr[nMin], &stVal1, nSize);

  00298	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0029d	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  002a2	48 6b c9 10	 imul	 rcx, rcx, 16
  002a6	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  002ae	48 03 d1	 add	 rdx, rcx
  002b1	48 8b ca	 mov	 rcx, rdx
  002b4	4c 8b c0	 mov	 r8, rax
  002b7	48 8d 54 24 48	 lea	 rdx, QWORD PTR stVal1$[rsp]
  002bc	e8 00 00 00 00	 call	 memcpy
$LN15@SortEx:

; 33   : 			}

  002c1	e9 cc 03 00 00	 jmp	 $LN13@SortEx
$LN12@SortEx:

; 34   : 		}
; 35   : 		else if (left == nMin) {

  002c6	8b 44 24 2c	 mov	 eax, DWORD PTR nMin$[rsp]
  002ca	39 44 24 24	 cmp	 DWORD PTR left$[rsp], eax
  002ce	0f 85 ab 00 00
	00		 jne	 $LN16@SortEx

; 36   : 			memcpy(&stVal1, &arr[right], nSize);

  002d4	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  002d9	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR right$[rsp]
  002de	48 6b c9 10	 imul	 rcx, rcx, 16
  002e2	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  002ea	48 03 d1	 add	 rdx, rcx
  002ed	48 8b ca	 mov	 rcx, rdx
  002f0	4c 8b c0	 mov	 r8, rax
  002f3	48 8b d1	 mov	 rdx, rcx
  002f6	48 8d 4c 24 48	 lea	 rcx, QWORD PTR stVal1$[rsp]
  002fb	e8 00 00 00 00	 call	 memcpy

; 37   : 			memcpy(&arr[right], &arr[nMax], nSize);

  00300	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00305	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  0030a	48 6b c9 10	 imul	 rcx, rcx, 16
  0030e	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00316	48 03 d1	 add	 rdx, rcx
  00319	48 8b ca	 mov	 rcx, rdx
  0031c	48 63 54 24 28	 movsxd	 rdx, DWORD PTR right$[rsp]
  00321	48 6b d2 10	 imul	 rdx, rdx, 16
  00325	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  0032d	4c 03 c2	 add	 r8, rdx
  00330	49 8b d0	 mov	 rdx, r8
  00333	48 89 94 24 b0
	00 00 00	 mov	 QWORD PTR tv196[rsp], rdx
  0033b	4c 8b c0	 mov	 r8, rax
  0033e	48 8b d1	 mov	 rdx, rcx
  00341	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv196[rsp]
  00349	48 8b c8	 mov	 rcx, rax
  0034c	e8 00 00 00 00	 call	 memcpy

; 38   : 			memcpy(&arr[nMax], &stVal1, nSize);

  00351	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00356	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  0035b	48 6b c9 10	 imul	 rcx, rcx, 16
  0035f	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00367	48 03 d1	 add	 rdx, rcx
  0036a	48 8b ca	 mov	 rcx, rdx
  0036d	4c 8b c0	 mov	 r8, rax
  00370	48 8d 54 24 48	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00375	e8 00 00 00 00	 call	 memcpy
  0037a	e9 13 03 00 00	 jmp	 $LN17@SortEx
$LN16@SortEx:

; 39   : 		}
; 40   : 		else if (right == nMin) {

  0037f	8b 44 24 2c	 mov	 eax, DWORD PTR nMin$[rsp]
  00383	39 44 24 28	 cmp	 DWORD PTR right$[rsp], eax
  00387	0f 85 00 01 00
	00		 jne	 $LN18@SortEx

; 41   : 			memcpy(&stVal1, &arr[left], nSize);

  0038d	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00392	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR left$[rsp]
  00397	48 6b c9 10	 imul	 rcx, rcx, 16
  0039b	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  003a3	48 03 d1	 add	 rdx, rcx
  003a6	48 8b ca	 mov	 rcx, rdx
  003a9	4c 8b c0	 mov	 r8, rax
  003ac	48 8b d1	 mov	 rdx, rcx
  003af	48 8d 4c 24 48	 lea	 rcx, QWORD PTR stVal1$[rsp]
  003b4	e8 00 00 00 00	 call	 memcpy

; 42   : 			memcpy(&stVal2, &arr[nMin], nSize);

  003b9	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  003be	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  003c3	48 6b c9 10	 imul	 rcx, rcx, 16
  003c7	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  003cf	48 03 d1	 add	 rdx, rcx
  003d2	48 8b ca	 mov	 rcx, rdx
  003d5	4c 8b c0	 mov	 r8, rax
  003d8	48 8b d1	 mov	 rdx, rcx
  003db	48 8d 4c 24 78	 lea	 rcx, QWORD PTR stVal2$[rsp]
  003e0	e8 00 00 00 00	 call	 memcpy

; 43   : 			memcpy(&arr[right], &arr[nMax], nSize);

  003e5	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  003ea	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  003ef	48 6b c9 10	 imul	 rcx, rcx, 16
  003f3	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  003fb	48 03 d1	 add	 rdx, rcx
  003fe	48 8b ca	 mov	 rcx, rdx
  00401	48 63 54 24 28	 movsxd	 rdx, DWORD PTR right$[rsp]
  00406	48 6b d2 10	 imul	 rdx, rdx, 16
  0040a	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  00412	4c 03 c2	 add	 r8, rdx
  00415	49 8b d0	 mov	 rdx, r8
  00418	48 89 94 24 b8
	00 00 00	 mov	 QWORD PTR tv228[rsp], rdx
  00420	4c 8b c0	 mov	 r8, rax
  00423	48 8b d1	 mov	 rdx, rcx
  00426	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv228[rsp]
  0042e	48 8b c8	 mov	 rcx, rax
  00431	e8 00 00 00 00	 call	 memcpy

; 44   : 			memcpy(&arr[left], &stVal2, nSize);

  00436	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0043b	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR left$[rsp]
  00440	48 6b c9 10	 imul	 rcx, rcx, 16
  00444	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  0044c	48 03 d1	 add	 rdx, rcx
  0044f	48 8b ca	 mov	 rcx, rdx
  00452	4c 8b c0	 mov	 r8, rax
  00455	48 8d 54 24 78	 lea	 rdx, QWORD PTR stVal2$[rsp]
  0045a	e8 00 00 00 00	 call	 memcpy

; 45   : 			memcpy(&arr[nMax], &stVal1, nSize);

  0045f	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00464	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00469	48 6b c9 10	 imul	 rcx, rcx, 16
  0046d	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00475	48 03 d1	 add	 rdx, rcx
  00478	48 8b ca	 mov	 rcx, rdx
  0047b	4c 8b c0	 mov	 r8, rax
  0047e	48 8d 54 24 48	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00483	e8 00 00 00 00	 call	 memcpy
  00488	e9 05 02 00 00	 jmp	 $LN19@SortEx
$LN18@SortEx:

; 46   : 		}
; 47   : 		else if (right == nMax) {

  0048d	8b 44 24 30	 mov	 eax, DWORD PTR nMax$[rsp]
  00491	39 44 24 28	 cmp	 DWORD PTR right$[rsp], eax
  00495	0f 85 ab 00 00
	00		 jne	 $LN20@SortEx

; 48   : 			memcpy(&stVal1, &arr[left], nSize);

  0049b	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  004a0	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR left$[rsp]
  004a5	48 6b c9 10	 imul	 rcx, rcx, 16
  004a9	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  004b1	48 03 d1	 add	 rdx, rcx
  004b4	48 8b ca	 mov	 rcx, rdx
  004b7	4c 8b c0	 mov	 r8, rax
  004ba	48 8b d1	 mov	 rdx, rcx
  004bd	48 8d 4c 24 48	 lea	 rcx, QWORD PTR stVal1$[rsp]
  004c2	e8 00 00 00 00	 call	 memcpy

; 49   : 			memcpy(&arr[left], &arr[nMin], nSize);

  004c7	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  004cc	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  004d1	48 6b c9 10	 imul	 rcx, rcx, 16
  004d5	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  004dd	48 03 d1	 add	 rdx, rcx
  004e0	48 8b ca	 mov	 rcx, rdx
  004e3	48 63 54 24 24	 movsxd	 rdx, DWORD PTR left$[rsp]
  004e8	48 6b d2 10	 imul	 rdx, rdx, 16
  004ec	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  004f4	4c 03 c2	 add	 r8, rdx
  004f7	49 8b d0	 mov	 rdx, r8
  004fa	48 89 94 24 c0
	00 00 00	 mov	 QWORD PTR tv260[rsp], rdx
  00502	4c 8b c0	 mov	 r8, rax
  00505	48 8b d1	 mov	 rdx, rcx
  00508	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv260[rsp]
  00510	48 8b c8	 mov	 rcx, rax
  00513	e8 00 00 00 00	 call	 memcpy

; 50   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00518	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0051d	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00522	48 6b c9 10	 imul	 rcx, rcx, 16
  00526	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  0052e	48 03 d1	 add	 rdx, rcx
  00531	48 8b ca	 mov	 rcx, rdx
  00534	4c 8b c0	 mov	 r8, rax
  00537	48 8d 54 24 48	 lea	 rdx, QWORD PTR stVal1$[rsp]
  0053c	e8 00 00 00 00	 call	 memcpy

; 51   : 		}
; 52   : 		else {

  00541	e9 4c 01 00 00	 jmp	 $LN21@SortEx
$LN20@SortEx:

; 53   : 			memcpy(&stVal1, &arr[left], nSize);

  00546	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0054b	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR left$[rsp]
  00550	48 6b c9 10	 imul	 rcx, rcx, 16
  00554	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  0055c	48 03 d1	 add	 rdx, rcx
  0055f	48 8b ca	 mov	 rcx, rdx
  00562	4c 8b c0	 mov	 r8, rax
  00565	48 8b d1	 mov	 rdx, rcx
  00568	48 8d 4c 24 48	 lea	 rcx, QWORD PTR stVal1$[rsp]
  0056d	e8 00 00 00 00	 call	 memcpy

; 54   : 			memcpy(&stVal2, &arr[right], nSize);

  00572	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00577	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR right$[rsp]
  0057c	48 6b c9 10	 imul	 rcx, rcx, 16
  00580	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00588	48 03 d1	 add	 rdx, rcx
  0058b	48 8b ca	 mov	 rcx, rdx
  0058e	4c 8b c0	 mov	 r8, rax
  00591	48 8b d1	 mov	 rdx, rcx
  00594	48 8d 4c 24 78	 lea	 rcx, QWORD PTR stVal2$[rsp]
  00599	e8 00 00 00 00	 call	 memcpy

; 55   : 			memcpy(&arr[right], &arr[nMax], nSize);

  0059e	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  005a3	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  005a8	48 6b c9 10	 imul	 rcx, rcx, 16
  005ac	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  005b4	48 03 d1	 add	 rdx, rcx
  005b7	48 8b ca	 mov	 rcx, rdx
  005ba	48 63 54 24 28	 movsxd	 rdx, DWORD PTR right$[rsp]
  005bf	48 6b d2 10	 imul	 rdx, rdx, 16
  005c3	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  005cb	4c 03 c2	 add	 r8, rdx
  005ce	49 8b d0	 mov	 rdx, r8
  005d1	48 89 94 24 c8
	00 00 00	 mov	 QWORD PTR tv291[rsp], rdx
  005d9	4c 8b c0	 mov	 r8, rax
  005dc	48 8b d1	 mov	 rdx, rcx
  005df	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv291[rsp]
  005e7	48 8b c8	 mov	 rcx, rax
  005ea	e8 00 00 00 00	 call	 memcpy

; 56   : 			memcpy(&arr[left], &arr[nMin], nSize);

  005ef	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  005f4	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  005f9	48 6b c9 10	 imul	 rcx, rcx, 16
  005fd	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00605	48 03 d1	 add	 rdx, rcx
  00608	48 8b ca	 mov	 rcx, rdx
  0060b	48 63 54 24 24	 movsxd	 rdx, DWORD PTR left$[rsp]
  00610	48 6b d2 10	 imul	 rdx, rdx, 16
  00614	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR arr$[rsp]
  0061c	4c 03 c2	 add	 r8, rdx
  0061f	49 8b d0	 mov	 rdx, r8
  00622	48 89 94 24 d0
	00 00 00	 mov	 QWORD PTR tv301[rsp], rdx
  0062a	4c 8b c0	 mov	 r8, rax
  0062d	48 8b d1	 mov	 rdx, rcx
  00630	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv301[rsp]
  00638	48 8b c8	 mov	 rcx, rax
  0063b	e8 00 00 00 00	 call	 memcpy

; 57   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00640	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00645	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  0064a	48 6b c9 10	 imul	 rcx, rcx, 16
  0064e	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  00656	48 03 d1	 add	 rdx, rcx
  00659	48 8b ca	 mov	 rcx, rdx
  0065c	4c 8b c0	 mov	 r8, rax
  0065f	48 8d 54 24 48	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00664	e8 00 00 00 00	 call	 memcpy

; 58   : 			memcpy(&arr[nMax], &stVal2, nSize);

  00669	48 63 44 24 3c	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0066e	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00673	48 6b c9 10	 imul	 rcx, rcx, 16
  00677	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR arr$[rsp]
  0067f	48 03 d1	 add	 rdx, rcx
  00682	48 8b ca	 mov	 rcx, rdx
  00685	4c 8b c0	 mov	 r8, rax
  00688	48 8d 54 24 78	 lea	 rdx, QWORD PTR stVal2$[rsp]
  0068d	e8 00 00 00 00	 call	 memcpy
$LN21@SortEx:
$LN19@SortEx:
$LN17@SortEx:
$LN13@SortEx:

; 59   : 		}
; 60   : 
; 61   : 		//-------------------------------------
; 62   : 		right--;

  00692	8b 44 24 28	 mov	 eax, DWORD PTR right$[rsp]
  00696	ff c8		 dec	 eax
  00698	89 44 24 28	 mov	 DWORD PTR right$[rsp], eax

; 63   : 	}

  0069c	e9 c5 f9 ff ff	 jmp	 $LN2@SortEx
$LN3@SortEx:
$LN1@SortEx:

; 64   : }

  006a1	48 8b cc	 mov	 rcx, rsp
  006a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?SortEx@@YAXPEAUSTSortData@@H@Z$rtcFrameData
  006ab	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  006b0	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006b8	48 33 cc	 xor	 rcx, rsp
  006bb	e8 00 00 00 00	 call	 __security_check_cookie
  006c0	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  006c7	5f		 pop	 rdi
  006c8	c3		 ret	 0
?SortEx@@YAXPEAUSTSortData@@H@Z ENDP			; SortEx
_TEXT	ENDS
END
