; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG44517 DB	'[%p] calloc has Failed', 0aH, 00H
	ORG $+8
$SG44520 DB	'[%p] ################### realloc success m_nLast[%d] m_n'
	DB	'Max[%d] nMaxCount[%d]', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	??1abstract_critical_section@common@@UEAA@XZ	; common::abstract_critical_section::~abstract_critical_section
PUBLIC	??0abstract_critical_section@common@@QEAA@XZ	; common::abstract_critical_section::abstract_critical_section
PUBLIC	??_Gabstract_critical_section@common@@UEAAPEAXI@Z ; common::abstract_critical_section::`scalar deleting destructor'
PUBLIC	??0critical_section@win32@common@@QEAA@XZ	; common::win32::critical_section::critical_section
PUBLIC	??1critical_section@win32@common@@UEAA@XZ	; common::win32::critical_section::~critical_section
PUBLIC	?enter@critical_section@win32@common@@UEAA_N_N@Z ; common::win32::critical_section::enter
PUBLIC	?leave@critical_section@win32@common@@UEAAXXZ	; common::win32::critical_section::leave
PUBLIC	??_Gcritical_section@win32@common@@UEAAPEAXI@Z	; common::win32::critical_section::`scalar deleting destructor'
PUBLIC	??0win_atomic@win32@common@@QEAA@XZ		; common::win32::win_atomic::win_atomic
PUBLIC	??1win_atomic@win32@common@@QEAA@XZ		; common::win32::win_atomic::~win_atomic
PUBLIC	??0win64_atomic@win32@common@@QEAA@XZ		; common::win32::win64_atomic::win64_atomic
PUBLIC	??1win64_atomic@win32@common@@QEAA@XZ		; common::win32::win64_atomic::~win64_atomic
PUBLIC	?getCount@win64_atomic@win32@common@@QEAAHXZ	; common::win32::win64_atomic::getCount
PUBLIC	?init@win64_atomic@win32@common@@QEAAXXZ	; common::win32::win64_atomic::init
PUBLIC	?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z ; common::win32::win64_atomic::atomic_compare_exchange
PUBLIC	?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z		; ISABLETODELETE
PUBLIC	??0CQueueS@@QEAA@XZ				; CQueueS::CQueueS
PUBLIC	??1CQueueS@@QEAA@XZ				; CQueueS::~CQueueS
PUBLIC	?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z	; CQueueS::alloc
PUBLIC	?realloc@CQueueS@@QEAA_NH_N@Z			; CQueueS::realloc
PUBLIC	?push@CQueueS@@QEAA_NPEAX@Z			; CQueueS::push
PUBLIC	?pop@CQueueS@@QEAAPEAXXZ			; CQueueS::pop
PUBLIC	?getIndex@@YAHH@Z				; getIndex
PUBLIC	?delBuf@CMemManager@@QEAAXPEADH@Z		; CMemManager::delBuf
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7abstract_critical_section@common@@6B@	; common::abstract_critical_section::`vftable'
PUBLIC	??_7critical_section@win32@common@@6B@		; common::win32::critical_section::`vftable'
PUBLIC	??_R4abstract_critical_section@common@@6B@	; common::abstract_critical_section::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVabstract_critical_section@common@@@8	; common::abstract_critical_section `RTTI Type Descriptor'
PUBLIC	??_R3abstract_critical_section@common@@8	; common::abstract_critical_section::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2abstract_critical_section@common@@8	; common::abstract_critical_section::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@abstract_critical_section@common@@8 ; common::abstract_critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4critical_section@win32@common@@6B@		; common::win32::critical_section::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVcritical_section@win32@common@@@8	; common::win32::critical_section `RTTI Type Descriptor'
PUBLIC	??_R3critical_section@win32@common@@8		; common::win32::critical_section::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2critical_section@win32@common@@8		; common::win32::critical_section::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@critical_section@win32@common@@8	; common::win32::critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	_purecall:PROC
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_InitializeCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_TryEnterCriticalSection:PROC
EXTRN	__imp_DeleteCriticalSection:PROC
EXTRN	??_Eabstract_critical_section@common@@UEAAPEAXI@Z:PROC ; common::abstract_critical_section::`vector deleting destructor'
EXTRN	??_Ecritical_section@win32@common@@UEAAPEAXI@Z:PROC ; common::win32::critical_section::`vector deleting destructor'
EXTRN	initSpinLock:PROC
EXTRN	acquireSpinLock:PROC
EXTRN	releaseSpinLock:PROC
EXTRN	?delBufByIndex@CMemManager@@QEAAXPEADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?g_szMessage@@3PADA:BYTE			; g_szMessage
EXTRN	?gs_pMMgr@@3PEAVCMemManager@@EA:QWORD		; gs_pMMgr
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+4
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1abstract_critical_section@common@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$??1abstract_critical_section@common@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0abstract_critical_section@common@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0abstract_critical_section@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gabstract_critical_section@common@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gabstract_critical_section@common@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0critical_section@win32@common@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+84
	DD	imagerel $unwind$??0critical_section@win32@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1critical_section@win32@common@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??1critical_section@win32@common@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?enter@critical_section@win32@common@@UEAA_N_N@Z DD imagerel $LN7
	DD	imagerel $LN7+123
	DD	imagerel $unwind$?enter@critical_section@win32@common@@UEAA_N_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?leave@critical_section@win32@common@@UEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?leave@critical_section@win32@common@@UEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gcritical_section@win32@common@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_Gcritical_section@win32@common@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0win_atomic@win32@common@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??0win_atomic@win32@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1win_atomic@win32@common@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1win_atomic@win32@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0win64_atomic@win32@common@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0win64_atomic@win32@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1win64_atomic@win32@common@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1win64_atomic@win32@common@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getCount@win64_atomic@win32@common@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?getCount@win64_atomic@win32@common@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@win64_atomic@win32@common@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?init@win64_atomic@win32@common@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+20
	DD	imagerel $unwind$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0CQueueS@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+235
	DD	imagerel $unwind$??0CQueueS@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA
$pdata$?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA
$pdata$?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1CQueueS@@QEAA@XZ DD imagerel $LN21
	DD	imagerel $LN21+480
	DD	imagerel $unwind$??1CQueueS@@QEAA@XZ
$pdata$?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z
$pdata$?realloc@CQueueS@@QEAA_NH_N@Z DD imagerel $LN7
	DD	imagerel $LN7+477
	DD	imagerel $unwind$?realloc@CQueueS@@QEAA_NH_N@Z
$pdata$?push@CQueueS@@QEAA_NPEAX@Z DD imagerel $LN10
	DD	imagerel $LN10+449
	DD	imagerel $unwind$?push@CQueueS@@QEAA_NPEAX@Z
$pdata$?pop@CQueueS@@QEAAPEAXXZ DD imagerel $LN10
	DD	imagerel $LN10+319
	DD	imagerel $unwind$?pop@CQueueS@@QEAAPEAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getIndex@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$?getIndex@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?delBuf@CMemManager@@QEAAXPEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?delBuf@CMemManager@@QEAAXPEADH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@critical_section@win32@common@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@critical_section@win32@common@@8 DD imagerel ??_R0?AVcritical_section@win32@common@@@8 ; common::win32::critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3critical_section@win32@common@@8
rdata$r	ENDS
;	COMDAT ??_R2critical_section@win32@common@@8
rdata$r	SEGMENT
??_R2critical_section@win32@common@@8 DD imagerel ??_R1A@?0A@EA@critical_section@win32@common@@8 ; common::win32::critical_section::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@abstract_critical_section@common@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3critical_section@win32@common@@8
rdata$r	SEGMENT
??_R3critical_section@win32@common@@8 DD 00H		; common::win32::critical_section::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2critical_section@win32@common@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVcritical_section@win32@common@@@8
data$r	SEGMENT
??_R0?AVcritical_section@win32@common@@@8 DQ FLAT:??_7type_info@@6B@ ; common::win32::critical_section `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVcritical_section@win32@common@@', 00H
data$r	ENDS
;	COMDAT ??_R4critical_section@win32@common@@6B@
rdata$r	SEGMENT
??_R4critical_section@win32@common@@6B@ DD 01H		; common::win32::critical_section::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVcritical_section@win32@common@@@8
	DD	imagerel ??_R3critical_section@win32@common@@8
	DD	imagerel ??_R4critical_section@win32@common@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@abstract_critical_section@common@@8 DD imagerel ??_R0?AVabstract_critical_section@common@@@8 ; common::abstract_critical_section::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_R2abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R2abstract_critical_section@common@@8 DD imagerel ??_R1A@?0A@EA@abstract_critical_section@common@@8 ; common::abstract_critical_section::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3abstract_critical_section@common@@8
rdata$r	SEGMENT
??_R3abstract_critical_section@common@@8 DD 00H		; common::abstract_critical_section::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2abstract_critical_section@common@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVabstract_critical_section@common@@@8
data$r	SEGMENT
??_R0?AVabstract_critical_section@common@@@8 DQ FLAT:??_7type_info@@6B@ ; common::abstract_critical_section `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVabstract_critical_section@common@@', 00H
data$r	ENDS
;	COMDAT ??_R4abstract_critical_section@common@@6B@
rdata$r	SEGMENT
??_R4abstract_critical_section@common@@6B@ DD 01H	; common::abstract_critical_section::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVabstract_critical_section@common@@@8
	DD	imagerel ??_R3abstract_critical_section@common@@8
	DD	imagerel ??_R4abstract_critical_section@common@@6B@
rdata$r	ENDS
;	COMDAT ??_7critical_section@win32@common@@6B@
CONST	SEGMENT
??_7critical_section@win32@common@@6B@ DQ FLAT:??_R4critical_section@win32@common@@6B@ ; common::win32::critical_section::`vftable'
	DQ	FLAT:??_Ecritical_section@win32@common@@UEAAPEAXI@Z
	DQ	FLAT:?enter@critical_section@win32@common@@UEAA_N_N@Z
	DQ	FLAT:?leave@critical_section@win32@common@@UEAAXXZ
CONST	ENDS
;	COMDAT ??_7abstract_critical_section@common@@6B@
CONST	SEGMENT
??_7abstract_critical_section@common@@6B@ DQ FLAT:??_R4abstract_critical_section@common@@6B@ ; common::abstract_critical_section::`vftable'
	DQ	FLAT:??_Eabstract_critical_section@common@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?delBuf@CMemManager@@QEAAXPEADH@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getIndex@@YAHH@Z DD 021c01H
	DD	070059209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?getIndex@@YAHH@Z$rtcName$0 DB 024H			; getIndex
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
?getIndex@@YAHH@Z$rtcVarDesc DD 038H			; getIndex
	DD	08H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcName$0
	ORG $+48
?getIndex@@YAHH@Z$rtcFrameData DD 01H			; getIndex
	DD	00H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcVarDesc
CONST	ENDS
CONST	SEGMENT
	ORG $+1
$cppxdata$??0CQueueS@@QEAA@XZ DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??0CQueueS@@QEAA@XZ
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$??0CQueueS@@QEAA@XZ
	DD	020H
	DD	00H
	DD	01H
$cppxdata$??1CQueueS@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CQueueS@@QEAA@XZ
	DD	040H
	DD	00H
	DD	05H
CONST	ENDS
xdata	SEGMENT
$unwind$??0CQueueS@@QEAA@XZ DD 022711H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0CQueueS@@QEAA@XZ
$stateUnwindMap$??0CQueueS@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA
$ip2state$??0CQueueS@@QEAA@XZ DD imagerel ??0CQueueS@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0CQueueS@@QEAA@XZ+57
	DD	00H
	DD	imagerel ??0CQueueS@@QEAA@XZ+75
	DD	01H
	DD	imagerel ??0CQueueS@@QEAA@XZ+93
	DD	02H
	DD	imagerel ??0CQueueS@@QEAA@XZ+224
	DD	0ffffffffH
$unwind$?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$??1CQueueS@@QEAA@XZ DD 022719H
	DD	07006b20aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1CQueueS@@QEAA@XZ
$ip2state$??1CQueueS@@QEAA@XZ DD imagerel ??1CQueueS@@QEAA@XZ
	DD	0ffffffffH
$unwind$?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z DD 022701H
	DD	0700f3213H
$unwind$?realloc@CQueueS@@QEAA_NH_N@Z DD 022701H
	DD	0700f9213H
$unwind$?push@CQueueS@@QEAA_NPEAX@Z DD 022301H
	DD	0700b920fH
$unwind$?pop@CQueueS@@QEAAPEAXXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z DD 022801H
	DD	070101214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@win64_atomic@win32@common@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getCount@win64_atomic@win32@common@@QEAAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1win64_atomic@win32@common@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0win64_atomic@win32@common@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1win_atomic@win32@common@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0win_atomic@win32@common@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gcritical_section@win32@common@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?leave@critical_section@win32@common@@UEAAXXZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?enter@critical_section@win32@common@@UEAA_N_N@Z DD 022201H
	DD	0700a520eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1critical_section@win32@common@@UEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0critical_section@win32@common@@QEAA@XZ DD 021e01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gabstract_critical_section@common@@UEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0abstract_critical_section@common@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1abstract_critical_section@common@@UEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 023c19H
	DD	07015b219H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?delBuf@CMemManager@@QEAAXPEADH@Z
_TEXT	SEGMENT
nIdx$ = 32
this$ = 64
pBuf$ = 72
nSize$ = 80
?delBuf@CMemManager@@QEAAXPEADH@Z PROC			; CMemManager::delBuf, COMDAT

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	8b 4c 24 50	 mov	 ecx, DWORD PTR nSize$[rsp]
  0002c	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00031	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax
  00035	44 8b 44 24 20	 mov	 r8d, DWORD PTR nIdx$[rsp]
  0003a	48 8b 54 24 48	 mov	 rdx, QWORD PTR pBuf$[rsp]
  0003f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex
  00049	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
?delBuf@CMemManager@@QEAAXPEADH@Z ENDP			; CMemManager::delBuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
m$ = 32
$S1$ = 56
tv80 = 68
tv73 = 72
s$ = 96
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 14 00 00 00	 mov	 ecx, 20
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 60	 mov	 ecx, DWORD PTR [rsp+96]
  0001c	f2 0f 2a 44 24
	60		 cvtsi2sd xmm0, DWORD PTR s$[rsp]
  00022	f2 0f 11 44 24
	38		 movsd	 QWORD PTR $S1$[rsp], xmm0
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	48 6b c0 01	 imul	 rax, rax, 1
  00031	8b 44 04 38	 mov	 eax, DWORD PTR $S1$[rsp+rax]
  00035	c1 f8 14	 sar	 eax, 20
  00038	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  0003d	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	89 4c 24 44	 mov	 DWORD PTR tv80[rsp], ecx
  0004e	0f b6 c8	 movzx	 ecx, al
  00051	8b 44 24 44	 mov	 eax, DWORD PTR tv80[rsp]
  00055	d3 e0		 shl	 eax, cl
  00057	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  0005b	2b c8		 sub	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  00063	23 c8		 and	 ecx, eax
  00065	8b c1		 mov	 eax, ecx
  00067	85 c0		 test	 eax, eax
  00069	74 0a		 je	 SHORT $LN3@getIndex
  0006b	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00073	eb 08		 jmp	 SHORT $LN4@getIndex
$LN3@getIndex:
  00075	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN4@getIndex:
  0007d	8b 44 24 48	 mov	 eax, DWORD PTR tv73[rsp]
  00081	8b 4c 24 20	 mov	 ecx, DWORD PTR m$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	8b f8		 mov	 edi, eax
  0008b	48 8b cc	 mov	 rcx, rsp
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getIndex@@YAHH@Z$rtcFrameData
  00095	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0009a	8b c7		 mov	 eax, edi
  0009c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
res$ = 32
this$ = 64
?pop@CQueueS@@QEAAPEAXXZ PROC				; CQueueS::pop

; 129  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 130  : 	void* res;
; 131  : 	SPIN_LOCK_ENTER(&m_cLockPop);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 50	 add	 rax, 80			; 00000050H
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 acquireSpinLock

; 132  : 	res = m_pArray[m_nFront];

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00040	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00044	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 133  : 	if (res) {

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0004f	74 76		 je	 SHORT $LN2@pop

; 134  : 		m_pArray[m_nFront] = 0;

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00062	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 135  : 		//printf("[%p] m_nFront[%d] nMax[%d]\n", m_pArray, m_nFront, nMax);
; 136  : 		m_nFront++;

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006f	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00072	ff c0		 inc	 eax
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00079	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 137  : 		if (m_nOldMax) {

  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00081	83 78 54 00	 cmp	 DWORD PTR [rax+84], 0
  00085	74 20		 je	 SHORT $LN4@pop

; 138  : 			if(m_nFront == m_nOldMax) m_nFront = 0;

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00091	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  00094	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  00097	75 0c		 jne	 SHORT $LN6@pop
  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009e	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN6@pop:

; 139  : 		}

  000a5	eb 1e		 jmp	 SHORT $LN5@pop
$LN4@pop:

; 140  : 		else if (m_nFront == m_nMax) m_nFront = 0;

  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000b1	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  000b4	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  000b7	75 0c		 jne	 SHORT $LN7@pop
  000b9	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000be	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
$LN7@pop:
$LN5@pop:

; 141  : 	}

  000c5	eb 5c		 jmp	 SHORT $LN3@pop
$LN2@pop:

; 142  : 	else if (m_nOldMax) {

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cc	83 78 54 00	 cmp	 DWORD PTR [rax+84], 0
  000d0	74 51		 je	 SHORT $LN8@pop

; 143  : 		//nTmp = m_nFront; nTmp2 = m_nOldMax;
; 144  : 		res = m_pArray[m_nOldMax]; 

  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000d7	48 63 40 54	 movsxd	 rax, DWORD PTR [rax+84]
  000db	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e3	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000e7	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 145  : 		m_pArray[m_nOldMax] = 0;

  000ec	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000f1	48 63 40 54	 movsxd	 rax, DWORD PTR [rax+84]
  000f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000fa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000fd	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 146  : 		//printf("[%p] m_nFront[%d] m_nOldMax[%d]\n", m_pArray, m_nFront, m_nOldMax);
; 147  : 		m_nFront = m_nOldMax+1;

  00105	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0010a	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  0010d	ff c0		 inc	 eax
  0010f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00114	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 148  : 		m_nOldMax = 0;

  00117	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0011c	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0
$LN8@pop:
$LN3@pop:

; 149  : 	}
; 150  : 	SPIN_LOCK_LEAVE(&m_cLockPop);

  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00128	48 83 c0 50	 add	 rax, 80			; 00000050H
  0012c	48 8b c8	 mov	 rcx, rax
  0012f	e8 00 00 00 00	 call	 releaseSpinLock

; 151  : 	//if (0 <= nTmp) {
; 152  : 	//	gs_cLogger.DebugLog(LEVEL_INFO, "m_nFront[%d] m_nOldMax[%d]", nTmp, nTmp2);
; 153  : 	//}
; 154  : 	return res;

  00134	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 155  : }

  00139	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013d	5f		 pop	 rdi
  0013e	c3		 ret	 0
?pop@CQueueS@@QEAAPEAXXZ ENDP				; CQueueS::pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
tv195 = 32
tv194 = 40
tv192 = 48
tv191 = 56
tv190 = 64
this$ = 96
pData$ = 104
?push@CQueueS@@QEAA_NPEAX@Z PROC			; CQueueS::push

; 94   : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 14 00 00 00	 mov	 ecx, 20
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 95   : 	if (m_nRealloc.getCount()) {

  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 83 c0 58	 add	 rax, 88			; 00000058H
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?getCount@win64_atomic@win32@common@@QEAAHXZ ; common::win32::win64_atomic::getCount
  00034	85 c0		 test	 eax, eax
  00036	74 4b		 je	 SHORT $LN2@push

; 96   : 		m_CS.enter();

  00038	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00046	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0004a	48 89 4c 24 20	 mov	 QWORD PTR tv195[rsp], rcx
  0004f	b2 01		 mov	 dl, 1
  00051	48 8b c8	 mov	 rcx, rax
  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR tv195[rsp]
  00059	ff 50 08	 call	 QWORD PTR [rax+8]

; 97   : 		m_CS.leave();

  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00061	48 83 c0 20	 add	 rax, 32			; 00000020H
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0006e	48 89 4c 24 28	 mov	 QWORD PTR tv194[rsp], rcx
  00073	48 8b c8	 mov	 rcx, rax
  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR tv194[rsp]
  0007b	ff 50 10	 call	 QWORD PTR [rax+16]
  0007e	e9 ca 00 00 00	 jmp	 $LN3@push
$LN2@push:

; 98   : 	}
; 99   : 	else if(m_pArray[m_nLast]) {

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00091	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00094	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00099	0f 84 ae 00 00
	00		 je	 $LN4@push

; 100  : 		if (m_nRealloc.atomic_compare_exchange(1, 0)) {

  0009f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000a4	48 83 c0 58	 add	 rax, 88			; 00000058H
  000a8	45 33 c0	 xor	 r8d, r8d
  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z ; common::win32::win64_atomic::atomic_compare_exchange
  000b8	48 85 c0	 test	 rax, rax
  000bb	74 48		 je	 SHORT $LN5@push

; 101  : 			m_CS.enter();

  000bd	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000c2	48 83 c0 20	 add	 rax, 32			; 00000020H
  000c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000cb	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000cf	48 89 4c 24 30	 mov	 QWORD PTR tv192[rsp], rcx
  000d4	b2 01		 mov	 dl, 1
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	48 8b 44 24 30	 mov	 rax, QWORD PTR tv192[rsp]
  000de	ff 50 08	 call	 QWORD PTR [rax+8]

; 102  : 			m_CS.leave();

  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e6	48 83 c0 20	 add	 rax, 32			; 00000020H
  000ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000f3	48 89 4c 24 38	 mov	 QWORD PTR tv191[rsp], rcx
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	48 8b 44 24 38	 mov	 rax, QWORD PTR tv191[rsp]
  00100	ff 50 10	 call	 QWORD PTR [rax+16]

; 103  : 		}
; 104  : 		else {

  00103	eb 48		 jmp	 SHORT $LN6@push
$LN5@push:

; 105  : 			m_CS.enter();

  00105	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0010a	48 83 c0 20	 add	 rax, 32			; 00000020H
  0010e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00113	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00117	48 89 4c 24 40	 mov	 QWORD PTR tv190[rsp], rcx
  0011c	b2 01		 mov	 dl, 1
  0011e	48 8b c8	 mov	 rcx, rax
  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR tv190[rsp]
  00126	ff 50 08	 call	 QWORD PTR [rax+8]

; 106  : 			if (!realloc(m_nMax << 1)) {

  00129	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0012e	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00131	d1 e0		 shl	 eax, 1
  00133	45 33 c0	 xor	 r8d, r8d
  00136	8b d0		 mov	 edx, eax
  00138	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0013d	e8 00 00 00 00	 call	 ?realloc@CQueueS@@QEAA_NH_N@Z ; CQueueS::realloc
  00142	0f b6 c0	 movzx	 eax, al
  00145	85 c0		 test	 eax, eax
  00147	75 04		 jne	 SHORT $LN7@push

; 107  : 				return false;

  00149	32 c0		 xor	 al, al
  0014b	eb 6e		 jmp	 SHORT $LN1@push
$LN7@push:
$LN6@push:
$LN4@push:
$LN3@push:

; 108  : 			}
; 109  : 		}
; 110  : 	}
; 111  : 
; 112  : 	SPIN_LOCK_ENTER(&m_cLockPush);

  0014d	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00152	48 83 c0 18	 add	 rax, 24
  00156	48 8b c8	 mov	 rcx, rax
  00159	e8 00 00 00 00	 call	 acquireSpinLock

; 113  : 	//if (m_pArray[m_nLast]) {
; 114  : 	//	//nTmp = m_nLast; nTmp2 = m_nMax;
; 115  : 	//	printf("[%p] Already data Set! m_nLast[%d] nMax[%d]\n", m_pArray, m_nLast, m_nMax);
; 116  : 	//}
; 117  : 	m_pArray[m_nLast] = pData;

  0015e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00163	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00167	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0016c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0016f	48 8b 54 24 68	 mov	 rdx, QWORD PTR pData$[rsp]
  00174	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 118  : 	m_nLast++;

  00178	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0017d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00180	ff c0		 inc	 eax
  00182	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00187	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 119  : 	if (m_nLast == m_nMax) m_nLast = 0;

  0018a	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0018f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00194	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  00197	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0019a	75 0c		 jne	 SHORT $LN8@push
  0019c	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  001a1	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
$LN8@push:

; 120  : 	//printf("[%p] m_nLast[%d] nMax[%d]\n", m_pArray, nTmp, m_nMax);
; 121  : 	SPIN_LOCK_LEAVE(&m_cLockPush);

  001a8	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  001ad	48 83 c0 18	 add	 rax, 24
  001b1	48 8b c8	 mov	 rcx, rax
  001b4	e8 00 00 00 00	 call	 releaseSpinLock

; 122  : 	//if (0 <= nTmp) {
; 123  : 	//	gs_cLogger.DebugLog(LEVEL_ERROR, "Already data Set! m_nLast[%d] nMax[%d]", nTmp, nTmp2);
; 124  : 	//}
; 125  : 	return true;

  001b9	b0 01		 mov	 al, 1
$LN1@push:

; 126  : }

  001bb	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001bf	5f		 pop	 rdi
  001c0	c3		 ret	 0
?push@CQueueS@@QEAA_NPEAX@Z ENDP			; CQueueS::push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
newPtr$ = 48
oldPtr$ = 56
tv168 = 64
tv167 = 72
this$ = 96
nMaxCount$ = 104
bInit$ = 112
?realloc@CQueueS@@QEAA_NH_N@Z PROC			; CQueueS::realloc

; 63   : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 14 00 00 00	 mov	 ecx, 20
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 64   : 	void** newPtr, **oldPtr = m_pArray;

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 44 24 38	 mov	 QWORD PTR oldPtr$[rsp], rax

; 65   : 	newPtr = (void **)calloc(nMaxCount, sizeof(void*));

  00034	48 63 44 24 68	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  00039	ba 08 00 00 00	 mov	 edx, 8
  0003e	48 8b c8	 mov	 rcx, rax
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00047	48 89 44 24 30	 mov	 QWORD PTR newPtr$[rsp], rax

; 66   : 	if (!newPtr) {

  0004c	48 83 7c 24 30
	00		 cmp	 QWORD PTR newPtr$[rsp], 0
  00052	75 4e		 jne	 SHORT $LN2@realloc

; 67   : 		printf("[%p] calloc has Failed\n", m_pArray);

  00054	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00059	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG44517
  00063	e8 00 00 00 00	 call	 printf

; 68   : 		m_nRealloc.init();

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0006d	48 83 c0 58	 add	 rax, 88			; 00000058H
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ?init@win64_atomic@win32@common@@QEAAXXZ ; common::win32::win64_atomic::init

; 69   : 		m_CS.leave();

  00079	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00082	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00087	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0008b	48 89 4c 24 40	 mov	 QWORD PTR tv168[rsp], rcx
  00090	48 8b c8	 mov	 rcx, rax
  00093	48 8b 44 24 40	 mov	 rax, QWORD PTR tv168[rsp]
  00098	ff 50 10	 call	 QWORD PTR [rax+16]

; 70   : 		return false;

  0009b	32 c0		 xor	 al, al
  0009d	e9 35 01 00 00	 jmp	 $LN1@realloc
$LN2@realloc:

; 71   : 	}
; 72   : 	if (bInit) {

  000a2	0f b6 44 24 70	 movzx	 eax, BYTE PTR bInit$[rsp]
  000a7	85 c0		 test	 eax, eax
  000a9	74 39		 je	 SHORT $LN3@realloc

; 73   : 		m_pArray = newPtr;

  000ab	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000b0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newPtr$[rsp]
  000b5	48 89 08	 mov	 QWORD PTR [rax], rcx

; 74   : 		m_nMax = nMaxCount;

  000b8	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000bd	8b 4c 24 68	 mov	 ecx, DWORD PTR nMaxCount$[rsp]
  000c1	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 75   : 		memset(m_pArray, 0, nMaxCount * sizeof(void*));

  000c4	48 63 44 24 68	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  000c9	48 c1 e0 03	 shl	 rax, 3
  000cd	4c 8b c0	 mov	 r8, rax
  000d0	33 d2		 xor	 edx, edx
  000d2	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000d7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000da	e8 00 00 00 00	 call	 memset

; 76   : 	}
; 77   : 	else {

  000df	e9 ab 00 00 00	 jmp	 $LN4@realloc
$LN3@realloc:

; 78   : 		memcpy(newPtr, m_pArray, m_nMax * sizeof(void*));

  000e4	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e9	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  000ed	48 c1 e0 03	 shl	 rax, 3
  000f1	4c 8b c0	 mov	 r8, rax
  000f4	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000f9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newPtr$[rsp]
  00101	e8 00 00 00 00	 call	 memcpy

; 79   : 		printf("[%p] ################### realloc success m_nLast[%d] m_nMax[%d] nMaxCount[%d]\n", m_pArray, m_nLast, m_nMax, nMaxCount);

  00106	8b 44 24 68	 mov	 eax, DWORD PTR nMaxCount$[rsp]
  0010a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0010e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00113	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  00117	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0011c	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00120	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00125	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG44520
  0012f	e8 00 00 00 00	 call	 printf

; 80   : 		SPIN_LOCK_ENTER(&m_cLockPop);

  00134	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00139	48 83 c0 50	 add	 rax, 80			; 00000050H
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 acquireSpinLock

; 81   : 		m_pArray = newPtr;

  00145	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0014a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newPtr$[rsp]
  0014f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 82   : 		m_nLast = m_nMax;

  00152	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00157	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0015c	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  0015f	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 83   : 		m_nMax = nMaxCount;

  00162	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00167	8b 4c 24 68	 mov	 ecx, DWORD PTR nMaxCount$[rsp]
  0016b	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 84   : 		SPIN_LOCK_LEAVE(&m_cLockPop);

  0016e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00173	48 83 c0 50	 add	 rax, 80			; 00000050H
  00177	48 8b c8	 mov	 rcx, rax
  0017a	e8 00 00 00 00	 call	 releaseSpinLock

; 85   : 		m_nOldMax = m_nLast;

  0017f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00184	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00189	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0018c	89 48 54	 mov	 DWORD PTR [rax+84], ecx
$LN4@realloc:

; 86   : 	}
; 87   : 	m_nRealloc.init();

  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00194	48 83 c0 58	 add	 rax, 88			; 00000058H
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 ?init@win64_atomic@win32@common@@QEAAXXZ ; common::win32::win64_atomic::init

; 88   : 	m_CS.leave();

  001a0	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  001a5	48 83 c0 20	 add	 rax, 32			; 00000020H
  001a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001ae	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  001b2	48 89 4c 24 48	 mov	 QWORD PTR tv167[rsp], rcx
  001b7	48 8b c8	 mov	 rcx, rax
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR tv167[rsp]
  001bf	ff 50 10	 call	 QWORD PTR [rax+16]

; 89   : 	if(oldPtr) free(oldPtr);

  001c2	48 83 7c 24 38
	00		 cmp	 QWORD PTR oldPtr$[rsp], 0
  001c8	74 0b		 je	 SHORT $LN5@realloc
  001ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldPtr$[rsp]
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@realloc:

; 90   : 	return true;

  001d5	b0 01		 mov	 al, 1
$LN1@realloc:

; 91   : }

  001d7	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001db	5f		 pop	 rdi
  001dc	c3		 ret	 0
?realloc@CQueueS@@QEAA_NH_N@Z ENDP			; CQueueS::realloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
this$ = 48
nMaxCount$ = 56
type$ = 64
?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z PROC		; CQueueS::alloc

; 48   : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 49   : 	m_pArray = (void **)calloc(nMaxCount, sizeof(void*));

  00027	48 63 44 24 38	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  0002c	ba 08 00 00 00	 mov	 edx, 8
  00031	48 8b c8	 mov	 rcx, rax
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 50   : 	if (m_pArray == 0) {

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0004b	75 04		 jne	 SHORT $LN2@alloc

; 51   : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "m_pArray calloc ERROR nMaxCount[%d]", nMaxCount);
; 52   : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	eb 1a		 jmp	 SHORT $LN1@alloc
$LN2@alloc:

; 53   : 	}
; 54   : 
; 55   : 	m_nMax = nMaxCount;

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	8b 4c 24 38	 mov	 ecx, DWORD PTR nMaxCount$[rsp]
  0005a	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 56   : 	m_nObjAllocType = type;

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00062	8b 4c 24 40	 mov	 ecx, DWORD PTR type$[rsp]
  00066	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 57   : 	//gs_cLogger.PutLogQueue(LEVEL_INFO, _T("CQueue<T>::alloc nMaxCount[%d]"), nMaxCount);
; 58   : 	return true;

  00069	b0 01		 mov	 al, 1
$LN1@alloc:

; 59   : }

  0006b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006f	5f		 pop	 rdi
  00070	c3		 ret	 0
?alloc@CQueueS@@QEAA_NHW4E_ALLOC_TYPE@@@Z ENDP		; CQueueS::alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
p$ = 32
i$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
tv88 = 72
tv92 = 80
tv135 = 88
this$ = 112
??1CQueueS@@QEAA@XZ PROC				; CQueueS::~CQueueS

; 19   : {

$LN21:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 18 00 00 00	 mov	 ecx, 24
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0001e	48 c7 44 24 40
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 20   : 	if (!m_pArray) return;

  00027	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00030	75 05		 jne	 SHORT $LN7@CQueueS
  00032	e9 5b 01 00 00	 jmp	 $LN1@CQueueS
$LN7@CQueueS:

; 21   : 
; 22   : 	void *p;
; 23   : 	int i;
; 24   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  00037	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0003c	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  0003f	e8 00 00 00 00	 call	 ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ; ISABLETODELETE
  00044	90		 npad	 1
  00045	0f b6 c0	 movzx	 eax, al
  00048	85 c0		 test	 eax, eax
  0004a	0f 84 27 01 00
	00		 je	 $LN8@CQueueS

; 25   : 		for (i = 0; i < m_nMax; i++) {

  00050	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00058	eb 0a		 jmp	 SHORT $LN4@CQueueS
$LN2@CQueueS:
  0005a	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0005e	ff c0		 inc	 eax
  00060	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN4@CQueueS:
  00064	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00069	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0006c	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  00070	0f 8d 01 01 00
	00		 jge	 $LN8@CQueueS

; 26   : 			p = m_pArray[i];

  00076	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0007b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00080	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00083	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00087	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 27   : 			if (p) {

  0008c	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00092	0f 84 da 00 00
	00		 je	 $LN9@CQueueS

; 28   : 				switch (m_nObjAllocType) {

  00098	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0009d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000a0	89 44 24 48	 mov	 DWORD PTR tv88[rsp], eax
  000a4	83 7c 24 48 02	 cmp	 DWORD PTR tv88[rsp], 2
  000a9	74 1a		 je	 SHORT $LN10@CQueueS
  000ab	83 7c 24 48 03	 cmp	 DWORD PTR tv88[rsp], 3
  000b0	74 52		 je	 SHORT $LN11@CQueueS
  000b2	83 7c 24 48 04	 cmp	 DWORD PTR tv88[rsp], 4
  000b7	74 59		 je	 SHORT $LN12@CQueueS
  000b9	83 7c 24 48 05	 cmp	 DWORD PTR tv88[rsp], 5
  000be	74 77		 je	 SHORT $LN13@CQueueS
  000c0	e9 ad 00 00 00	 jmp	 $LN9@CQueueS
$LN10@CQueueS:

; 29   : 				case eAlloc_Type_new:	delete p; break;

  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000ca	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  000cf	33 d2		 xor	 edx, edx
  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T1[rsp]
  000d6	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  000db	90		 npad	 1
  000dc	48 83 7c 24 30
	00		 cmp	 QWORD PTR $T1[rsp], 0
  000e2	75 0b		 jne	 SHORT $LN17@CQueueS
  000e4	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv92[rsp], 0
  000ed	eb 13		 jmp	 SHORT $LN18@CQueueS
$LN17@CQueueS:
  000ef	48 c7 44 24 20
	23 81 00 00	 mov	 QWORD PTR p$[rsp], 33059 ; 00008123H
  000f8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000fd	48 89 44 24 50	 mov	 QWORD PTR tv92[rsp], rax
$LN18@CQueueS:
  00102	eb 6e		 jmp	 SHORT $LN9@CQueueS
$LN11@CQueueS:

; 30   : 				case eAlloc_Type_alloc:	free(p); break;

  00104	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0010f	90		 npad	 1
  00110	eb 60		 jmp	 SHORT $LN9@CQueueS
$LN12@CQueueS:

; 31   : 				case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00112	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00117	e8 00 00 00 00	 call	 strlen
  0011c	90		 npad	 1
  0011d	48 ff c0	 inc	 rax
  00120	44 8b c0	 mov	 r8d, eax
  00123	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  00128	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0012f	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBuf
  00134	90		 npad	 1
  00135	eb 3b		 jmp	 SHORT $LN9@CQueueS
$LN13@CQueueS:

; 32   : 				case eAlloc_Type_newArray:	delete[] p; break;

  00137	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0013c	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  00141	48 8b 4c 24 38	 mov	 rcx, QWORD PTR $T2[rsp]
  00146	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  0014b	90		 npad	 1
  0014c	48 83 7c 24 38
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00152	75 0b		 jne	 SHORT $LN19@CQueueS
  00154	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv135[rsp], 0
  0015d	eb 13		 jmp	 SHORT $LN9@CQueueS
$LN19@CQueueS:
  0015f	48 c7 44 24 20
	23 81 00 00	 mov	 QWORD PTR p$[rsp], 33059 ; 00008123H
  00168	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0016d	48 89 44 24 58	 mov	 QWORD PTR tv135[rsp], rax
$LN9@CQueueS:

; 33   : 				case eAlloc_Type_none: break;
; 34   : 				case eAlloc_Type_MemPool: break;
; 35   : 				}
; 36   : 			}
; 37   : 		}			

  00172	e9 e3 fe ff ff	 jmp	 $LN2@CQueueS
$LN8@CQueueS:

; 38   : 	}
; 39   : 	free(m_pArray);

  00177	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0017c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00185	90		 npad	 1

; 40   : 	m_pArray = 0;

  00186	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0018b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN1@CQueueS:

; 41   : 	SPIN_LOCK_DESTROY(&m_cLockPush);
; 42   : 	SPIN_LOCK_DESTROY(&m_cLockPop);
; 43   : }

  00192	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00197	48 83 c0 58	 add	 rax, 88			; 00000058H
  0019b	48 8b c8	 mov	 rcx, rax
  0019e	e8 00 00 00 00	 call	 ??1win64_atomic@win32@common@@QEAA@XZ ; common::win32::win64_atomic::~win64_atomic
  001a3	90		 npad	 1
  001a4	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  001a9	48 83 c0 50	 add	 rax, 80			; 00000050H
  001ad	48 8b c8	 mov	 rcx, rax
  001b0	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  001b5	90		 npad	 1
  001b6	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  001bb	48 83 c0 20	 add	 rax, 32			; 00000020H
  001bf	48 8b c8	 mov	 rcx, rax
  001c2	e8 00 00 00 00	 call	 ??1critical_section@win32@common@@UEAA@XZ ; common::win32::critical_section::~critical_section
  001c7	90		 npad	 1
  001c8	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  001cd	48 83 c0 18	 add	 rax, 24
  001d1	48 8b c8	 mov	 rcx, rax
  001d4	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  001d9	90		 npad	 1
  001da	48 83 c4 60	 add	 rsp, 96			; 00000060H
  001de	5f		 pop	 rdi
  001df	c3		 ret	 0
??1CQueueS@@QEAA@XZ ENDP				; CQueueS::~CQueueS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comqueue.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0CQueueS@@QEAA@XZ PROC				; CQueueS::CQueueS

; 6    : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c0 18	 add	 rax, 24
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??0win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::win_atomic
  00038	90		 npad	 1
  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??0critical_section@win32@common@@QEAA@XZ ; common::win32::critical_section::critical_section
  0004a	90		 npad	 1
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c0 50	 add	 rax, 80			; 00000050H
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ??0win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::win_atomic
  0005c	90		 npad	 1
  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00062	48 83 c0 58	 add	 rax, 88			; 00000058H
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ??0win64_atomic@win32@common@@QEAA@XZ ; common::win32::win64_atomic::win64_atomic

; 7    : 	memset(g_szMessage, 0, LEN_MEM_MESSAGE);

  0006e	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00074	33 d2		 xor	 edx, edx
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_szMessage@@3PADA ; g_szMessage
  0007d	e8 00 00 00 00	 call	 memset

; 8    : 	m_pArray = NULL;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00087	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 9    : 	m_nMax = 0;

  0008e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00093	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 10   : 	m_nFront = 0;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009f	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 11   : 	m_nLast = 0;

  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ab	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 12   : 	SPIN_LOCK_INIT(&m_cLockPush);

  000b2	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b7	48 83 c0 18	 add	 rax, 24
  000bb	48 8b c8	 mov	 rcx, rax
  000be	e8 00 00 00 00	 call	 initSpinLock

; 13   : 	SPIN_LOCK_INIT(&m_cLockPop);

  000c3	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000c8	48 83 c0 50	 add	 rax, 80			; 00000050H
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	e8 00 00 00 00	 call	 initSpinLock

; 14   : 	m_nOldMax = 0;

  000d4	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000d9	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0

; 15   : }

  000e0	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000e5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000e9	5f		 pop	 rdi
  000ea	c3		 ret	 0
??0CQueueS@@QEAA@XZ ENDP				; CQueueS::CQueueS
_TEXT	ENDS
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 18	 add	 rcx, 24
  0001b	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$0
$T1 = 32
this$ = 64
?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00042	e8 00 00 00 00	 call	 ??1critical_section@win32@common@@UEAA@XZ ; common::win32::critical_section::~critical_section
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$1
$T1 = 32
this$ = 64
?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00069	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00017	48 83 c1 18	 add	 rcx, 24
  0001b	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$1
  00027	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0002c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00031	55		 push	 rbp
  00032	57		 push	 rdi
  00033	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00037	48 8b ea	 mov	 rbp, rdx
  0003a	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0003e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00042	e8 00 00 00 00	 call	 ??1critical_section@win32@common@@UEAA@XZ ; common::win32::critical_section::~critical_section
  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	5f		 pop	 rdi
  0004c	5d		 pop	 rbp
  0004d	c3		 ret	 0
?dtor$1@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA PROC			; `CQueueS::CQueueS'::`1'::dtor$2
  0004e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00053	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00058	55		 push	 rbp
  00059	57		 push	 rdi
  0005a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0005e	48 8b ea	 mov	 rbp, rdx
  00061	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00065	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00069	e8 00 00 00 00	 call	 ??1win_atomic@win32@common@@QEAA@XZ ; common::win32::win_atomic::~win_atomic
  0006e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00072	5f		 pop	 rdi
  00073	5d		 pop	 rbp
  00074	c3		 ret	 0
?dtor$2@?0???0CQueueS@@QEAA@XZ@4HA ENDP			; `CQueueS::CQueueS'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
_TEXT	SEGMENT
e$ = 16
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z PROC		; ISABLETODELETE, COMDAT

; 247  : inline bool ISABLETODELETE(E_ALLOC_TYPE e) { if (eAlloc_Type_MemPool < e) return true; return false; }

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	83 7c 24 10 01	 cmp	 DWORD PTR e$[rsp], 1
  0000a	7e 04		 jle	 SHORT $LN2@ISABLETODE
  0000c	b0 01		 mov	 al, 1
  0000e	eb 02		 jmp	 SHORT $LN1@ISABLETODE
$LN2@ISABLETODE:
  00010	32 c0		 xor	 al, al
$LN1@ISABLETODE:
  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ENDP		; ISABLETODELETE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z
_TEXT	SEGMENT
tv70 = 0
this$ = 32
nExchange$ = 40
nComperand$ = 48
?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z PROC ; common::win32::win64_atomic::atomic_compare_exchange, COMDAT

; 120  : 	inline long long atomic_compare_exchange(long long nExchange, long long nComperand) {return InterlockedCompareExchange64(&m_count, nExchange, nComperand);} // return long

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 10	 sub	 rsp, 16
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 04 00 00 00	 mov	 ecx, 4
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nExchange$[rsp]
  00032	48 89 04 24	 mov	 QWORD PTR tv70[rsp], rax
  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR nComperand$[rsp]
  0003b	48 8b 14 24	 mov	 rdx, QWORD PTR tv70[rsp]
  0003f	48 8b 14 24	 mov	 rdx, QWORD PTR tv70[rsp]
  00043	f0 48 0f b1 0a	 lock cmpxchg QWORD PTR [rdx], rcx
  00048	48 83 c4 10	 add	 rsp, 16
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
?atomic_compare_exchange@win64_atomic@win32@common@@QEAA_J_J0@Z ENDP ; common::win32::win64_atomic::atomic_compare_exchange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?init@win64_atomic@win32@common@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?init@win64_atomic@win32@common@@QEAAXXZ PROC		; common::win32::win64_atomic::init, COMDAT

; 114  : 	inline void init() { m_count = 0; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?init@win64_atomic@win32@common@@QEAAXXZ ENDP		; common::win32::win64_atomic::init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?getCount@win64_atomic@win32@common@@QEAAHXZ
_TEXT	SEGMENT
this$ = 16
?getCount@win64_atomic@win32@common@@QEAAHXZ PROC	; common::win32::win64_atomic::getCount, COMDAT

; 111  : 	inline int getCount() { return (int)m_count; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?getCount@win64_atomic@win32@common@@QEAAHXZ ENDP	; common::win32::win64_atomic::getCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??1win64_atomic@win32@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1win64_atomic@win32@common@@QEAA@XZ PROC		; common::win32::win64_atomic::~win64_atomic, COMDAT

; 108  : 	~win64_atomic() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1win64_atomic@win32@common@@QEAA@XZ ENDP		; common::win32::win64_atomic::~win64_atomic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??0win64_atomic@win32@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0win64_atomic@win32@common@@QEAA@XZ PROC		; common::win32::win64_atomic::win64_atomic, COMDAT

; 107  : 	win64_atomic() {m_count = 0;}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
??0win64_atomic@win32@common@@QEAA@XZ ENDP		; common::win32::win64_atomic::win64_atomic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??1win_atomic@win32@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1win_atomic@win32@common@@QEAA@XZ PROC		; common::win32::win_atomic::~win_atomic, COMDAT

; 88   : 	~win_atomic() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1win_atomic@win32@common@@QEAA@XZ ENDP		; common::win32::win_atomic::~win_atomic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??0win_atomic@win32@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0win_atomic@win32@common@@QEAA@XZ PROC		; common::win32::win_atomic::win_atomic, COMDAT

; 87   : 	win_atomic() {m_count = 0;}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00011	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00016	5f		 pop	 rdi
  00017	c3		 ret	 0
??0win_atomic@win32@common@@QEAA@XZ ENDP		; common::win32::win_atomic::win_atomic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gcritical_section@win32@common@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gcritical_section@win32@common@@UEAAPEAXI@Z PROC	; common::win32::critical_section::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1critical_section@win32@common@@UEAA@XZ ; common::win32::critical_section::~critical_section
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gcritical_section@win32@common@@UEAAPEAXI@Z ENDP	; common::win32::critical_section::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?leave@critical_section@win32@common@@UEAAXXZ
_TEXT	SEGMENT
this$ = 48
?leave@critical_section@win32@common@@UEAAXXZ PROC	; common::win32::critical_section::leave, COMDAT

; 55   : 	void leave() { LeaveCriticalSection(&m_cs);}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b c8	 mov	 rcx, rax
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?leave@critical_section@win32@common@@UEAAXXZ ENDP	; common::win32::critical_section::leave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ?enter@critical_section@win32@common@@UEAA_N_N@Z
_TEXT	SEGMENT
bRet$ = 32
tv72 = 36
this$ = 64
bWait$ = 72
?enter@critical_section@win32@common@@UEAA_N_N@Z PROC	; common::win32::critical_section::enter, COMDAT

; 39   : 	{ 

$LN7:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 0c 00 00 00	 mov	 ecx, 12
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 40   : 	     BOOL	bRet = TRUE;

  00022	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR bRet$[rsp], 1

; 41   : 
; 42   : 	     if (bWait) 

  0002a	0f b6 44 24 48	 movzx	 eax, BYTE PTR bWait$[rsp]
  0002f	85 c0		 test	 eax, eax
  00031	74 14		 je	 SHORT $LN2@enter

; 43   : 		     EnterCriticalSection(&m_cs);

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 44   : 	     else

  00045	eb 16		 jmp	 SHORT $LN3@enter
$LN2@enter:

; 45   :     #if(_WIN32_WINNT >= 0x0400)
; 46   : 		     bRet = TryEnterCriticalSection(&m_cs);

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	48 8b c8	 mov	 rcx, rax
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryEnterCriticalSection
  00059	89 44 24 20	 mov	 DWORD PTR bRet$[rsp], eax
$LN3@enter:

; 47   :     #else
; 48   : 		    EnterCriticalSection(&m_cs);
; 49   :     #endif
; 50   : 
; 51   : 	     return (bRet)?true:false;

  0005d	83 7c 24 20 00	 cmp	 DWORD PTR bRet$[rsp], 0
  00062	74 07		 je	 SHORT $LN5@enter
  00064	c6 44 24 24 01	 mov	 BYTE PTR tv72[rsp], 1
  00069	eb 05		 jmp	 SHORT $LN6@enter
$LN5@enter:
  0006b	c6 44 24 24 00	 mov	 BYTE PTR tv72[rsp], 0
$LN6@enter:
  00070	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv72[rsp]

; 52   : 
; 53   : 	} 

  00075	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
?enter@critical_section@win32@common@@UEAA_N_N@Z ENDP	; common::win32::critical_section::enter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??1critical_section@win32@common@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1critical_section@win32@common@@UEAA@XZ PROC		; common::win32::critical_section::~critical_section, COMDAT

; 36   : 	virtual ~critical_section() { DeleteCriticalSection(&m_cs);}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7critical_section@win32@common@@6B@
  0002a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 8b c8	 mov	 rcx, rax
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ??1abstract_critical_section@common@@UEAA@XZ ; common::abstract_critical_section::~abstract_critical_section
  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
??1critical_section@win32@common@@UEAA@XZ ENDP		; common::win32::critical_section::~critical_section
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\win32\win32_mtsync.h
;	COMDAT ??0critical_section@win32@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0critical_section@win32@common@@QEAA@XZ PROC		; common::win32::critical_section::critical_section, COMDAT

; 35   : 	critical_section() { InitializeCriticalSection(&m_cs); }

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00023	e8 00 00 00 00	 call	 ??0abstract_critical_section@common@@QEAA@XZ
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7critical_section@win32@common@@6B@
  00034	48 89 08	 mov	 QWORD PTR [rax], rcx
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b c8	 mov	 rcx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSection
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00052	5f		 pop	 rdi
  00053	c3		 ret	 0
??0critical_section@win32@common@@QEAA@XZ ENDP		; common::win32::critical_section::critical_section
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gabstract_critical_section@common@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gabstract_critical_section@common@@UEAAPEAXI@Z PROC	; common::abstract_critical_section::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1abstract_critical_section@common@@UEAA@XZ ; common::abstract_critical_section::~abstract_critical_section
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 08 00 00 00	 mov	 edx, 8
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_Gabstract_critical_section@common@@UEAAPEAXI@Z ENDP	; common::abstract_critical_section::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0abstract_critical_section@common@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0abstract_critical_section@common@@QEAA@XZ PROC	; common::abstract_critical_section::abstract_critical_section, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7abstract_critical_section@common@@6B@
  00012	48 89 08	 mov	 QWORD PTR [rax], rcx
  00015	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001a	5f		 pop	 rdi
  0001b	c3		 ret	 0
??0abstract_critical_section@common@@QEAA@XZ ENDP	; common::abstract_critical_section::abstract_critical_section
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\com\abstract_mtsync.h
;	COMDAT ??1abstract_critical_section@common@@UEAA@XZ
_TEXT	SEGMENT
this$ = 16
??1abstract_critical_section@common@@UEAA@XZ PROC	; common::abstract_critical_section::~abstract_critical_section, COMDAT

; 61   : 	virtual ~abstract_critical_section() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7abstract_critical_section@common@@6B@
  00012	48 89 08	 mov	 QWORD PTR [rax], rcx
  00015	5f		 pop	 rdi
  00016	c3		 ret	 0
??1abstract_critical_section@common@@UEAA@XZ ENDP	; common::abstract_critical_section::~abstract_critical_section
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
__$ArrayPad$ = 80
_Format$ = 112
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  0003c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  00041	48 8d 44 24 78	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00046	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00056	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Format$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _vfprintf_l
  0006b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

  00078	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 957  : }

  0007c	8b f8		 mov	 edi, eax
  0007e	48 8b cc	 mov	 rcx, rsp
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00088	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008d	8b c7		 mov	 eax, edi
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00094	48 33 cc	 xor	 rcx, rsp
  00097	e8 00 00 00 00	 call	 __security_check_cookie
  0009c	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 144  :         {

$LN3:
  00000	40 57		 push	 rdi

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00002	5f		 pop	 rdi
  00003	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00041	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00046	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
  00000	40 57		 push	 rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
