; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_tcsncpy
PUBLIC	?ISINCLUDE@@YA_NHH@Z				; ISINCLUDE
PUBLIC	?getIndex@@YAHH@Z				; getIndex
PUBLIC	?getSizeByIndex@@YAHH@Z				; getSizeByIndex
PUBLIC	?newBufByIndex@CMemManager@@QEAAPEADH@Z		; CMemManager::newBufByIndex
PUBLIC	??0CmString@@QEAA@XZ				; CmString::CmString
PUBLIC	??0CmString@@QEAA@PEBD@Z			; CmString::CmString
PUBLIC	??0CmString@@QEAA@H@Z				; CmString::CmString
PUBLIC	??0CmString@@QEAA@AEBV0@@Z			; CmString::CmString
PUBLIC	??0CmString@@QEAA@PEBV0@@Z			; CmString::CmString
PUBLIC	??1CmString@@QEAA@XZ				; CmString::~CmString
PUBLIC	?c_str@CmString@@QEBAPEBDXZ			; CmString::c_str
PUBLIC	?capacity_idx@CmString@@QEBAHXZ			; CmString::capacity_idx
PUBLIC	??8CmString@@QEAA_NPEBD@Z			; CmString::operator==
PUBLIC	??4CmString@@QEAAAEAV0@PEBD@Z			; CmString::operator=
PUBLIC	?append@CmString@@QEAAAEAV1@PEBD@Z		; CmString::append
PUBLIC	?replace@CmString@@QEAAAEAV1@HHPEBD@Z		; CmString::replace
PUBLIC	?reserve@CmString@@QEAAXH@Z			; CmString::reserve
PUBLIC	?find@CmString@@QEAAPEADPEBDH@Z			; CmString::find
PUBLIC	?find_next@CmString@@QEAAPEADPEBDH@Z		; CmString::find_next
PUBLIC	?compare@CmString@@QEAAHPEBD@Z			; CmString::compare
PUBLIC	?compare@CmString@@QEAAHHHPEBD@Z		; CmString::compare
PUBLIC	?__autoclassinit2@CmString@@QEAAX_K@Z		; CmString::__autoclassinit2
PUBLIC	??_GCmString@@QEAAPEAXI@Z			; CmString::`scalar deleting destructor'
PUBLIC	??0CStringList@@QEAA@XZ				; CStringList::CStringList
PUBLIC	??1CStringList@@QEAA@XZ				; CStringList::~CStringList
PUBLIC	?del@CStringList@@QEAA_NPEAVCmString@@@Z	; CStringList::del
PUBLIC	?del@CStringList@@QEAA_NH@Z			; CStringList::del
PUBLIC	?__alloc@CStringList@@AEAAHH@Z			; CStringList::__alloc
PUBLIC	?_DEL@CStringList@@AEAAXH@Z			; CStringList::_DEL
PUBLIC	?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z	; CStringList::__add
PUBLIC	?newIdx@CStringList@@AEAAHXZ			; CStringList::newIdx
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	memcpy:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp__mbsnbcpy:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	?delBufByIndex@CMemManager@@QEAAXPEADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__newBuf@CMemManager@@AEAAPEADH_K@Z:PROC	; CMemManager::__newBuf
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	?g_nSizeList@@3QBHB:BYTE			; g_nSizeList
EXTRN	?gs_pMMgr@@3PEAVCMemManager@@EA:QWORD		; gs_pMMgr
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsncpy DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_tcsncpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ISINCLUDE@@YA_NHH@Z DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$?ISINCLUDE@@YA_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getIndex@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$?getIndex@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getSizeByIndex@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$?getSizeByIndex@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?newBufByIndex@CMemManager@@QEAAPEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?newBufByIndex@CMemManager@@QEAAPEADH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0CmString@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0CmString@@QEAA@XZ
$pdata$??0CmString@@QEAA@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??0CmString@@QEAA@PEBD@Z
$pdata$??0CmString@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??0CmString@@QEAA@H@Z
$pdata$??0CmString@@QEAA@AEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??0CmString@@QEAA@AEBV0@@Z
$pdata$??0CmString@@QEAA@PEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$??0CmString@@QEAA@PEBV0@@Z
$pdata$??1CmString@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$??1CmString@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@CmString@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?c_str@CmString@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity_idx@CmString@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?capacity_idx@CmString@@QEBAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??8CmString@@QEAA_NPEBD@Z DD imagerel $LN8
	DD	imagerel $LN8+174
	DD	imagerel $unwind$??8CmString@@QEAA_NPEBD@Z
$pdata$??4CmString@@QEAAAEAV0@PEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+274
	DD	imagerel $unwind$??4CmString@@QEAAAEAV0@PEBD@Z
$pdata$?append@CmString@@QEAAAEAV1@PEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+298
	DD	imagerel $unwind$?append@CmString@@QEAAAEAV1@PEBD@Z
$pdata$?replace@CmString@@QEAAAEAV1@HHPEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+332
	DD	imagerel $unwind$?replace@CmString@@QEAAAEAV1@HHPEBD@Z
$pdata$?reserve@CmString@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?reserve@CmString@@QEAAXH@Z
$pdata$?find@CmString@@QEAAPEADPEBDH@Z DD imagerel $LN11
	DD	imagerel $LN11+267
	DD	imagerel $unwind$?find@CmString@@QEAAPEADPEBDH@Z
$pdata$?find_next@CmString@@QEAAPEADPEBDH@Z DD imagerel $LN11
	DD	imagerel $LN11+253
	DD	imagerel $unwind$?find_next@CmString@@QEAAPEADPEBDH@Z
$pdata$?compare@CmString@@QEAAHPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+232
	DD	imagerel $unwind$?compare@CmString@@QEAAHPEBD@Z
$pdata$?compare@CmString@@QEAAHHHPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+220
	DD	imagerel $unwind$?compare@CmString@@QEAAHHHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@CmString@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?__autoclassinit2@CmString@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCmString@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??_GCmString@@QEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0CStringList@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0CStringList@@QEAA@XZ
$pdata$??1CStringList@@QEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+245
	DD	imagerel $unwind$??1CStringList@@QEAA@XZ
$pdata$?del@CStringList@@QEAA_NPEAVCmString@@@Z DD imagerel $LN7
	DD	imagerel $LN7+121
	DD	imagerel $unwind$?del@CStringList@@QEAA_NPEAVCmString@@@Z
$pdata$?del@CStringList@@QEAA_NH@Z DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$?del@CStringList@@QEAA_NH@Z
$pdata$?__alloc@CStringList@@AEAAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+155
	DD	imagerel $unwind$?__alloc@CStringList@@AEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_DEL@CStringList@@AEAAXH@Z DD imagerel $LN6
	DD	imagerel $LN6+185
	DD	imagerel $unwind$?_DEL@CStringList@@AEAAXH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD imagerel $LN7
	DD	imagerel $LN7+218
	DD	imagerel $unwind$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA DD imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
	DD	imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?newIdx@CStringList@@AEAAHXZ DD imagerel $LN9
	DD	imagerel $LN9+206
	DD	imagerel $unwind$?newIdx@CStringList@@AEAAHXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_DEL@CStringList@@AEAAXH@Z DD 022201H
	DD	0700a720eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCmString@@QEAAPEAXI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@CmString@@QEAAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity_idx@CmString@@QEBAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@CmString@@QEBAPEBDXZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
$cppxdata$??1CmString@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CmString@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
$cppxdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
xdata	SEGMENT
$unwind$??0CmString@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$??0CmString@@QEAA@PEBD@Z DD 022301H
	DD	0700b520fH
$unwind$??0CmString@@QEAA@H@Z DD 022201H
	DD	0700a320eH
$unwind$??0CmString@@QEAA@AEBV0@@Z DD 022301H
	DD	0700b320fH
$unwind$??0CmString@@QEAA@PEBV0@@Z DD 022301H
	DD	0700b320fH
$unwind$??1CmString@@QEAA@XZ DD 022719H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1CmString@@QEAA@XZ
$ip2state$??1CmString@@QEAA@XZ DD imagerel ??1CmString@@QEAA@XZ
	DD	0ffffffffH
$unwind$??8CmString@@QEAA_NPEBD@Z DD 022301H
	DD	0700b720fH
$unwind$??4CmString@@QEAAAEAV0@PEBD@Z DD 022301H
	DD	0700b520fH
$unwind$?append@CmString@@QEAAAEAV1@PEBD@Z DD 022301H
	DD	0700b720fH
$unwind$?replace@CmString@@QEAAAEAV1@HHPEBD@Z DD 022c01H
	DD	070147218H
$unwind$?reserve@CmString@@QEAAXH@Z DD 022201H
	DD	0700a320eH
$unwind$?find@CmString@@QEAAPEADPEBDH@Z DD 022801H
	DD	070107214H
$unwind$?find_next@CmString@@QEAAPEADPEBDH@Z DD 022801H
	DD	070107214H
$unwind$?compare@CmString@@QEAAHPEBD@Z DD 022301H
	DD	0700b720fH
$unwind$?compare@CmString@@QEAAHHHPEBD@Z DD 022c01H
	DD	070145218H
$unwind$??0CStringList@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$??1CStringList@@QEAA@XZ DD 021e01H
	DD	07006720aH
$unwind$?del@CStringList@@QEAA_NPEAVCmString@@@Z DD 022301H
	DD	0700b520fH
$unwind$?del@CStringList@@QEAA_NH@Z DD 022201H
	DD	0700a320eH
$unwind$?__alloc@CStringList@@AEAAHH@Z DD 022201H
	DD	0700a520eH
$unwind$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 023111H
	DD	070109214H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
$stateUnwindMap$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
$ip2state$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	0ffffffffH
	DD	imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z+78
	DD	00H
	DD	imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z+142
	DD	0ffffffffH
$unwind$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?newIdx@CStringList@@AEAAHXZ DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?newBufByIndex@CMemManager@@QEAAPEADH@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getSizeByIndex@@YAHH@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getIndex@@YAHH@Z DD 021c01H
	DD	070059209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?getIndex@@YAHH@Z$rtcName$0 DB 024H			; getIndex
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
?getIndex@@YAHH@Z$rtcVarDesc DD 038H			; getIndex
	DD	08H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcName$0
	ORG $+48
?getIndex@@YAHH@Z$rtcFrameData DD 01H			; getIndex
	DD	00H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ISINCLUDE@@YA_NHH@Z DD 010901H
	DD	07009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsncpy DD 022801H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
nIdx$ = 32
i$ = 36
this$ = 64
?newIdx@CStringList@@AEAAHXZ PROC			; CStringList::newIdx

; 252  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 253  : 	int nIdx = m_nLast, i;

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00026	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 254  : 	for (i = 0; i < m_nListCnt; i++)

  0002a	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00032	eb 0a		 jmp	 SHORT $LN4@newIdx
$LN2@newIdx:
  00034	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00038	ff c0		 inc	 eax
  0003a	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@newIdx:
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00043	8b 00		 mov	 eax, DWORD PTR [rax]
  00045	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00049	7d 3c		 jge	 SHORT $LN3@newIdx

; 255  : 	{
; 256  : 		if (nIdx >= m_nListCnt) nIdx = 0;

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	8b 00		 mov	 eax, DWORD PTR [rax]
  00052	39 44 24 20	 cmp	 DWORD PTR nIdx$[rsp], eax
  00056	7c 08		 jl	 SHORT $LN5@newIdx
  00058	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
$LN5@newIdx:

; 257  : 		if (!m_pList[nIdx]) {

  00060	48 63 44 24 20	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0006e	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00073	75 06		 jne	 SHORT $LN6@newIdx

; 258  : 			return nIdx;

  00075	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
  00079	eb 4d		 jmp	 SHORT $LN1@newIdx
$LN6@newIdx:

; 259  : 		}
; 260  : 		nIdx++;

  0007b	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
  0007f	ff c0		 inc	 eax
  00081	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 261  : 	}

  00085	eb ad		 jmp	 SHORT $LN2@newIdx
$LN3@newIdx:

; 262  : 	// realloc
; 263  : 	if (!__alloc(m_nListCnt + UNIT_ADD_SIZE)) {

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008c	8b 00		 mov	 eax, DWORD PTR [rax]
  0008e	83 c0 20	 add	 eax, 32			; 00000020H
  00091	8b d0		 mov	 edx, eax
  00093	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00098	e8 00 00 00 00	 call	 ?__alloc@CStringList@@AEAAHH@Z ; CStringList::__alloc
  0009d	85 c0		 test	 eax, eax
  0009f	75 07		 jne	 SHORT $LN7@newIdx

; 264  : 		return -1;

  000a1	b8 ff ff ff ff	 mov	 eax, -1
  000a6	eb 20		 jmp	 SHORT $LN1@newIdx
$LN7@newIdx:

; 265  : 	}
; 266  : 	nIdx = m_nListCnt;

  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ad	8b 00		 mov	 eax, DWORD PTR [rax]
  000af	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 267  : 	m_nListCnt += UNIT_ADD_SIZE;

  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b8	8b 00		 mov	 eax, DWORD PTR [rax]
  000ba	83 c0 20	 add	 eax, 32			; 00000020H
  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c2	89 01		 mov	 DWORD PTR [rcx], eax

; 268  : 	return nIdx;

  000c4	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
$LN1@newIdx:

; 269  : }

  000c8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cc	5f		 pop	 rdi
  000cd	c3		 ret	 0
?newIdx@CStringList@@AEAAHXZ ENDP			; CStringList::newIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
pNewString$ = 32
$T1 = 40
$T2 = 48
$T3 = 56
tv79 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z PROC	; CStringList::__add

; 242  : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]
  00028	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 243  : 	if (0 > nIdx) return NULL;

  00031	83 7c 24 70 00	 cmp	 DWORD PTR nIdx$[rsp], 0
  00036	7d 07		 jge	 SHORT $LN2@add
  00038	33 c0		 xor	 eax, eax
  0003a	e9 95 00 00 00	 jmp	 $LN1@add
$LN2@add:

; 244  : 	CmString *pNewString = new CmString(pString);

  0003f	b9 10 00 00 00	 mov	 ecx, 16
  00044	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00049	48 89 44 24 30	 mov	 QWORD PTR $T2[rsp], rax
  0004e	48 83 7c 24 30
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00054	74 25		 je	 SHORT $LN4@add
  00056	ba 10 00 00 00	 mov	 edx, 16
  0005b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T2[rsp]
  00060	e8 00 00 00 00	 call	 ?__autoclassinit2@CmString@@QEAAX_K@Z
  00065	48 8b 54 24 68	 mov	 rdx, QWORD PTR pString$[rsp]
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T2[rsp]
  0006f	e8 00 00 00 00	 call	 ??0CmString@@QEAA@PEBD@Z ; CmString::CmString
  00074	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
  00079	eb 09		 jmp	 SHORT $LN5@add
$LN4@add:
  0007b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
$LN5@add:
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR tv79[rsp]
  00089	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  0008e	48 8b 44 24 28	 mov	 rax, QWORD PTR $T1[rsp]
  00093	48 89 44 24 20	 mov	 QWORD PTR pNewString$[rsp], rax

; 245  : 	m_pList[nIdx] = pNewString;

  00098	48 63 44 24 70	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  0009d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a6	48 8b 54 24 20	 mov	 rdx, QWORD PTR pNewString$[rsp]
  000ab	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 246  : 	m_nLast = nIdx + 1;

  000af	8b 44 24 70	 mov	 eax, DWORD PTR nIdx$[rsp]
  000b3	ff c0		 inc	 eax
  000b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 247  : 	m_nUseCnt++;

  000bd	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000c2	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000c5	ff c0		 inc	 eax
  000c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 248  : 	return pNewString;

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR pNewString$[rsp]
$LN1@add:

; 249  : }

  000d4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000d8	5f		 pop	 rdi
  000d9	c3		 ret	 0
?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z ENDP	; CStringList::__add
_TEXT	ENDS
text$x	SEGMENT
pNewString$ = 32
$T1 = 40
$T2 = 48
$T3 = 56
tv79 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA PROC ; `CStringList::__add'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	ba 10 00 00 00	 mov	 edx, 16
  00018	48 8b 4d 30	 mov	 rcx, QWORD PTR $T2[rbp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA ENDP ; `CStringList::__add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
pNewString$ = 32
$T1 = 40
$T2 = 48
$T3 = 56
tv79 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA PROC ; `CStringList::__add'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b ea	 mov	 rbp, rdx
  00013	ba 10 00 00 00	 mov	 edx, 16
  00018	48 8b 4d 30	 mov	 rcx, QWORD PTR $T2[rbp]
  0001c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA ENDP ; `CStringList::__add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?_DEL@CStringList@@AEAAXH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv77 = 48
this$ = 80
i$ = 88
?_DEL@CStringList@@AEAAXH@Z PROC			; CStringList::_DEL, COMDAT

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 10 00 00 00	 mov	 ecx, 16
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]
  00022	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00030	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00035	74 7c		 je	 SHORT $LN2@DEL
  00037	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00041	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00045	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00049	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR $T2[rsp]
  00053	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00058	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0005e	74 16		 je	 SHORT $LN4@DEL
  00060	ba 01 00 00 00	 mov	 edx, 1
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0006a	e8 00 00 00 00	 call	 ??_GCmString@@QEAAPEAXI@Z
  0006f	48 89 44 24 30	 mov	 QWORD PTR tv77[rsp], rax
  00074	eb 09		 jmp	 SHORT $LN5@DEL
$LN4@DEL:
  00076	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv77[rsp], 0
$LN5@DEL:
  0007f	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00089	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0008d	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0009a	8b 4c 24 58	 mov	 ecx, DWORD PTR i$[rsp]
  0009e	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a6	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000a9	ff c8		 dec	 eax
  000ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b0	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN2@DEL:
  000b3	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000b7	5f		 pop	 rdi
  000b8	c3		 ret	 0
?_DEL@CStringList@@AEAAXH@Z ENDP			; CStringList::_DEL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
pList$ = 32
this$ = 64
nMaxCount$ = 72
?__alloc@CStringList@@AEAAHH@Z PROC			; CStringList::__alloc

; 223  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 0c 00 00 00	 mov	 ecx, 12
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 224  : 	CmString** pList = (CmString**)calloc(nMaxCount, sizeof(CmString*));

  00022	48 63 44 24 48	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  00027	ba 08 00 00 00	 mov	 edx, 8
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00035	48 89 44 24 20	 mov	 QWORD PTR pList$[rsp], rax

; 225  : 	if (!pList) {

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR pList$[rsp], 0
  00040	75 04		 jne	 SHORT $LN2@alloc

; 226  : 		return 0;

  00042	33 c0		 xor	 eax, eax
  00044	eb 4f		 jmp	 SHORT $LN1@alloc
$LN2@alloc:

; 227  : 	}
; 228  : 
; 229  : 	if (m_pList) {

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00050	74 31		 je	 SHORT $LN3@alloc

; 230  : 		memcpy(pList, m_pList, m_nListCnt * sizeof(CmString*));

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0005a	48 c1 e0 03	 shl	 rax, 3
  0005e	4c 8b c0	 mov	 r8, rax
  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pList$[rsp]
  0006f	e8 00 00 00 00	 call	 memcpy

; 231  : 		free(m_pList);

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00079	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@alloc:

; 232  : 	}
; 233  : 	m_pList = pList;

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pList$[rsp]
  0008d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 234  : 	return nMaxCount;

  00091	8b 44 24 48	 mov	 eax, DWORD PTR nMaxCount$[rsp]
$LN1@alloc:

; 235  : }

  00095	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
?__alloc@CStringList@@AEAAHH@Z ENDP			; CStringList::__alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 48
i$ = 56
?del@CStringList@@QEAA_NH@Z PROC			; CStringList::del

; 286  : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 287  : 	if (!ISINCLUDE(i, m_nListCnt)) {

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	8b 10		 mov	 edx, DWORD PTR [rax]
  00029	8b 4c 24 38	 mov	 ecx, DWORD PTR i$[rsp]
  0002d	e8 00 00 00 00	 call	 ?ISINCLUDE@@YA_NHH@Z	; ISINCLUDE
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 04		 jne	 SHORT $LN2@del

; 288  : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 289  : 		return false;

  00039	32 c0		 xor	 al, al
  0003b	eb 10		 jmp	 SHORT $LN1@del
$LN2@del:

; 290  : 	}
; 291  : 	_DEL(i);

  0003d	8b 54 24 38	 mov	 edx, DWORD PTR i$[rsp]
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AEAAXH@Z ; CStringList::_DEL

; 292  : 	return true;

  0004b	b0 01		 mov	 al, 1
$LN1@del:

; 293  : }

  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
?del@CStringList@@QEAA_NH@Z ENDP			; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
i$ = 32
this$ = 64
p$ = 72
?del@CStringList@@QEAA_NPEAVCmString@@@Z PROC		; CStringList::del

; 273  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 274  : 	int i;
; 275  : 	for (i = 0; i < m_nListCnt; i++) {

  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002b	eb 0a		 jmp	 SHORT $LN4@del
$LN2@del:
  0002d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00031	ff c0		 inc	 eax
  00033	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@del:
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003c	8b 00		 mov	 eax, DWORD PTR [rax]
  0003e	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00042	7d 2d		 jge	 SHORT $LN3@del

; 276  : 		if (m_pList[i] == p) {

  00044	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00052	48 8b 54 24 48	 mov	 rdx, QWORD PTR p$[rsp]
  00057	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  0005b	75 12		 jne	 SHORT $LN5@del

; 277  : 			_DEL(i);

  0005d	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00066	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AEAAXH@Z ; CStringList::_DEL

; 278  : 			return true;

  0006b	b0 01		 mov	 al, 1
  0006d	eb 04		 jmp	 SHORT $LN1@del
$LN5@del:

; 279  : 		}
; 280  : 	}

  0006f	eb bc		 jmp	 SHORT $LN2@del
$LN3@del:

; 281  : 	//gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 282  : 	return false;

  00071	32 c0		 xor	 al, al
$LN1@del:

; 283  : }

  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5f		 pop	 rdi
  00078	c3		 ret	 0
?del@CStringList@@QEAA_NPEAVCmString@@@Z ENDP		; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
i$ = 32
$T1 = 40
$T2 = 48
tv82 = 56
this$ = 80
??1CStringList@@QEAA@XZ PROC				; CStringList::~CStringList

; 209  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 210  : 	if (!m_pList) return;

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00028	75 05		 jne	 SHORT $LN5@CStringLis
  0002a	e9 c0 00 00 00	 jmp	 $LN1@CStringLis
$LN5@CStringLis:

; 211  : 	int i;
; 212  : 	for (i = 0; i < m_nListCnt; i++) {

  0002f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00037	eb 0a		 jmp	 SHORT $LN4@CStringLis
$LN2@CStringLis:
  00039	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0003d	ff c0		 inc	 eax
  0003f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@CStringLis:
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00048	8b 00		 mov	 eax, DWORD PTR [rax]
  0004a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0004e	7d 78		 jge	 SHORT $LN3@CStringLis

; 213  : 		if (m_pList[i]) {

  00050	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005e	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00063	74 5e		 je	 SHORT $LN6@CStringLis

; 214  : 			delete m_pList[i];

  00065	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0006a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0006f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00073	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00077	48 89 44 24 30	 mov	 QWORD PTR $T2[rsp], rax
  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR $T2[rsp]
  00081	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00086	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0008c	74 16		 je	 SHORT $LN8@CStringLis
  0008e	ba 01 00 00 00	 mov	 edx, 1
  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp]
  00098	e8 00 00 00 00	 call	 ??_GCmString@@QEAAPEAXI@Z
  0009d	48 89 44 24 38	 mov	 QWORD PTR tv82[rsp], rax
  000a2	eb 09		 jmp	 SHORT $LN9@CStringLis
$LN8@CStringLis:
  000a4	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv82[rsp], 0
$LN9@CStringLis:

; 215  : 			m_pList[i] = NULL;

  000ad	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b7	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000bb	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN6@CStringLis:

; 216  : 		}
; 217  : 	}

  000c3	e9 71 ff ff ff	 jmp	 $LN2@CStringLis
$LN3@CStringLis:

; 218  : 	free(m_pList);

  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000cd	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 219  : 	m_pList = NULL;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000dc	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  : 	m_nListCnt = 0;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000e9	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@CStringLis:

; 221  : }

  000ef	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f3	5f		 pop	 rdi
  000f4	c3		 ret	 0
??1CStringList@@QEAA@XZ ENDP				; CStringList::~CStringList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 16
??0CStringList@@QEAA@XZ PROC				; CStringList::CStringList

; 204  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 205  : 	m_nListCnt = 0; m_nLast = 0; m_nDelIdx = 0; m_pList = NULL; m_nUseCnt = 0;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00011	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00016	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
  0001d	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00022	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
  00029	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00036	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0003b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 206  : }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0CStringList@@QEAA@XZ ENDP				; CStringList::CStringList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCmString@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GCmString@@QEAAPEAXI@Z PROC				; CmString::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1CmString@@QEAA@XZ	; CmString::~CmString
  0002c	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN2@scalar
  00037	ba 10 00 00 00	 mov	 edx, 16
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??_GCmString@@QEAAPEAXI@Z ENDP				; CmString::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?__autoclassinit2@CmString@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 16
classSize$ = 24
?__autoclassinit2@CmString@@QEAAX_K@Z PROC		; CmString::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR this$[rsp]
  00010	33 c0		 xor	 eax, eax
  00012	48 8b 4c 24 18	 mov	 rcx, QWORD PTR classSize$[rsp]
  00017	f3 aa		 rep stosb
  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
?__autoclassinit2@CmString@@QEAAX_K@Z ENDP		; CmString::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
i$ = 32
idx$ = 36
nLen$ = 40
this$ = 64
index$ = 72
len$ = 80
str$ = 88
?compare@CmString@@QEAAHHHPEBD@Z PROC			; CmString::compare

; 189  : {

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 0c 00 00 00	 mov	 ecx, 12
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 190  : 	int i, idx=index, nLen = (int)_tcslen(str);

  0002c	8b 44 24 48	 mov	 eax, DWORD PTR index$[rsp]
  00030	89 44 24 24	 mov	 DWORD PTR idx$[rsp], eax
  00034	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00039	e8 00 00 00 00	 call	 strlen
  0003e	89 44 24 28	 mov	 DWORD PTR nLen$[rsp], eax

; 191  : 	if (nLen < len)  len = nLen;

  00042	8b 44 24 50	 mov	 eax, DWORD PTR len$[rsp]
  00046	39 44 24 28	 cmp	 DWORD PTR nLen$[rsp], eax
  0004a	7d 08		 jge	 SHORT $LN5@compare
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR nLen$[rsp]
  00050	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN5@compare:

; 192  : 
; 193  : 	for (i = 0; i < len; i++) {

  00054	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0005c	eb 0a		 jmp	 SHORT $LN4@compare
$LN2@compare:
  0005e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00062	ff c0		 inc	 eax
  00064	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@compare:
  00068	8b 44 24 50	 mov	 eax, DWORD PTR len$[rsp]
  0006c	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00070	7d 62		 jge	 SHORT $LN3@compare

; 194  : 		if (m_pValue[idx] != str[i]) {

  00072	48 63 44 24 24	 movsxd	 rax, DWORD PTR idx$[rsp]
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007f	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00083	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00088	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  0008d	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00091	3b c1		 cmp	 eax, ecx
  00093	74 33		 je	 SHORT $LN6@compare

; 195  : 			if (m_pValue[idx] > str[i]) return 1;

  00095	48 63 44 24 24	 movsxd	 rax, DWORD PTR idx$[rsp]
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0009f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a2	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000a6	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  000ab	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000b0	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000b4	3b c1		 cmp	 eax, ecx
  000b6	7e 09		 jle	 SHORT $LN7@compare
  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	eb 17		 jmp	 SHORT $LN1@compare
  000bf	eb 07		 jmp	 SHORT $LN8@compare
$LN7@compare:

; 196  : 			else return -1;

  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	eb 0e		 jmp	 SHORT $LN1@compare
$LN8@compare:
$LN6@compare:

; 197  : 		}
; 198  : 		idx++;

  000c8	8b 44 24 24	 mov	 eax, DWORD PTR idx$[rsp]
  000cc	ff c0		 inc	 eax
  000ce	89 44 24 24	 mov	 DWORD PTR idx$[rsp], eax

; 199  : 	}

  000d2	eb 8a		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 200  : 	return 0;

  000d4	33 c0		 xor	 eax, eax
$LN1@compare:

; 201  : }

  000d6	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000da	5f		 pop	 rdi
  000db	c3		 ret	 0
?compare@CmString@@QEAAHHHPEBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
nLen$ = 32
i$ = 40
orignLen$ = 48
this$ = 80
str$ = 88
?compare@CmString@@QEAAHPEBD@Z PROC			; CmString::compare

; 175  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 176  : 	size_t nLen = _tcslen(str),i, orignLen = _tcslen(m_pValue);

  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 strlen
  0002d	48 89 44 24 20	 mov	 QWORD PTR nLen$[rsp], rax
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003a	e8 00 00 00 00	 call	 strlen
  0003f	48 89 44 24 30	 mov	 QWORD PTR orignLen$[rsp], rax

; 177  : 	if (nLen > orignLen)  nLen = orignLen;

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR orignLen$[rsp]
  00049	48 39 44 24 20	 cmp	 QWORD PTR nLen$[rsp], rax
  0004e	76 0a		 jbe	 SHORT $LN5@compare
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR orignLen$[rsp]
  00055	48 89 44 24 20	 mov	 QWORD PTR nLen$[rsp], rax
$LN5@compare:

; 178  : 
; 179  : 	for (i = 0; i < nLen; i++) {

  0005a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00063	eb 0d		 jmp	 SHORT $LN4@compare
$LN2@compare:
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0006a	48 ff c0	 inc	 rax
  0006d	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@compare:
  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR nLen$[rsp]
  00077	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0007c	73 62		 jae	 SHORT $LN3@compare

; 180  : 		if (m_pValue[i] != str[i]) {

  0007e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00083	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00086	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0008b	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00094	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  00099	48 03 d1	 add	 rdx, rcx
  0009c	48 8b ca	 mov	 rcx, rdx
  0009f	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000a2	3b c1		 cmp	 eax, ecx
  000a4	74 38		 je	 SHORT $LN6@compare

; 181  : 			if (m_pValue[i] > str[i]) return 1;

  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000b3	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  000b7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000bc	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000c1	48 03 d1	 add	 rdx, rcx
  000c4	48 8b ca	 mov	 rcx, rdx
  000c7	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000ca	3b c1		 cmp	 eax, ecx
  000cc	7e 09		 jle	 SHORT $LN7@compare
  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	eb 0d		 jmp	 SHORT $LN1@compare
  000d5	eb 07		 jmp	 SHORT $LN8@compare
$LN7@compare:

; 182  : 			else return -1;

  000d7	b8 ff ff ff ff	 mov	 eax, -1
  000dc	eb 04		 jmp	 SHORT $LN1@compare
$LN8@compare:
$LN6@compare:

; 183  : 		}
; 184  : 	}

  000de	eb 85		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 185  : 	return 0;

  000e0	33 c0		 xor	 eax, eax
$LN1@compare:

; 186  : }

  000e2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e6	5f		 pop	 rdi
  000e7	c3		 ret	 0
?compare@CmString@@QEAAHPEBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
pPos$ = 32
nIdx$ = 40
nLen$ = 44
tv79 = 48
tv80 = 52
tv81 = 56
this$ = 80
str$ = 88
index$ = 96
?find_next@CmString@@QEAAPEADPEBDH@Z PROC		; CmString::find_next

; 132  : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 133  : 	TCHAR *pPos = m_pValue+index;

  00028	48 63 44 24 60	 movsxd	 rax, DWORD PTR index$[rsp]
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00032	48 03 01	 add	 rax, QWORD PTR [rcx]
  00035	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 134  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0003a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
  00042	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00047	e8 00 00 00 00	 call	 strlen
  0004c	89 44 24 2c	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@find_next:

; 135  : 	while (*pPos) {

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  00055	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 95 00 00
	00		 je	 $LN3@find_next
$LN4@find_next:

; 136  : 		while (*pPos == str[nIdx++]) {

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  00065	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00068	89 44 24 30	 mov	 DWORD PTR tv79[rsp], eax
  0006c	48 63 44 24 28	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00076	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0007a	89 44 24 34	 mov	 DWORD PTR tv80[rsp], eax
  0007e	8b 44 24 28	 mov	 eax, DWORD PTR nIdx$[rsp]
  00082	ff c0		 inc	 eax
  00084	89 44 24 28	 mov	 DWORD PTR nIdx$[rsp], eax
  00088	8b 44 24 34	 mov	 eax, DWORD PTR tv80[rsp]
  0008c	39 44 24 30	 cmp	 DWORD PTR tv79[rsp], eax
  00090	75 0a		 jne	 SHORT $LN9@find_next
  00092	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  0009a	eb 08		 jmp	 SHORT $LN10@find_next
$LN9@find_next:
  0009c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN10@find_next:
  000a4	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000a9	74 30		 je	 SHORT $LN5@find_next

; 137  : 			pPos++;

  000ab	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000b0	48 ff c0	 inc	 rax
  000b3	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 138  : 			if (nIdx >= nLen) return pPos;

  000b8	8b 44 24 2c	 mov	 eax, DWORD PTR nLen$[rsp]
  000bc	39 44 24 28	 cmp	 DWORD PTR nIdx$[rsp], eax
  000c0	7c 07		 jl	 SHORT $LN6@find_next
  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000c7	eb 2e		 jmp	 SHORT $LN1@find_next
$LN6@find_next:

; 139  : 			if (!*pPos) return NULL;

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000ce	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d1	85 c0		 test	 eax, eax
  000d3	75 04		 jne	 SHORT $LN7@find_next
  000d5	33 c0		 xor	 eax, eax
  000d7	eb 1e		 jmp	 SHORT $LN1@find_next
$LN7@find_next:

; 140  : 		}

  000d9	eb 85		 jmp	 SHORT $LN4@find_next
$LN5@find_next:

; 141  : 		nIdx = 0;

  000db	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0

; 142  : 		pPos++;

  000e3	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000e8	48 ff c0	 inc	 rax
  000eb	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 143  : 	}

  000f0	e9 5b ff ff ff	 jmp	 $LN2@find_next
$LN3@find_next:

; 144  : 
; 145  : 	return NULL;

  000f5	33 c0		 xor	 eax, eax
$LN1@find_next:

; 146  : }

  000f7	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000fb	5f		 pop	 rdi
  000fc	c3		 ret	 0
?find_next@CmString@@QEAAPEADPEBDH@Z ENDP		; CmString::find_next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
pPos$ = 32
nIdx$ = 40
nLen$ = 44
tv79 = 48
tv80 = 52
tv81 = 56
this$ = 80
str$ = 88
index$ = 96
?find@CmString@@QEAAPEADPEBDH@Z PROC			; CmString::find

; 149  : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 150  : 	TCHAR *pPos = m_pValue + index;

  00028	48 63 44 24 60	 movsxd	 rax, DWORD PTR index$[rsp]
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00032	48 03 01	 add	 rax, QWORD PTR [rcx]
  00035	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 151  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  0003a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
  00042	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00047	e8 00 00 00 00	 call	 strlen
  0004c	89 44 24 2c	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@find:

; 152  : 	while (*pPos) {

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  00055	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00058	85 c0		 test	 eax, eax
  0005a	0f 84 a3 00 00
	00		 je	 $LN3@find
$LN4@find:

; 153  : 		while (*pPos == str[nIdx++]) {

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  00065	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00068	89 44 24 30	 mov	 DWORD PTR tv79[rsp], eax
  0006c	48 63 44 24 28	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00076	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0007a	89 44 24 34	 mov	 DWORD PTR tv80[rsp], eax
  0007e	8b 44 24 28	 mov	 eax, DWORD PTR nIdx$[rsp]
  00082	ff c0		 inc	 eax
  00084	89 44 24 28	 mov	 DWORD PTR nIdx$[rsp], eax
  00088	8b 44 24 34	 mov	 eax, DWORD PTR tv80[rsp]
  0008c	39 44 24 30	 cmp	 DWORD PTR tv79[rsp], eax
  00090	75 0a		 jne	 SHORT $LN9@find
  00092	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  0009a	eb 08		 jmp	 SHORT $LN10@find
$LN9@find:
  0009c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN10@find:
  000a4	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000a9	74 3e		 je	 SHORT $LN5@find

; 154  : 			pPos++;

  000ab	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000b0	48 ff c0	 inc	 rax
  000b3	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 155  : 			if (nIdx >= nLen) return pPos-nLen;

  000b8	8b 44 24 2c	 mov	 eax, DWORD PTR nLen$[rsp]
  000bc	39 44 24 28	 cmp	 DWORD PTR nIdx$[rsp], eax
  000c0	7c 12		 jl	 SHORT $LN6@find
  000c2	48 63 44 24 2c	 movsxd	 rax, DWORD PTR nLen$[rsp]
  000c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pPos$[rsp]
  000cc	48 2b c8	 sub	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	eb 31		 jmp	 SHORT $LN1@find
$LN6@find:

; 156  : 			if (!*pPos) return NULL;

  000d4	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000d9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000dc	85 c0		 test	 eax, eax
  000de	75 04		 jne	 SHORT $LN7@find
  000e0	33 c0		 xor	 eax, eax
  000e2	eb 21		 jmp	 SHORT $LN1@find
$LN7@find:

; 157  : 		}

  000e4	e9 77 ff ff ff	 jmp	 $LN4@find
$LN5@find:

; 158  : 		nIdx = 0;

  000e9	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0

; 159  : 		pPos++;

  000f1	48 8b 44 24 20	 mov	 rax, QWORD PTR pPos$[rsp]
  000f6	48 ff c0	 inc	 rax
  000f9	48 89 44 24 20	 mov	 QWORD PTR pPos$[rsp], rax

; 160  : 	}

  000fe	e9 4d ff ff ff	 jmp	 $LN2@find
$LN3@find:

; 161  : 
; 162  : 	return NULL;

  00103	33 c0		 xor	 eax, eax
$LN1@find:

; 163  : }

  00105	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
?find@CmString@@QEAAPEADPEBDH@Z ENDP			; CmString::find
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 48
n$ = 56
?reserve@CmString@@QEAAXH@Z PROC			; CmString::reserve

; 118  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 119  : 	if (getSizeByIndex(m_nSftIdx) > n) {

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0002a	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0002f	3b 44 24 38	 cmp	 eax, DWORD PTR n$[rsp]
  00033	7e 04		 jle	 SHORT $LN2@reserve

; 120  : 		return;

  00035	eb 61		 jmp	 SHORT $LN1@reserve

; 121  : 	}
; 122  : 	else {

  00037	eb 5f		 jmp	 SHORT $LN3@reserve
$LN2@reserve:

; 123  : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003e	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00051	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 124  : 		m_nSftIdx = getIndex(n);

  00056	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  0005a	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00064	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 125  : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0006c	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00076	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  0007b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00080	48 89 01	 mov	 QWORD PTR [rcx], rax

; 126  : 		m_pValue[0] = 0;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	48 6b c0 00	 imul	 rax, rax, 0
  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00091	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00094	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
$LN3@reserve:
$LN1@reserve:

; 127  : 	}
; 128  : }

  00098	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009c	5f		 pop	 rdi
  0009d	c3		 ret	 0
?reserve@CmString@@QEAAXH@Z ENDP			; CmString::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
nLen$ = 32
nOLen$ = 36
size$ = 40
oSize$ = 44
newIdx$ = 48
newBuf$ = 56
this$ = 80
index$ = 88
len$ = 96
str$ = 104
?replace@CmString@@QEAAAEAV1@HHPEBD@Z PROC		; CmString::replace

; 99   : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00018	48 8b fc	 mov	 rdi, rsp
  0001b	b9 10 00 00 00	 mov	 ecx, 16
  00020	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00025	f3 ab		 rep stosd
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 100  : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  0002c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$[rsp]
  00031	e8 00 00 00 00	 call	 strlen
  00036	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0003f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00042	e8 00 00 00 00	 call	 strlen
  00047	89 44 24 24	 mov	 DWORD PTR nOLen$[rsp], eax

; 101  : 	int size = nLen * g_nChSize, oSize = nOLen * g_nChSize;

  0004b	8b 44 24 20	 mov	 eax, DWORD PTR nLen$[rsp]
  0004f	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax
  00053	8b 44 24 24	 mov	 eax, DWORD PTR nOLen$[rsp]
  00057	89 44 24 2c	 mov	 DWORD PTR oSize$[rsp], eax

; 102  : 
; 103  : 	int newIdx = getIndex(size + oSize - len + 1);

  0005b	8b 44 24 2c	 mov	 eax, DWORD PTR oSize$[rsp]
  0005f	8b 4c 24 28	 mov	 ecx, DWORD PTR size$[rsp]
  00063	03 c8		 add	 ecx, eax
  00065	8b c1		 mov	 eax, ecx
  00067	2b 44 24 60	 sub	 eax, DWORD PTR len$[rsp]
  0006b	ff c0		 inc	 eax
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00074	89 44 24 30	 mov	 DWORD PTR newIdx$[rsp], eax

; 104  : 	TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  00078	8b 54 24 30	 mov	 edx, DWORD PTR newIdx$[rsp]
  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00083	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00088	48 89 44 24 38	 mov	 QWORD PTR newBuf$[rsp], rax

; 105  : 
; 106  : 	if (index) _tcsncpy(newBuf, m_pValue, index);

  0008d	83 7c 24 58 00	 cmp	 DWORD PTR index$[rsp], 0
  00092	74 1a		 je	 SHORT $LN2@replace
  00094	48 63 44 24 58	 movsxd	 rax, DWORD PTR index$[rsp]
  00099	4c 8b c0	 mov	 r8, rax
  0009c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a1	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000a4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newBuf$[rsp]
  000a9	e8 00 00 00 00	 call	 _tcsncpy
$LN2@replace:

; 107  : 	_tcsncpy(newBuf + index, str, len);

  000ae	48 63 44 24 60	 movsxd	 rax, DWORD PTR len$[rsp]
  000b3	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR index$[rsp]
  000b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR newBuf$[rsp]
  000bd	48 03 d1	 add	 rdx, rcx
  000c0	48 8b ca	 mov	 rcx, rdx
  000c3	4c 8b c0	 mov	 r8, rax
  000c6	48 8b 54 24 68	 mov	 rdx, QWORD PTR str$[rsp]
  000cb	e8 00 00 00 00	 call	 _tcsncpy

; 108  : 	_tcscpy(newBuf + index + len, m_pValue + index + len);

  000d0	48 63 44 24 58	 movsxd	 rax, DWORD PTR index$[rsp]
  000d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000da	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000dd	48 03 c8	 add	 rcx, rax
  000e0	48 8b c1	 mov	 rax, rcx
  000e3	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR len$[rsp]
  000e8	48 03 c1	 add	 rax, rcx
  000eb	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR index$[rsp]
  000f0	48 8b 54 24 38	 mov	 rdx, QWORD PTR newBuf$[rsp]
  000f5	48 03 d1	 add	 rdx, rcx
  000f8	48 8b ca	 mov	 rcx, rdx
  000fb	48 63 54 24 60	 movsxd	 rdx, DWORD PTR len$[rsp]
  00100	48 03 ca	 add	 rcx, rdx
  00103	48 8b d0	 mov	 rdx, rax
  00106	e8 00 00 00 00	 call	 strcpy

; 109  : 
; 110  : 	gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0010b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00110	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00114	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00119	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0011c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00123	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 111  : 	m_pValue = newBuf;

  00128	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0012d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newBuf$[rsp]
  00132	48 89 08	 mov	 QWORD PTR [rax], rcx

; 112  : 	m_nSftIdx = newIdx;

  00135	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0013a	8b 4c 24 30	 mov	 ecx, DWORD PTR newIdx$[rsp]
  0013e	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 113  : 	return *this;

  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 114  : }

  00146	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0014a	5f		 pop	 rdi
  0014b	c3		 ret	 0
?replace@CmString@@QEAAAEAV1@HHPEBD@Z ENDP		; CmString::replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
nLen$ = 32
nOLen$ = 36
size$ = 40
oSize$ = 44
newIdx$1 = 48
newBuf$2 = 56
this$ = 80
str$ = 88
?append@CmString@@QEAAAEAV1@PEBD@Z PROC			; CmString::append

; 75   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 76   : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 strlen
  0002d	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	e8 00 00 00 00	 call	 strlen
  0003e	89 44 24 24	 mov	 DWORD PTR nOLen$[rsp], eax

; 77   : 	int size = nLen * g_nChSize , oSize = nOLen * g_nChSize;

  00042	8b 44 24 20	 mov	 eax, DWORD PTR nLen$[rsp]
  00046	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax
  0004a	8b 44 24 24	 mov	 eax, DWORD PTR nOLen$[rsp]
  0004e	89 44 24 2c	 mov	 DWORD PTR oSize$[rsp], eax

; 78   : 
; 79   : 	if (getSizeByIndex(m_nSftIdx) > size + oSize + 1) {

  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00057	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0005a	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0005f	8b 4c 24 28	 mov	 ecx, DWORD PTR size$[rsp]
  00063	8b 54 24 2c	 mov	 edx, DWORD PTR oSize$[rsp]
  00067	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  0006b	3b c1		 cmp	 eax, ecx
  0006d	7e 1f		 jle	 SHORT $LN2@append

; 80   : 		_tcscpy(m_pValue + nOLen, str);

  0006f	48 63 44 24 24	 movsxd	 rax, DWORD PTR nOLen$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00079	48 03 01	 add	 rax, QWORD PTR [rcx]
  0007c	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 strcpy

; 81   : 	}
; 82   : 	else {

  00089	e9 91 00 00 00	 jmp	 $LN3@append
$LN2@append:

; 83   : 		int newIdx = getIndex(size + oSize + 1);

  0008e	8b 44 24 28	 mov	 eax, DWORD PTR size$[rsp]
  00092	8b 4c 24 2c	 mov	 ecx, DWORD PTR oSize$[rsp]
  00096	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  000a1	89 44 24 30	 mov	 DWORD PTR newIdx$1[rsp], eax

; 84   : 		TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  000a5	8b 54 24 30	 mov	 edx, DWORD PTR newIdx$1[rsp]
  000a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  000b0	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  000b5	48 89 44 24 38	 mov	 QWORD PTR newBuf$2[rsp], rax

; 85   : 		_tcscpy(newBuf, m_pValue);

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000bf	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000c2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newBuf$2[rsp]
  000c7	e8 00 00 00 00	 call	 strcpy

; 86   : 		_tcscpy(newBuf + nOLen, str);

  000cc	48 63 44 24 24	 movsxd	 rax, DWORD PTR nOLen$[rsp]
  000d1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newBuf$2[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 strcpy

; 87   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000e9	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ee	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  000f2	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000f7	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00101	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 88   : 		m_pValue = newBuf;

  00106	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0010b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newBuf$2[rsp]
  00110	48 89 08	 mov	 QWORD PTR [rax], rcx

; 89   : 		m_nSftIdx = newIdx;

  00113	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00118	8b 4c 24 30	 mov	 ecx, DWORD PTR newIdx$1[rsp]
  0011c	89 48 08	 mov	 DWORD PTR [rax+8], ecx
$LN3@append:

; 90   : 
; 91   : 	}
; 92   : 
; 93   : 	return *this;

  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 94   : }

  00124	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00128	5f		 pop	 rdi
  00129	c3		 ret	 0
?append@CmString@@QEAAAEAV1@PEBD@Z ENDP			; CmString::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
size$ = 32
this$ = 64
str$ = 72
??4CmString@@QEAAAEAV0@PEBD@Z PROC			; CmString::operator=

; 52   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 53   : 	int size = STRING_SIZE(str);

  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 strlen
  0002d	48 ff c0	 inc	 rax
  00030	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 54   : 
; 55   : 	if (m_nSftIdx) {

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00039	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0003d	0f 84 85 00 00
	00		 je	 $LN2@operator

; 56   : 		if (getSizeByIndex(m_nSftIdx) > size) {

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00048	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0004b	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  00050	3b 44 24 20	 cmp	 eax, DWORD PTR size$[rsp]
  00054	7e 14		 jle	 SHORT $LN4@operator

; 57   : 			_tcscpy(m_pValue, str);

  00056	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00060	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00063	e8 00 00 00 00	 call	 strcpy

; 58   : 		}
; 59   : 		else {

  00068	eb 5c		 jmp	 SHORT $LN5@operator
$LN4@operator:

; 60   : 			gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006f	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0007b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00082	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 61   : 			m_nSftIdx = getIndex(size);

  00087	8b 4c 24 20	 mov	 ecx, DWORD PTR size$[rsp]
  0008b	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00095	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 62   : 			m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009d	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  000a7	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000b1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   : 			_tcscpy(m_pValue, str);

  000b4	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  000b9	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000be	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c1	e8 00 00 00 00	 call	 strcpy
$LN5@operator:

; 64   : 		}
; 65   : 	}
; 66   : 	else {

  000c6	eb 3f		 jmp	 SHORT $LN3@operator
$LN2@operator:

; 67   : 		m_nSftIdx = getIndex(size);

  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR size$[rsp]
  000cc	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000d6	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 68   : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000de	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  000e8	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  000ed	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	48 89 01	 mov	 QWORD PTR [rcx], rax

; 69   : 		_tcscpy(m_pValue, str);

  000f5	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ff	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00102	e8 00 00 00 00	 call	 strcpy
$LN3@operator:

; 70   : 	}	
; 71   : 	return *this;

  00107	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 72   : }

  0010c	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00110	5f		 pop	 rdi
  00111	c3		 ret	 0
??4CmString@@QEAAAEAV0@PEBD@Z ENDP			; CmString::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
nLen$ = 32
i$ = 40
orignLen$ = 48
this$ = 80
str$ = 88
??8CmString@@QEAA_NPEBD@Z PROC				; CmString::operator==

; 165  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 166  : 	size_t nLen = _tcslen(str), i, orignLen = _tcslen(m_pValue);

  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 strlen
  0002d	48 89 44 24 20	 mov	 QWORD PTR nLen$[rsp], rax
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003a	e8 00 00 00 00	 call	 strlen
  0003f	48 89 44 24 30	 mov	 QWORD PTR orignLen$[rsp], rax

; 167  : 	if (nLen != orignLen) return false;

  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR orignLen$[rsp]
  00049	48 39 44 24 20	 cmp	 QWORD PTR nLen$[rsp], rax
  0004e	74 04		 je	 SHORT $LN5@operator
  00050	32 c0		 xor	 al, al
  00052	eb 54		 jmp	 SHORT $LN1@operator
$LN5@operator:

; 168  : 	for (i = 0; i < nLen; i++) {

  00054	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0005d	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@operator:
  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR nLen$[rsp]
  00071	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00076	73 2e		 jae	 SHORT $LN3@operator

; 169  : 		if (m_pValue[i] != str[i]) return false;

  00078	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0007d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00080	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00085	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00089	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0008e	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  00093	48 03 d1	 add	 rdx, rcx
  00096	48 8b ca	 mov	 rcx, rdx
  00099	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  0009c	3b c1		 cmp	 eax, ecx
  0009e	74 04		 je	 SHORT $LN6@operator
  000a0	32 c0		 xor	 al, al
  000a2	eb 04		 jmp	 SHORT $LN1@operator
$LN6@operator:

; 170  : 	}

  000a4	eb b9		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 171  : 	return true;

  000a6	b0 01		 mov	 al, 1
$LN1@operator:

; 172  : }

  000a8	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ac	5f		 pop	 rdi
  000ad	c3		 ret	 0
??8CmString@@QEAA_NPEBD@Z ENDP				; CmString::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?capacity_idx@CmString@@QEBAHXZ
_TEXT	SEGMENT
this$ = 16
?capacity_idx@CmString@@QEBAHXZ PROC			; CmString::capacity_idx, COMDAT

; 37   : 	inline int capacity_idx() const {return m_nSftIdx;}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?capacity_idx@CmString@@QEBAHXZ ENDP			; CmString::capacity_idx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?c_str@CmString@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 16
?c_str@CmString@@QEBAPEBDXZ PROC			; CmString::c_str, COMDAT

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?c_str@CmString@@QEBAPEBDXZ ENDP			; CmString::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1CmString@@QEAA@XZ PROC				; CmString::~CmString

; 41   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 0c 00 00 00	 mov	 ecx, 12
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  0001e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 42   : 	if (m_pValue) {

  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00030	74 36		 je	 SHORT $LN2@CmString

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00037	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0004a	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex
  0004f	90		 npad	 1

; 44   : 		m_pValue = NULL;

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00055	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 45   : 		m_nSftIdx = 0;

  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00061	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
$LN2@CmString:

; 46   : 	}
; 47   : }

  00068	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
??1CmString@@QEAA@XZ ENDP				; CmString::~CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 48
str$ = 56
??0CmString@@QEAA@PEBV0@@Z PROC				; CmString::CmString

; 34   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 35   : 	m_nSftIdx = str->capacity_idx();

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QEBAHXZ ; CmString::capacity_idx
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 36   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00044	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 37   : 	_tcscpy(m_pValue, str->c_str());

  00051	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00056	e8 00 00 00 00	 call	 ?c_str@CmString@@QEBAPEBDXZ ; CmString::c_str
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00063	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00066	e8 00 00 00 00	 call	 strcpy

; 38   : }

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
??0CmString@@QEAA@PEBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 48
str$ = 56
??0CmString@@QEAA@AEBV0@@Z PROC				; CmString::CmString

; 27   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 28   : 	m_nSftIdx = str.capacity_idx();

  00023	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QEBAHXZ ; CmString::capacity_idx
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 29   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00044	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 30   : 	_tcscpy(m_pValue, str.c_str());

  00051	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00056	e8 00 00 00 00	 call	 ?c_str@CmString@@QEBAPEBDXZ ; CmString::c_str
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00063	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00066	e8 00 00 00 00	 call	 strcpy

; 31   : }

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00070	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
??0CmString@@QEAA@AEBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 48
size$ = 56
??0CmString@@QEAA@H@Z PROC				; CmString::CmString

; 20   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 21   : 	m_nSftIdx = getIndex(size);

  00022	8b 4c 24 38	 mov	 ecx, DWORD PTR size$[rsp]
  00026	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00030	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 22   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00042	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 23   : 	m_pValue[0] = 0;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 24   : }

  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006d	5f		 pop	 rdi
  0006e	c3		 ret	 0
??0CmString@@QEAA@H@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
size$ = 32
this$ = 64
str$ = 72
??0CmString@@QEAA@PEBD@Z PROC				; CmString::CmString

; 12   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 13   : 	int size = STRING_SIZE(str);

  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00028	e8 00 00 00 00	 call	 strlen
  0002d	48 ff c0	 inc	 rax
  00030	89 44 24 20	 mov	 DWORD PTR size$[rsp], eax

; 14   : 	m_nSftIdx = getIndex(size);

  00034	8b 4c 24 20	 mov	 ecx, DWORD PTR size$[rsp]
  00038	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00042	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 15   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004a	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00054	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 16   : 	_tcscpy(m_pValue, str);

  00061	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0006e	e8 00 00 00 00	 call	 strcpy

; 17   : }

  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0007c	5f		 pop	 rdi
  0007d	c3		 ret	 0
??0CmString@@QEAA@PEBD@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\commstring.cpp
_TEXT	SEGMENT
this$ = 16
??0CmString@@QEAA@XZ PROC				; CmString::CmString

; 6    : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 7    : 	m_nSftIdx = 0;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 8    : 	m_pValue = NULL;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 9    : }

  0001e	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
??0CmString@@QEAA@XZ ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?newBufByIndex@CMemManager@@QEAAPEADH@Z
_TEXT	SEGMENT
this$ = 48
nIdx$ = 56
?newBufByIndex@CMemManager@@QEAAPEADH@Z PROC		; CMemManager::newBufByIndex, COMDAT

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	45 33 c0	 xor	 r8d, r8d
  00025	8b 54 24 38	 mov	 edx, DWORD PTR nIdx$[rsp]
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AEAAPEADH_K@Z ; CMemManager::__newBuf
  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
?newBufByIndex@CMemManager@@QEAAPEADH@Z ENDP		; CMemManager::newBufByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getSizeByIndex@@YAHH@Z
_TEXT	SEGMENT
nIdx$ = 16
?getSizeByIndex@@YAHH@Z PROC				; getSizeByIndex, COMDAT

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 63 44 24 10	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_nSizeList@@3QBHB ; g_nSizeList
  00011	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00014	5f		 pop	 rdi
  00015	c3		 ret	 0
?getSizeByIndex@@YAHH@Z ENDP				; getSizeByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
m$ = 32
$S1$ = 56
tv80 = 68
tv73 = 72
s$ = 96
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 14 00 00 00	 mov	 ecx, 20
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 60	 mov	 ecx, DWORD PTR [rsp+96]
  0001c	f2 0f 2a 44 24
	60		 cvtsi2sd xmm0, DWORD PTR s$[rsp]
  00022	f2 0f 11 44 24
	38		 movsd	 QWORD PTR $S1$[rsp], xmm0
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	48 6b c0 01	 imul	 rax, rax, 1
  00031	8b 44 04 38	 mov	 eax, DWORD PTR $S1$[rsp+rax]
  00035	c1 f8 14	 sar	 eax, 20
  00038	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  0003d	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	89 4c 24 44	 mov	 DWORD PTR tv80[rsp], ecx
  0004e	0f b6 c8	 movzx	 ecx, al
  00051	8b 44 24 44	 mov	 eax, DWORD PTR tv80[rsp]
  00055	d3 e0		 shl	 eax, cl
  00057	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  0005b	2b c8		 sub	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  00063	23 c8		 and	 ecx, eax
  00065	8b c1		 mov	 eax, ecx
  00067	85 c0		 test	 eax, eax
  00069	74 0a		 je	 SHORT $LN3@getIndex
  0006b	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00073	eb 08		 jmp	 SHORT $LN4@getIndex
$LN3@getIndex:
  00075	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN4@getIndex:
  0007d	8b 44 24 48	 mov	 eax, DWORD PTR tv73[rsp]
  00081	8b 4c 24 20	 mov	 ecx, DWORD PTR m$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	8b f8		 mov	 edi, eax
  0008b	48 8b cc	 mov	 rcx, rsp
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getIndex@@YAHH@Z$rtcFrameData
  00095	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0009a	8b c7		 mov	 eax, edi
  0009c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
i$ = 16
max$ = 24
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	83 7c 24 10 00	 cmp	 DWORD PTR i$[rsp], 0
  0000e	7c 0e		 jl	 SHORT $LN2@ISINCLUDE
  00010	8b 44 24 18	 mov	 eax, DWORD PTR max$[rsp]
  00014	39 44 24 10	 cmp	 DWORD PTR i$[rsp], eax
  00018	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  0001a	b0 01		 mov	 al, 1
  0001c	eb 02		 jmp	 SHORT $LN1@ISINCLUDE
$LN2@ISINCLUDE:
  0001e	32 c0		 xor	 al, al
$LN1@ISINCLUDE:
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsncpy
_TEXT	SEGMENT
_Dst$ = 48
_Source$ = 56
_Count$ = 64
_tcsncpy PROC						; COMDAT

; 1542 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Source$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dst$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsnbcpy

; 1546 : #pragma warning(pop)
; 1547 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
_tcsncpy ENDP
_TEXT	ENDS
END
