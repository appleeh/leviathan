; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_tcsncpy
PUBLIC	_tcsrchr
PUBLIC	?_tcsrchr@@YAPEADPEADI@Z			; _tcsrchr
PUBLIC	??0CPath@@QEAA@PEAD@Z				; CPath::CPath
PUBLIC	??1CPath@@QEAA@XZ				; CPath::~CPath
PUBLIC	?getPath@CPath@@QEAA_KPEAD@Z			; CPath::getPath
EXTRN	memset:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp__mbsnbcpy:PROC
EXTRN	__imp__mbsrchr:PROC
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	GetModuleFileNameExA:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsncpy DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_tcsncpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsrchr DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$_tcsrchr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcsrchr@@YAPEADPEADI@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_tcsrchr@@YAPEADPEADI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0CPath@@QEAA@PEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+141
	DD	imagerel $unwind$??0CPath@@QEAA@PEAD@Z
$pdata$??1CPath@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1CPath@@QEAA@XZ
$pdata$?getPath@CPath@@QEAA_KPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+288
	DD	imagerel $unwind$?getPath@CPath@@QEAA_KPEAD@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
?getPath@CPath@@QEAA_KPEAD@Z$rtcName$0 DB 073H		; CPath::getPath
	DB	07aH
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+10
?getPath@CPath@@QEAA_KPEAD@Z$rtcVarDesc DD 030H		; CPath::getPath
	DD	080H
	DQ	FLAT:?getPath@CPath@@QEAA_KPEAD@Z$rtcName$0
	ORG $+48
?getPath@CPath@@QEAA_KPEAD@Z$rtcFrameData DD 01H	; CPath::getPath
	DD	00H
	DQ	FLAT:?getPath@CPath@@QEAA_KPEAD@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$??0CPath@@QEAA@PEAD@Z DD 022301H
	DD	0700b520fH
$unwind$??1CPath@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$?getPath@CPath@@QEAA_KPEAD@Z DD 033b19H
	DD	01c0112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcsrchr@@YAPEADPEADI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsrchr DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsncpy DD 022801H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
szTmp$ = 48
nLen$ = 184
pRear$ = 192
__$ArrayPad$ = 208
this$ = 240
pResolved_name$ = 248
?getPath@CPath@@QEAA_KPEAD@Z PROC			; CPath::getPath

; 45   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 46   : 	TCHAR szTmp[128] = {0,};

  0003b	c6 44 24 30 00	 mov	 BYTE PTR szTmp$[rsp], 0
  00040	48 8d 44 24 31	 lea	 rax, QWORD PTR szTmp$[rsp+1]
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0004f	f3 aa		 rep stosb

; 47   : 	size_t nLen=0;

  00051	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR nLen$[rsp], 0

; 48   : 	TCHAR *pRear;
; 49   : 
; 50   : #ifdef WIN32
; 51   : 	if(GetModuleFileNameEx(GetCurrentProcess(), NULL, szTmp, 128)) {

  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00063	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  00069	4c 8d 44 24 30	 lea	 r8, QWORD PTR szTmp$[rsp]
  0006e	33 d2		 xor	 edx, edx
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 GetModuleFileNameExA
  00078	85 c0		 test	 eax, eax
  0007a	74 19		 je	 SHORT $LN2@getPath

; 52   : 		pRear = _tcsrchr((TCHAR *)szTmp,'\\');

  0007c	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00081	48 8d 4c 24 30	 lea	 rcx, QWORD PTR szTmp$[rsp]
  00086	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0008b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR pRear$[rsp], rax
  00093	eb 04		 jmp	 SHORT $LN3@getPath
$LN2@getPath:

; 53   : 	} else return 0;

  00095	33 c0		 xor	 eax, eax
  00097	eb 59		 jmp	 SHORT $LN1@getPath
$LN3@getPath:

; 54   : #else
; 55   : 	if(realpath(m_szProcessName,szTmp)) {
; 56   : 		pRear = _tcsrchr((TCHAR *)szTmp,'/');
; 57   : 	} else return 0;
; 58   : #endif
; 59   : 	
; 60   : 	// process directory path ------------------------
; 61   : 	nLen = pRear - szTmp + 1;

  00099	48 8d 44 24 30	 lea	 rax, QWORD PTR szTmp$[rsp]
  0009e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pRear$[rsp]
  000a6	48 2b c8	 sub	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 ff c0	 inc	 rax
  000af	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR nLen$[rsp], rax

; 62   : 	_tcsncpy(pResolved_name, szTmp, nLen);

  000b7	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR nLen$[rsp]
  000bf	48 8d 54 24 30	 lea	 rdx, QWORD PTR szTmp$[rsp]
  000c4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR pResolved_name$[rsp]
  000cc	e8 00 00 00 00	 call	 _tcsncpy

; 63   : 	pResolved_name[nLen] = 0;

  000d1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nLen$[rsp]
  000d9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR pResolved_name$[rsp]
  000e1	48 03 c8	 add	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	c6 00 00	 mov	 BYTE PTR [rax], 0

; 64   : 	//_tprintf(_T("pResolved_name:%s\n"),pResolved_name);
; 65   : 	// --------------------------------------------
; 66   : 	return nLen;

  000ea	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nLen$[rsp]
$LN1@getPath:

; 67   : }

  000f2	48 8b f8	 mov	 rdi, rax
  000f5	48 8b cc	 mov	 rcx, rsp
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getPath@CPath@@QEAA_KPEAD@Z$rtcFrameData
  000ff	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00104	48 8b c7	 mov	 rax, rdi
  00107	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010f	48 33 cc	 xor	 rcx, rsp
  00112	e8 00 00 00 00	 call	 __security_check_cookie
  00117	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
?getPath@CPath@@QEAA_KPEAD@Z ENDP			; CPath::getPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
this$ = 16
??1CPath@@QEAA@XZ PROC					; CPath::~CPath

; 40   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 41   : 
; 42   : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1CPath@@QEAA@XZ ENDP					; CPath::~CPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\newproject2\com\src\compath.cpp
_TEXT	SEGMENT
len$1 = 32
this$ = 64
pProcName$ = 72
??0CPath@@QEAA@PEAD@Z PROC				; CPath::CPath

; 19   : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 0c 00 00 00	 mov	 ecx, 12
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 20   : 	if(pProcName) {

  00023	48 83 7c 24 48
	00		 cmp	 QWORD PTR pProcName$[rsp], 0
  00029	74 42		 je	 SHORT $LN2@CPath

; 21   : 		size_t len = _tcslen(pProcName);

  0002b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pProcName$[rsp]
  00030	e8 00 00 00 00	 call	 strlen
  00035	48 89 44 24 20	 mov	 QWORD PTR len$1[rsp], rax

; 22   : 		if(len) {

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR len$1[rsp], 0
  00040	74 14		 je	 SHORT $LN3@CPath

; 23   : 			_tcscpy(m_szProcessName, pProcName);

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR pProcName$[rsp]
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 strcpy

; 24   : 		}
; 25   : 		else {

  00054	eb 15		 jmp	 SHORT $LN4@CPath
$LN3@CPath:

; 26   : 			memset(m_szProcessName, 0, sizeof(m_szProcessName));

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005b	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00061	33 d2		 xor	 edx, edx
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 memset
$LN4@CPath:

; 27   : 		}
; 28   : 		return;

  0006b	eb 15		 jmp	 SHORT $LN1@CPath
$LN2@CPath:

; 29   : 	}
; 30   : #ifdef WIN32	
; 31   : 	memset(m_szProcessName, 0, sizeof(m_szProcessName));

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00072	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00078	33 d2		 xor	 edx, edx
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 memset
$LN1@CPath:

; 32   : #else
; 33   : 	if(!getProcessNameByPid(m_szProcessName)) {
; 34   : 		memset(m_szProcessName, 0, sizeof(m_szProcessName));
; 35   : 	}
; 36   : #endif
; 37   : }

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00087	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
??0CPath@@QEAA@PEAD@Z ENDP				; CPath::CPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPEADPEADI@Z
_TEXT	SEGMENT
_S$ = 48
_C$ = 56
?_tcsrchr@@YAPEADPEADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _C$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  0002b	e8 00 00 00 00	 call	 _tcsrchr
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?_tcsrchr@@YAPEADPEADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsrchr
_TEXT	SEGMENT
_s1$ = 48
_c$ = 56
_tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _c$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsrchr
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
_tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsncpy
_TEXT	SEGMENT
_Dst$ = 48
_Source$ = 56
_Count$ = 64
_tcsncpy PROC						; COMDAT

; 1542 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Source$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dst$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsnbcpy

; 1546 : #pragma warning(pop)
; 1547 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
_tcsncpy ENDP
_TEXT	ENDS
END
