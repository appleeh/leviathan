; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG44526 DB	'm_nMaxCount[%d]', 00H
$SG44527 DB	'CSList::__alloc', 00H
$SG44548 DB	'i[%d] m_nLast[%d] m_nCurCount[%d]', 00H
	ORG $+6
$SG44549 DB	'CSList::add', 00H
	ORG $+4
$SG44570 DB	' i[%d] m_nLast[%d] m_nCurCount[%d]', 00H
	ORG $+5
$SG44571 DB	'CSList::push_back', 00H
	ORG $+6
$SG44597 DB	' del FAIL! i[%d] m_nMax[%d]', 00H
	ORG $+4
$SG44598 DB	'CSList::del', 00H
	ORG $+4
$SG44612 DB	'i[%d] m_nMax[%d]', 00H
	ORG $+7
$SG44613 DB	'CSList::del', 00H
CONST	ENDS
PUBLIC	?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z		; ISABLETODELETE
PUBLIC	?ISINCLUDE@@YA_NHH@Z				; ISINCLUDE
PUBLIC	?getIndex@@YAHH@Z				; getIndex
PUBLIC	?delBuf@CMemManager@@QEAAXPEADH@Z		; CMemManager::delBuf
PUBLIC	??0CSList@@QEAA@XZ				; CSList::CSList
PUBLIC	??1CSList@@QEAA@XZ				; CSList::~CSList
PUBLIC	?clear@CSList@@QEAAXXZ				; CSList::clear
PUBLIC	?add@CSList@@QEAA_NPEAXPEAH@Z			; CSList::add
PUBLIC	?push_back@CSList@@QEAA_NPEAXPEAH@Z		; CSList::push_back
PUBLIC	?del@CSList@@QEAA_NPEAX_N@Z			; CSList::del
PUBLIC	?del@CSList@@QEAA_NH_N@Z			; CSList::del
PUBLIC	?getNext@CSList@@QEAAPEAXPEAH@Z			; CSList::getNext
PUBLIC	?__alloc@CSList@@AEAAHH@Z			; CSList::__alloc
PUBLIC	?_DEL@CSList@@AEAAXH@Z				; CSList::_DEL
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strlen:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	?delBufByIndex@CMemManager@@QEAAXPEADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__debugLog@CLogger@@QEAAXHPEBDH0ZZ:PROC	; CLogger::__debugLog
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?gs_pMMgr@@3PEAVCMemManager@@EA:QWORD		; gs_pMMgr
EXTRN	?gs_cLogger@@3VCLogger@@A:BYTE			; gs_cLogger
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+20
	DD	imagerel $unwind$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ISINCLUDE@@YA_NHH@Z DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$?ISINCLUDE@@YA_NHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getIndex@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$?getIndex@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?delBuf@CMemManager@@QEAAXPEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?delBuf@CMemManager@@QEAAXPEADH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0CSList@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0CSList@@QEAA@XZ
$pdata$??1CSList@@QEAA@XZ DD imagerel $LN19
	DD	imagerel $LN19+483
	DD	imagerel $unwind$??1CSList@@QEAA@XZ
$pdata$?clear@CSList@@QEAAXXZ DD imagerel $LN18
	DD	imagerel $LN18+494
	DD	imagerel $unwind$?clear@CSList@@QEAAXXZ
$pdata$?add@CSList@@QEAA_NPEAXPEAH@Z DD imagerel $LN15
	DD	imagerel $LN15+446
	DD	imagerel $unwind$?add@CSList@@QEAA_NPEAXPEAH@Z
$pdata$?push_back@CSList@@QEAA_NPEAXPEAH@Z DD imagerel $LN15
	DD	imagerel $LN15+446
	DD	imagerel $unwind$?push_back@CSList@@QEAA_NPEAXPEAH@Z
$pdata$?del@CSList@@QEAA_NPEAX_N@Z DD imagerel $LN20
	DD	imagerel $LN20+480
	DD	imagerel $unwind$?del@CSList@@QEAA_NPEAX_N@Z
$pdata$?del@CSList@@QEAA_NH_N@Z DD imagerel $LN13
	DD	imagerel $LN13+367
	DD	imagerel $unwind$?del@CSList@@QEAA_NH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getNext@CSList@@QEAAPEAXPEAH@Z DD imagerel $LN7
	DD	imagerel $LN7+97
	DD	imagerel $unwind$?getNext@CSList@@QEAAPEAXPEAH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?__alloc@CSList@@AEAAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+229
	DD	imagerel $unwind$?__alloc@CSList@@AEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_DEL@CSList@@AEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?_DEL@CSList@@AEAAXH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_DEL@CSList@@AEAAXH@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getNext@CSList@@QEAAPEAXPEAH@Z DD 010b01H
	DD	0700bH
xdata	ENDS
CONST	SEGMENT
??1CSList@@QEAA@XZ$rtcName$0 DB 069H			; CSList::~CSList
	DB	064H
	DB	078H
	DB	00H
??1CSList@@QEAA@XZ$rtcVarDesc DD 024H			; CSList::~CSList
	DD	04H
	DQ	FLAT:??1CSList@@QEAA@XZ$rtcName$0
	ORG $+48
??1CSList@@QEAA@XZ$rtcFrameData DD 01H			; CSList::~CSList
	DD	00H
	DQ	FLAT:??1CSList@@QEAA@XZ$rtcVarDesc
$cppxdata$??1CSList@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CSList@@QEAA@XZ
	DD	058H
	DD	00H
	DD	05H
?clear@CSList@@QEAAXXZ$rtcName$0 DB 069H		; CSList::clear
	DB	064H
	DB	078H
	DB	00H
	ORG $+4
?clear@CSList@@QEAAXXZ$rtcVarDesc DD 024H		; CSList::clear
	DD	04H
	DQ	FLAT:?clear@CSList@@QEAAXXZ$rtcName$0
	ORG $+48
?clear@CSList@@QEAAXXZ$rtcFrameData DD 01H		; CSList::clear
	DD	00H
	DQ	FLAT:?clear@CSList@@QEAAXXZ$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$??0CSList@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$??1CSList@@QEAA@XZ DD 023c19H
	DD	07006f20dH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??1CSList@@QEAA@XZ
	DD	07bH
$ip2state$??1CSList@@QEAA@XZ DD imagerel ??1CSList@@QEAA@XZ
	DD	0ffffffffH
$unwind$?clear@CSList@@QEAAXXZ DD 023319H
	DD	07006f20dH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?add@CSList@@QEAA_NPEAXPEAH@Z DD 022801H
	DD	070109214H
$unwind$?push_back@CSList@@QEAA_NPEAXPEAH@Z DD 022801H
	DD	070109214H
$unwind$?del@CSList@@QEAA_NPEAX_N@Z DD 022b01H
	DD	07010d214H
$unwind$?del@CSList@@QEAA_NH_N@Z DD 022701H
	DD	0700fb213H
$unwind$?__alloc@CSList@@AEAAHH@Z DD 022201H
	DD	0700a720eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?delBuf@CMemManager@@QEAAXPEADH@Z DD 022801H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getIndex@@YAHH@Z DD 021c01H
	DD	070059209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?getIndex@@YAHH@Z$rtcName$0 DB 024H			; getIndex
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
?getIndex@@YAHH@Z$rtcVarDesc DD 038H			; getIndex
	DD	08H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcName$0
	ORG $+48
?getIndex@@YAHH@Z$rtcFrameData DD 01H			; getIndex
	DD	00H
	DQ	FLAT:?getIndex@@YAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ISINCLUDE@@YA_NHH@Z DD 010901H
	DD	07009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z DD 010501H
	DD	07005H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comlist.h
;	COMDAT ?_DEL@CSList@@AEAAXH@Z
_TEXT	SEGMENT
this$ = 16
i$ = 24
?_DEL@CSList@@AEAAXH@Z PROC				; CSList::_DEL, COMDAT

; 60   : 	inline void _DEL(int i) { m_pArray[i] = 0; m_nUse--; m_nDelIdx = i; }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 63 44 24 18	 movsxd	 rax, DWORD PTR i$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00014	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00017	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00027	ff c8		 dec	 eax
  00029	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00031	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00036	8b 4c 24 18	 mov	 ecx, DWORD PTR i$[rsp]
  0003a	89 48 10	 mov	 DWORD PTR [rax+16], ecx
  0003d	5f		 pop	 rdi
  0003e	c3		 ret	 0
?_DEL@CSList@@AEAAXH@Z ENDP				; CSList::_DEL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
pList$ = 48
this$ = 80
nMaxCount$ = 88
?__alloc@CSList@@AEAAHH@Z PROC				; CSList::__alloc

; 66   : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 10 00 00 00	 mov	 ecx, 16
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 67   : 	if (nMaxCount <= m_nMax) return m_nMax;

  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00027	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0002a	39 44 24 58	 cmp	 DWORD PTR nMaxCount$[rsp], eax
  0002e	7f 0d		 jg	 SHORT $LN2@alloc
  00030	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00035	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00038	e9 a2 00 00 00	 jmp	 $LN1@alloc
$LN2@alloc:

; 68   : 	void** pList = (void**)calloc(nMaxCount, sizeof(void*));

  0003d	48 63 44 24 58	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  00042	ba 08 00 00 00	 mov	 edx, 8
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00050	48 89 44 24 30	 mov	 QWORD PTR pList$[rsp], rax

; 69   : 	if (!pList) {

  00055	48 83 7c 24 30
	00		 cmp	 QWORD PTR pList$[rsp], 0
  0005b	75 36		 jne	 SHORT $LN3@alloc

; 70   : 		gs_cLogger.DebugLog(LEVEL_ERROR, _T("m_nMaxCount[%d]"), nMaxCount);

  0005d	8b 44 24 58	 mov	 eax, DWORD PTR nMaxCount$[rsp]
  00061	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG44526
  0006c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00071	41 b9 46 00 00
	00		 mov	 r9d, 70			; 00000046H
  00077	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG44527
  0007e	ba 05 00 00 00	 mov	 edx, 5
  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  0008a	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QEAAXHPEBDH0ZZ ; CLogger::__debugLog

; 71   : 		return 0;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 4c		 jmp	 SHORT $LN1@alloc
$LN3@alloc:

; 72   : 	}
; 73   : 	//_stprintf(g_szMessage, _T("CList::__alloc list m_nMaxCount[%d]"), nMaxCount);
; 74   : 	if (m_pArray) {

  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00098	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009c	74 30		 je	 SHORT $LN4@alloc

; 75   : 		memcpy(pList, m_pArray, m_nMax * sizeof(void*));

  0009e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a3	48 63 40 14	 movsxd	 rax, DWORD PTR [rax+20]
  000a7	48 c1 e0 03	 shl	 rax, 3
  000ab	4c 8b c0	 mov	 r8, rax
  000ae	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000b3	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000b6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pList$[rsp]
  000bb	e8 00 00 00 00	 call	 memcpy

; 76   : 		free(m_pArray);

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000c5	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN4@alloc:

; 77   : 	}
; 78   : 	m_pArray = pList;

  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000d3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pList$[rsp]
  000d8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 79   : 	return nMaxCount;

  000db	8b 44 24 58	 mov	 eax, DWORD PTR nMaxCount$[rsp]
$LN1@alloc:

; 80   : }

  000df	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e3	5f		 pop	 rdi
  000e4	c3		 ret	 0
?__alloc@CSList@@AEAAHH@Z ENDP				; CSList::__alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comlist.h
;	COMDAT ?getNext@CSList@@QEAAPEAXPEAH@Z
_TEXT	SEGMENT
this$ = 16
pIdx$ = 24
?getNext@CSList@@QEAAPEAXPEAH@Z PROC			; CSList::getNext, COMDAT

; 35   : 	inline void* getNext(int *pIdx) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 36   : 		for (*pIdx; *pIdx < m_nMax; (*pIdx)++) {

  0000b	eb 10		 jmp	 SHORT $LN4@getNext
$LN2@getNext:
  0000d	48 8b 44 24 18	 mov	 rax, QWORD PTR pIdx$[rsp]
  00012	8b 00		 mov	 eax, DWORD PTR [rax]
  00014	ff c0		 inc	 eax
  00016	48 8b 4c 24 18	 mov	 rcx, QWORD PTR pIdx$[rsp]
  0001b	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@getNext:
  0001d	48 8b 44 24 18	 mov	 rax, QWORD PTR pIdx$[rsp]
  00022	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00027	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  0002a	39 08		 cmp	 DWORD PTR [rax], ecx
  0002c	7d 2f		 jge	 SHORT $LN3@getNext

; 37   : 			if (m_pArray[*pIdx]) { return m_pArray[*pIdx]; }

  0002e	48 8b 44 24 18	 mov	 rax, QWORD PTR pIdx$[rsp]
  00033	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00036	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003e	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00043	74 16		 je	 SHORT $LN5@getNext
  00045	48 8b 44 24 18	 mov	 rax, QWORD PTR pIdx$[rsp]
  0004a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0004d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00052	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00055	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00059	eb 04		 jmp	 SHORT $LN1@getNext
$LN5@getNext:

; 38   : 		}

  0005b	eb b0		 jmp	 SHORT $LN2@getNext
$LN3@getNext:

; 39   : 		return NULL;

  0005d	33 c0		 xor	 eax, eax
$LN1@getNext:

; 40   : 	}

  0005f	5f		 pop	 rdi
  00060	c3		 ret	 0
?getNext@CSList@@QEAAPEAXPEAH@Z ENDP			; CSList::getNext
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
$T1 = 64
$T2 = 72
tv81 = 80
this$ = 112
i$ = 120
bDeepDelete$ = 128
?del@CSList@@QEAA_NH_N@Z PROC				; CSList::del

; 178  : {

$LN13:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 18 00 00 00	 mov	 ecx, 24
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]

; 179  : 	if (!ISINCLUDE(i, m_nMax)) {

  00027	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0002c	8b 50 14	 mov	 edx, DWORD PTR [rax+20]
  0002f	8b 4c 24 78	 mov	 ecx, DWORD PTR i$[rsp]
  00033	e8 00 00 00 00	 call	 ?ISINCLUDE@@YA_NHH@Z	; ISINCLUDE
  00038	0f b6 c0	 movzx	 eax, al
  0003b	85 c0		 test	 eax, eax
  0003d	75 45		 jne	 SHORT $LN4@del

; 180  : 		gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nMax[%d]", i, m_nMax);

  0003f	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00044	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00047	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0004b	8b 44 24 78	 mov	 eax, DWORD PTR i$[rsp]
  0004f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG44612
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	41 b9 b4 00 00
	00		 mov	 r9d, 180		; 000000b4H
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG44613
  0006c	ba 05 00 00 00	 mov	 edx, 5
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  00078	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QEAAXHPEBDH0ZZ ; CLogger::__debugLog

; 181  : 		return false;

  0007d	32 c0		 xor	 al, al
  0007f	e9 e5 00 00 00	 jmp	 $LN1@del
$LN4@del:

; 182  : 	}
; 183  : 	if (bDeepDelete) {

  00084	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR bDeepDelete$[rsp]
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 c5 00 00
	00		 je	 $LN5@del

; 184  : 		switch (m_nObjAllocType) {

  00094	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00099	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0009c	89 44 24 50	 mov	 DWORD PTR tv81[rsp], eax
  000a0	83 7c 24 50 02	 cmp	 DWORD PTR tv81[rsp], 2
  000a5	74 1a		 je	 SHORT $LN6@del
  000a7	83 7c 24 50 03	 cmp	 DWORD PTR tv81[rsp], 3
  000ac	74 37		 je	 SHORT $LN7@del
  000ae	83 7c 24 50 04	 cmp	 DWORD PTR tv81[rsp], 4
  000b3	74 49		 je	 SHORT $LN8@del
  000b5	83 7c 24 50 05	 cmp	 DWORD PTR tv81[rsp], 5
  000ba	74 7d		 je	 SHORT $LN9@del
  000bc	e9 98 00 00 00	 jmp	 $LN2@del
$LN6@del:

; 185  : 		case eAlloc_Type_new:	delete m_pArray[i]; break;

  000c1	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$[rsp]
  000c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000cb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ce	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000d2	48 89 44 24 40	 mov	 QWORD PTR $T1[rsp], rax
  000d7	33 d2		 xor	 edx, edx
  000d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR $T1[rsp]
  000de	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  000e3	eb 74		 jmp	 SHORT $LN2@del
$LN7@del:

; 186  : 		case eAlloc_Type_alloc:	free(m_pArray[i]); break;

  000e5	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$[rsp]
  000ea	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f2	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  000fc	eb 5b		 jmp	 SHORT $LN2@del
$LN8@del:

; 187  : 		case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)m_pArray[i], STRING_SIZE((TCHAR *)m_pArray[i])); break;

  000fe	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$[rsp]
  00103	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00108	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0010b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0010f	e8 00 00 00 00	 call	 strlen
  00114	48 ff c0	 inc	 rax
  00117	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR i$[rsp]
  0011c	48 8b 54 24 70	 mov	 rdx, QWORD PTR this$[rsp]
  00121	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00124	44 8b c0	 mov	 r8d, eax
  00127	48 8b 14 ca	 mov	 rdx, QWORD PTR [rdx+rcx*8]
  0012b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00132	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBuf
  00137	eb 20		 jmp	 SHORT $LN2@del
$LN9@del:

; 188  : 		case eAlloc_Type_newArray:	delete[] m_pArray[i]; break;

  00139	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$[rsp]
  0013e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00143	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00146	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0014a	48 89 44 24 48	 mov	 QWORD PTR $T2[rsp], rax
  0014f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T2[rsp]
  00154	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN2@del:
$LN5@del:

; 189  : 		case eAlloc_Type_none: break;
; 190  : 		case eAlloc_Type_MemPool: break;
; 191  : 		}
; 192  : 	}
; 193  : 	_DEL(i);

  00159	8b 54 24 78	 mov	 edx, DWORD PTR i$[rsp]
  0015d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00162	e8 00 00 00 00	 call	 ?_DEL@CSList@@AEAAXH@Z	; CSList::_DEL

; 194  : //	_stprintf(g_szMessage, _T("CMemList::del i[%d] m_nLast[%d] m_nCurCount[%d]"), i, m_nLast, m_nUse);
; 195  : 	return true;

  00167	b0 01		 mov	 al, 1
$LN1@del:

; 196  : }

  00169	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0016d	5f		 pop	 rdi
  0016e	c3		 ret	 0
?del@CSList@@QEAA_NH_N@Z ENDP				; CSList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
i$ = 64
$T1 = 72
$T2 = 80
tv75 = 88
tv79 = 96
tv90 = 104
this$ = 128
p$ = 136
bDeepDelete$ = 144
?del@CSList@@QEAA_NPEAX_N@Z PROC			; CSList::del

; 154  : {

$LN20:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 1c 00 00 00	 mov	 ecx, 28
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]

; 155  : 	int i;
; 156  : 	for (i = 0; i < m_nMax; i++) {

  0002b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00033	eb 0a		 jmp	 SHORT $LN4@del
$LN2@del:
  00035	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00039	ff c0		 inc	 eax
  0003b	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN4@del:
  0003f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00047	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0004a	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  0004e	0f 8d 43 01 00
	00		 jge	 $LN3@del

; 157  : 		if (m_pArray[i] == p) {

  00054	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00061	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00064	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0006c	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  00070	0f 85 1c 01 00
	00		 jne	 $LN7@del

; 158  : 			if (bDeepDelete) {

  00076	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR bDeepDelete$[rsp]
  0007e	85 c0		 test	 eax, eax
  00080	0f 84 f7 00 00
	00		 je	 $LN8@del

; 159  : 				switch (m_nObjAllocType) {

  00086	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008e	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00091	89 44 24 58	 mov	 DWORD PTR tv75[rsp], eax
  00095	83 7c 24 58 02	 cmp	 DWORD PTR tv75[rsp], 2
  0009a	74 1e		 je	 SHORT $LN9@del
  0009c	83 7c 24 58 03	 cmp	 DWORD PTR tv75[rsp], 3
  000a1	74 5e		 je	 SHORT $LN10@del
  000a3	83 7c 24 58 04	 cmp	 DWORD PTR tv75[rsp], 4
  000a8	74 67		 je	 SHORT $LN11@del
  000aa	83 7c 24 58 05	 cmp	 DWORD PTR tv75[rsp], 5
  000af	0f 84 85 00 00
	00		 je	 $LN12@del
  000b5	e9 c3 00 00 00	 jmp	 $LN5@del
$LN9@del:

; 160  : 				case eAlloc_Type_new:	delete p; break;

  000ba	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000c2	48 89 44 24 48	 mov	 QWORD PTR $T1[rsp], rax
  000c7	33 d2		 xor	 edx, edx
  000c9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T1[rsp]
  000ce	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  000d3	48 83 7c 24 48
	00		 cmp	 QWORD PTR $T1[rsp], 0
  000d9	75 0b		 jne	 SHORT $LN16@del
  000db	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  000e4	eb 19		 jmp	 SHORT $LN17@del
$LN16@del:
  000e6	48 c7 84 24 88
	00 00 00 23 81
	00 00		 mov	 QWORD PTR p$[rsp], 33059 ; 00008123H
  000f2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  000fa	48 89 44 24 60	 mov	 QWORD PTR tv79[rsp], rax
$LN17@del:
  000ff	eb 7c		 jmp	 SHORT $LN5@del
$LN10@del:

; 161  : 				case eAlloc_Type_alloc:	free(p); break;

  00101	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0010f	eb 6c		 jmp	 SHORT $LN5@del
$LN11@del:

; 162  : 				case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  00111	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  00119	e8 00 00 00 00	 call	 strlen
  0011e	48 ff c0	 inc	 rax
  00121	44 8b c0	 mov	 r8d, eax
  00124	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0012c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00133	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBuf
  00138	eb 43		 jmp	 SHORT $LN5@del
$LN12@del:

; 163  : 				case eAlloc_Type_newArray:	delete[] p; break;

  0013a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00142	48 89 44 24 50	 mov	 QWORD PTR $T2[rsp], rax
  00147	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T2[rsp]
  0014c	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00151	48 83 7c 24 50
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00157	75 0b		 jne	 SHORT $LN18@del
  00159	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv90[rsp], 0
  00162	eb 19		 jmp	 SHORT $LN19@del
$LN18@del:
  00164	48 c7 84 24 88
	00 00 00 23 81
	00 00		 mov	 QWORD PTR p$[rsp], 33059 ; 00008123H
  00170	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00178	48 89 44 24 68	 mov	 QWORD PTR tv90[rsp], rax
$LN19@del:
$LN5@del:
$LN8@del:

; 164  : 				case eAlloc_Type_none: break;
; 165  : 				case eAlloc_Type_MemPool: break;
; 166  : 				}
; 167  : 			}
; 168  : 			_DEL(i);

  0017d	8b 54 24 40	 mov	 edx, DWORD PTR i$[rsp]
  00181	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00189	e8 00 00 00 00	 call	 ?_DEL@CSList@@AEAAXH@Z	; CSList::_DEL

; 169  : //			_stprintf(g_szMessage, _T("CMemList::del i[%d] m_nLast[%d] m_nCurCount[%d]"), i, m_nLast, m_nUse);
; 170  : 			return true;

  0018e	b0 01		 mov	 al, 1
  00190	eb 48		 jmp	 SHORT $LN1@del
$LN7@del:

; 171  : 		}
; 172  : 	}

  00192	e9 9e fe ff ff	 jmp	 $LN2@del
$LN3@del:

; 173  : 	gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nMax[%d]", i, m_nMax);

  00197	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0019f	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  001a2	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  001a6	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  001aa	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG44597
  001b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ba	41 b9 ad 00 00
	00		 mov	 r9d, 173		; 000000adH
  001c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG44598
  001c7	ba 05 00 00 00	 mov	 edx, 5
  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  001d3	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QEAAXHPEBDH0ZZ ; CLogger::__debugLog

; 174  : 	return false;

  001d8	32 c0		 xor	 al, al
$LN1@del:

; 175  : }

  001da	48 83 c4 70	 add	 rsp, 112		; 00000070H
  001de	5f		 pop	 rdi
  001df	c3		 ret	 0
?del@CSList@@QEAA_NPEAX_N@Z ENDP			; CSList::del
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
nIdx$ = 64
i$ = 68
this$ = 96
Obj$ = 104
pIdx$ = 112
?push_back@CSList@@QEAA_NPEAXPEAH@Z PROC		; CSList::push_back

; 119  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 120  : 	int nIdx, i;
; 121  : 
; 122  : 	if (m_nUse >= m_nMax) {

  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00032	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00035	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00038	7c 4b		 jl	 SHORT $LN5@push_back

; 123  : 		if (!__alloc(m_nMax + UNIT_ADD_SIZE)) return false;

  0003a	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0003f	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00042	83 c0 0a	 add	 eax, 10
  00045	8b d0		 mov	 edx, eax
  00047	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?__alloc@CSList@@AEAAHH@Z ; CSList::__alloc
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN6@push_back
  00055	32 c0		 xor	 al, al
  00057	e9 5c 01 00 00	 jmp	 $LN1@push_back
$LN6@push_back:

; 124  : 		nIdx = m_nMax;

  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00061	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00064	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 125  : 		m_nMax += UNIT_ADD_SIZE;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0006d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00070	83 c0 0a	 add	 eax, 10
  00073	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00078	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 126  : 		goto ADD_SUCCESS;

  0007b	e9 e9 00 00 00	 jmp	 $LN7@push_back
  00080	e9 e4 00 00 00	 jmp	 $ADD_SUCCESS$16
$LN5@push_back:

; 127  : 	}
; 128  : 
; 129  : 	if (!m_pArray[m_nLast]) { nIdx = m_nLast;  goto ADD_SUCCESS; }

  00085	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0008a	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  0008e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00093	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00096	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0009b	75 16		 jne	 SHORT $LN8@push_back
  0009d	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000a2	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000a5	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax
  000a9	e9 bb 00 00 00	 jmp	 $LN9@push_back
  000ae	e9 b6 00 00 00	 jmp	 $ADD_SUCCESS$16
$LN8@push_back:

; 130  : 
; 131  : 	nIdx = m_nLast;

  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000b8	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000bb	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 132  : 	for (i = 0; i < m_nMax; i++)

  000bf	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000c7	eb 0a		 jmp	 SHORT $LN4@push_back
$LN2@push_back:
  000c9	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  000cd	ff c0		 inc	 eax
  000cf	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN4@push_back:
  000d3	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000d8	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000db	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  000df	7d 3a		 jge	 SHORT $LN3@push_back

; 133  : 	{
; 134  : 		if (nIdx >= m_nMax) nIdx = 0;

  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e6	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000e9	39 44 24 40	 cmp	 DWORD PTR nIdx$[rsp], eax
  000ed	7c 08		 jl	 SHORT $LN10@push_back
  000ef	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
$LN10@push_back:

; 135  : 		if (!m_pArray[nIdx]) {

  000f7	48 63 44 24 40	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  000fc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00101	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00104	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00109	75 04		 jne	 SHORT $LN11@push_back

; 136  : 			goto ADD_SUCCESS;

  0010b	eb 5c		 jmp	 SHORT $LN12@push_back
  0010d	eb 5a		 jmp	 SHORT $ADD_SUCCESS$16
$LN11@push_back:

; 137  : 		}
; 138  : 		nIdx++;

  0010f	8b 44 24 40	 mov	 eax, DWORD PTR nIdx$[rsp]
  00113	ff c0		 inc	 eax
  00115	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 139  : 	}

  00119	eb ae		 jmp	 SHORT $LN2@push_back
$LN3@push_back:

; 140  : 	gs_cLogger.DebugLog(LEVEL_ERROR, " i[%d] m_nLast[%d] m_nCurCount[%d]", nIdx, m_nLast, m_nUse);

  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00120	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00123	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00127	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0012c	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0012f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00133	8b 44 24 40	 mov	 eax, DWORD PTR nIdx$[rsp]
  00137	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0013b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG44570
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	41 b9 8c 00 00
	00		 mov	 r9d, 140		; 0000008cH
  0014d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG44571
  00154	ba 05 00 00 00	 mov	 edx, 5
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  00160	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QEAAXHPEBDH0ZZ ; CLogger::__debugLog

; 141  : 	return false;

  00165	32 c0		 xor	 al, al
  00167	eb 4f		 jmp	 SHORT $LN1@push_back
$LN7@push_back:
$LN9@push_back:
$LN12@push_back:
$ADD_SUCCESS$16:

; 142  : 
; 143  : ADD_SUCCESS:
; 144  : 	m_nUse++;

  00169	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0016e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00171	ff c0		 inc	 eax
  00173	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00178	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 145  : 	m_pArray[nIdx] = Obj;

  0017b	48 63 44 24 40	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00180	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00185	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00188	48 8b 54 24 68	 mov	 rdx, QWORD PTR Obj$[rsp]
  0018d	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 146  : 	m_nLast++;

  00191	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00196	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00199	ff c0		 inc	 eax
  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001a0	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 147  : 	//_stprintf(g_szMessage, _T("CMemList::add i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);
; 148  : 	if (pIdx) *pIdx = nIdx;

  001a3	48 83 7c 24 70
	00		 cmp	 QWORD PTR pIdx$[rsp], 0
  001a9	74 0b		 je	 SHORT $LN13@push_back
  001ab	48 8b 44 24 70	 mov	 rax, QWORD PTR pIdx$[rsp]
  001b0	8b 4c 24 40	 mov	 ecx, DWORD PTR nIdx$[rsp]
  001b4	89 08		 mov	 DWORD PTR [rax], ecx
$LN13@push_back:

; 149  : 	return true;

  001b6	b0 01		 mov	 al, 1
$LN1@push_back:

; 150  : }

  001b8	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001bc	5f		 pop	 rdi
  001bd	c3		 ret	 0
?push_back@CSList@@QEAA_NPEAXPEAH@Z ENDP		; CSList::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
nIdx$ = 64
i$ = 68
this$ = 96
Obj$ = 104
pIdx$ = 112
?add@CSList@@QEAA_NPEAXPEAH@Z PROC			; CSList::add

; 83   : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 14 00 00 00	 mov	 ecx, 20
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 84   : 	int nIdx, i;
; 85   : 
; 86   : 	if (m_nUse >= m_nMax) {

  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00032	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00035	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00038	7c 4b		 jl	 SHORT $LN5@add

; 87   : 		if (!__alloc(m_nMax + UNIT_ADD_SIZE)) {

  0003a	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0003f	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00042	83 c0 0a	 add	 eax, 10
  00045	8b d0		 mov	 edx, eax
  00047	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?__alloc@CSList@@AEAAHH@Z ; CSList::__alloc
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN6@add

; 88   : 			return false;

  00055	32 c0		 xor	 al, al
  00057	e9 5c 01 00 00	 jmp	 $LN1@add
$LN6@add:

; 89   : 		}
; 90   : 		nIdx = m_nMax;

  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00061	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00064	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 91   : 		m_nMax += UNIT_ADD_SIZE;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0006d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00070	83 c0 0a	 add	 eax, 10
  00073	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00078	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 92   : 		goto ADD_SUCCESS;

  0007b	e9 e9 00 00 00	 jmp	 $LN7@add
  00080	e9 e4 00 00 00	 jmp	 $ADD_SUCCESS$16
$LN5@add:

; 93   : 	}
; 94   : 
; 95   : 	if (!m_pArray[m_nDelIdx]) { nIdx = m_nDelIdx; goto ADD_SUCCESS; }

  00085	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0008a	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  0008e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00093	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00096	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0009b	75 16		 jne	 SHORT $LN8@add
  0009d	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000a2	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000a5	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax
  000a9	e9 bb 00 00 00	 jmp	 $LN9@add
  000ae	e9 b6 00 00 00	 jmp	 $ADD_SUCCESS$16
$LN8@add:

; 96   : 
; 97   : 	nIdx = m_nLast;

  000b3	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000b8	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000bb	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 98   : 	for (i = 0; i < m_nMax; i++)

  000bf	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000c7	eb 0a		 jmp	 SHORT $LN4@add
$LN2@add:
  000c9	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  000cd	ff c0		 inc	 eax
  000cf	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN4@add:
  000d3	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000d8	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000db	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  000df	7d 3a		 jge	 SHORT $LN3@add

; 99   : 	{
; 100  : 		if (nIdx >= m_nMax) nIdx = 0;

  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000e6	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000e9	39 44 24 40	 cmp	 DWORD PTR nIdx$[rsp], eax
  000ed	7c 08		 jl	 SHORT $LN10@add
  000ef	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
$LN10@add:

; 101  : 		if (!m_pArray[nIdx]) {

  000f7	48 63 44 24 40	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  000fc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00101	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00104	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00109	75 04		 jne	 SHORT $LN11@add

; 102  : 			goto ADD_SUCCESS;

  0010b	eb 5c		 jmp	 SHORT $LN12@add
  0010d	eb 5a		 jmp	 SHORT $ADD_SUCCESS$16
$LN11@add:

; 103  : 		}
; 104  : 		nIdx++;

  0010f	8b 44 24 40	 mov	 eax, DWORD PTR nIdx$[rsp]
  00113	ff c0		 inc	 eax
  00115	89 44 24 40	 mov	 DWORD PTR nIdx$[rsp], eax

; 105  : 	}

  00119	eb ae		 jmp	 SHORT $LN2@add
$LN3@add:

; 106  : 	gs_cLogger.DebugLog(LEVEL_ERROR, _T("i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);

  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00120	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00123	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00127	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0012c	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0012f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00133	8b 44 24 40	 mov	 eax, DWORD PTR nIdx$[rsp]
  00137	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0013b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG44548
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	41 b9 6a 00 00
	00		 mov	 r9d, 106		; 0000006aH
  0014d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG44549
  00154	ba 05 00 00 00	 mov	 edx, 5
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?gs_cLogger@@3VCLogger@@A ; gs_cLogger
  00160	e8 00 00 00 00	 call	 ?__debugLog@CLogger@@QEAAXHPEBDH0ZZ ; CLogger::__debugLog

; 107  : 	return false;

  00165	32 c0		 xor	 al, al
  00167	eb 4f		 jmp	 SHORT $LN1@add
$LN7@add:
$LN9@add:
$LN12@add:
$ADD_SUCCESS$16:

; 108  : 
; 109  : ADD_SUCCESS:
; 110  : 	m_nUse++;

  00169	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0016e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00171	ff c0		 inc	 eax
  00173	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00178	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 111  : 	m_pArray[nIdx] = Obj;

  0017b	48 63 44 24 40	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00180	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00185	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00188	48 8b 54 24 68	 mov	 rdx, QWORD PTR Obj$[rsp]
  0018d	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 112  : 	m_nLast++;

  00191	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00196	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00199	ff c0		 inc	 eax
  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001a0	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 113  : 	//_stprintf(g_szMessage, _T("CMemList::add i[%d] m_nLast[%d] m_nCurCount[%d]"), nIdx, m_nLast, m_nUse);
; 114  : 	if (pIdx) *pIdx = nIdx;

  001a3	48 83 7c 24 70
	00		 cmp	 QWORD PTR pIdx$[rsp], 0
  001a9	74 0b		 je	 SHORT $LN13@add
  001ab	48 8b 44 24 70	 mov	 rax, QWORD PTR pIdx$[rsp]
  001b0	8b 4c 24 40	 mov	 ecx, DWORD PTR nIdx$[rsp]
  001b4	89 08		 mov	 DWORD PTR [rax], ecx
$LN13@add:

; 115  : 	return true;

  001b6	b0 01		 mov	 al, 1
$LN1@add:

; 116  : }

  001b8	48 83 c4 50	 add	 rsp, 80			; 00000050H
  001bc	5f		 pop	 rdi
  001bd	c3		 ret	 0
?add@CSList@@QEAA_NPEAXPEAH@Z ENDP			; CSList::add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
idx$4 = 36
p$5 = 56
$T6 = 72
$T7 = 80
tv75 = 88
tv79 = 96
tv90 = 104
__$ArrayPad$ = 112
this$ = 144
?clear@CSList@@QEAAXXZ PROC				; CSList::clear

; 41   : {

$LN18:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002b	48 33 c4	 xor	 rax, rsp
  0002e	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 42   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  00033	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0003b	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  0003e	e8 00 00 00 00	 call	 ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ; ISABLETODELETE
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	0f 84 29 01 00
	00		 je	 $LN6@clear

; 43   : 		int idx = 0;

  0004e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR idx$4[rsp], 0

; 44   : 		void *p = getNext(&idx);

  00056	48 8d 54 24 24	 lea	 rdx, QWORD PTR idx$4[rsp]
  0005b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?getNext@CSList@@QEAAPEAXPEAH@Z ; CSList::getNext
  00068	48 89 44 24 38	 mov	 QWORD PTR p$5[rsp], rax
$LN2@clear:

; 45   : 		while (p) {

  0006d	48 83 7c 24 38
	00		 cmp	 QWORD PTR p$5[rsp], 0
  00073	0f 84 fe 00 00
	00		 je	 $LN3@clear

; 46   : 			idx++;

  00079	8b 44 24 24	 mov	 eax, DWORD PTR idx$4[rsp]
  0007d	ff c0		 inc	 eax
  0007f	89 44 24 24	 mov	 DWORD PTR idx$4[rsp], eax

; 47   : 			switch (m_nObjAllocType) {

  00083	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008b	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0008e	89 44 24 58	 mov	 DWORD PTR tv75[rsp], eax
  00092	83 7c 24 58 02	 cmp	 DWORD PTR tv75[rsp], 2
  00097	74 1a		 je	 SHORT $LN7@clear
  00099	83 7c 24 58 03	 cmp	 DWORD PTR tv75[rsp], 3
  0009e	74 51		 je	 SHORT $LN8@clear
  000a0	83 7c 24 58 04	 cmp	 DWORD PTR tv75[rsp], 4
  000a5	74 57		 je	 SHORT $LN9@clear
  000a7	83 7c 24 58 05	 cmp	 DWORD PTR tv75[rsp], 5
  000ac	74 73		 je	 SHORT $LN10@clear
  000ae	e9 a8 00 00 00	 jmp	 $LN4@clear
$LN7@clear:

; 48   : 			case eAlloc_Type_new:	delete p; break;

  000b3	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  000b8	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000bd	33 d2		 xor	 edx, edx
  000bf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T6[rsp]
  000c4	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  000c9	48 83 7c 24 48
	00		 cmp	 QWORD PTR $T6[rsp], 0
  000cf	75 0b		 jne	 SHORT $LN14@clear
  000d1	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  000da	eb 13		 jmp	 SHORT $LN15@clear
$LN14@clear:
  000dc	48 c7 44 24 38
	23 81 00 00	 mov	 QWORD PTR p$5[rsp], 33059 ; 00008123H
  000e5	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  000ea	48 89 44 24 60	 mov	 QWORD PTR tv79[rsp], rax
$LN15@clear:
  000ef	eb 6a		 jmp	 SHORT $LN4@clear
$LN8@clear:

; 49   : 			case eAlloc_Type_alloc:	free(p); break;

  000f1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$5[rsp]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  000fc	eb 5d		 jmp	 SHORT $LN4@clear
$LN9@clear:

; 50   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$5[rsp]
  00103	e8 00 00 00 00	 call	 strlen
  00108	48 ff c0	 inc	 rax
  0010b	44 8b c0	 mov	 r8d, eax
  0010e	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$5[rsp]
  00113	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0011a	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBuf
  0011f	eb 3a		 jmp	 SHORT $LN4@clear
$LN10@clear:

; 51   : 			case eAlloc_Type_newArray:	delete[] p; break;

  00121	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  00126	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  0012b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T7[rsp]
  00130	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00135	48 83 7c 24 50
	00		 cmp	 QWORD PTR $T7[rsp], 0
  0013b	75 0b		 jne	 SHORT $LN16@clear
  0013d	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv90[rsp], 0
  00146	eb 13		 jmp	 SHORT $LN17@clear
$LN16@clear:
  00148	48 c7 44 24 38
	23 81 00 00	 mov	 QWORD PTR p$5[rsp], 33059 ; 00008123H
  00151	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  00156	48 89 44 24 68	 mov	 QWORD PTR tv90[rsp], rax
$LN17@clear:
$LN4@clear:

; 52   : 			case eAlloc_Type_none: break;
; 53   : 			case eAlloc_Type_MemPool: break;
; 54   : 			}
; 55   : 			p = getNext(&idx);

  0015b	48 8d 54 24 24	 lea	 rdx, QWORD PTR idx$4[rsp]
  00160	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00168	e8 00 00 00 00	 call	 ?getNext@CSList@@QEAAPEAXPEAH@Z ; CSList::getNext
  0016d	48 89 44 24 38	 mov	 QWORD PTR p$5[rsp], rax

; 56   : 		}

  00172	e9 f6 fe ff ff	 jmp	 $LN2@clear
$LN3@clear:
$LN6@clear:

; 57   : 	}
; 58   : 	memset(m_pArray, 0, sizeof(void *) * m_nMax);

  00177	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0017f	48 63 40 14	 movsxd	 rax, DWORD PTR [rax+20]
  00183	48 c1 e0 03	 shl	 rax, 3
  00187	4c 8b c0	 mov	 r8, rax
  0018a	33 d2		 xor	 edx, edx
  0018c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00194	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00197	e8 00 00 00 00	 call	 memset

; 59   : 	m_nUse = 0;

  0019c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001a4	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 60   : 	m_nLast = 0;

  001ab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001b3	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 61   : 	m_nDelIdx = 0;

  001ba	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001c2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 62   : }

  001c9	48 8b cc	 mov	 rcx, rsp
  001cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?clear@CSList@@QEAAXXZ$rtcFrameData
  001d3	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001d8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001dd	48 33 cc	 xor	 rcx, rsp
  001e0	e8 00 00 00 00	 call	 __security_check_cookie
  001e5	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  001ec	5f		 pop	 rdi
  001ed	c3		 ret	 0
?clear@CSList@@QEAAXXZ ENDP				; CSList::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
idx$4 = 36
p$5 = 56
$T6 = 72
$T7 = 80
$T8 = 88
tv77 = 96
tv81 = 104
tv92 = 112
__$ArrayPad$ = 120
this$ = 144
??1CSList@@QEAA@XZ PROC					; CSList::~CSList

; 16   : {

$LN19:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR [rsp+144]
  00024	48 c7 44 24 58
	fe ff ff ff	 mov	 QWORD PTR $T8[rsp], -2
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 17   : 	if (!m_pArray) return;

  0003c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00048	75 05		 jne	 SHORT $LN6@CSList
  0004a	e9 6d 01 00 00	 jmp	 $LN1@CSList
$LN6@CSList:

; 18   : 
; 19   : 	if (ISABLETODELETE(m_nObjAllocType)) {

  0004f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00057	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  0005a	e8 00 00 00 00	 call	 ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ; ISABLETODELETE
  0005f	90		 npad	 1
  00060	0f b6 c0	 movzx	 eax, al
  00063	85 c0		 test	 eax, eax
  00065	0f 84 30 01 00
	00		 je	 $LN7@CSList

; 20   : 		int idx = 0;

  0006b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR idx$4[rsp], 0

; 21   : 		void *p = getNext(&idx);

  00073	48 8d 54 24 24	 lea	 rdx, QWORD PTR idx$4[rsp]
  00078	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?getNext@CSList@@QEAAPEAXPEAH@Z ; CSList::getNext
  00085	90		 npad	 1
  00086	48 89 44 24 38	 mov	 QWORD PTR p$5[rsp], rax
$LN2@CSList:

; 22   : 		while (p) {

  0008b	48 83 7c 24 38
	00		 cmp	 QWORD PTR p$5[rsp], 0
  00091	0f 84 04 01 00
	00		 je	 $LN7@CSList

; 23   : 			idx++;

  00097	8b 44 24 24	 mov	 eax, DWORD PTR idx$4[rsp]
  0009b	ff c0		 inc	 eax
  0009d	89 44 24 24	 mov	 DWORD PTR idx$4[rsp], eax

; 24   : 			switch (m_nObjAllocType) {

  000a1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a9	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000ac	89 44 24 60	 mov	 DWORD PTR tv77[rsp], eax
  000b0	83 7c 24 60 02	 cmp	 DWORD PTR tv77[rsp], 2
  000b5	74 1a		 je	 SHORT $LN8@CSList
  000b7	83 7c 24 60 03	 cmp	 DWORD PTR tv77[rsp], 3
  000bc	74 52		 je	 SHORT $LN9@CSList
  000be	83 7c 24 60 04	 cmp	 DWORD PTR tv77[rsp], 4
  000c3	74 59		 je	 SHORT $LN10@CSList
  000c5	83 7c 24 60 05	 cmp	 DWORD PTR tv77[rsp], 5
  000ca	74 77		 je	 SHORT $LN11@CSList
  000cc	e9 ad 00 00 00	 jmp	 $LN4@CSList
$LN8@CSList:

; 25   : 			case eAlloc_Type_new:	delete p; break;

  000d1	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  000d6	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000db	33 d2		 xor	 edx, edx
  000dd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T6[rsp]
  000e2	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  000e7	90		 npad	 1
  000e8	48 83 7c 24 48
	00		 cmp	 QWORD PTR $T6[rsp], 0
  000ee	75 0b		 jne	 SHORT $LN15@CSList
  000f0	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv81[rsp], 0
  000f9	eb 13		 jmp	 SHORT $LN16@CSList
$LN15@CSList:
  000fb	48 c7 44 24 38
	23 81 00 00	 mov	 QWORD PTR p$5[rsp], 33059 ; 00008123H
  00104	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  00109	48 89 44 24 68	 mov	 QWORD PTR tv81[rsp], rax
$LN16@CSList:
  0010e	eb 6e		 jmp	 SHORT $LN4@CSList
$LN9@CSList:

; 26   : 			case eAlloc_Type_alloc:	free(p); break;

  00110	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$5[rsp]
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0011b	90		 npad	 1
  0011c	eb 60		 jmp	 SHORT $LN4@CSList
$LN10@CSList:

; 27   : 			case eAlloc_Type_BufPool:	gs_pMMgr->delBuf((char *)p, STRING_SIZE((TCHAR *)p)); break;

  0011e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$5[rsp]
  00123	e8 00 00 00 00	 call	 strlen
  00128	90		 npad	 1
  00129	48 ff c0	 inc	 rax
  0012c	44 8b c0	 mov	 r8d, eax
  0012f	48 8b 54 24 38	 mov	 rdx, QWORD PTR p$5[rsp]
  00134	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0013b	e8 00 00 00 00	 call	 ?delBuf@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBuf
  00140	90		 npad	 1
  00141	eb 3b		 jmp	 SHORT $LN4@CSList
$LN11@CSList:

; 28   : 			case eAlloc_Type_newArray:	delete[] p; break;

  00143	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  00148	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  0014d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T7[rsp]
  00152	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  00157	90		 npad	 1
  00158	48 83 7c 24 50
	00		 cmp	 QWORD PTR $T7[rsp], 0
  0015e	75 0b		 jne	 SHORT $LN17@CSList
  00160	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv92[rsp], 0
  00169	eb 13		 jmp	 SHORT $LN4@CSList
$LN17@CSList:
  0016b	48 c7 44 24 38
	23 81 00 00	 mov	 QWORD PTR p$5[rsp], 33059 ; 00008123H
  00174	48 8b 44 24 38	 mov	 rax, QWORD PTR p$5[rsp]
  00179	48 89 44 24 70	 mov	 QWORD PTR tv92[rsp], rax
$LN4@CSList:

; 29   : 			case eAlloc_Type_none: break;
; 30   : 			case eAlloc_Type_MemPool: break;
; 31   : 			}
; 32   : 			p = getNext(&idx);

  0017e	48 8d 54 24 24	 lea	 rdx, QWORD PTR idx$4[rsp]
  00183	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0018b	e8 00 00 00 00	 call	 ?getNext@CSList@@QEAAPEAXPEAH@Z ; CSList::getNext
  00190	90		 npad	 1
  00191	48 89 44 24 38	 mov	 QWORD PTR p$5[rsp], rax

; 33   : 		}

  00196	e9 f0 fe ff ff	 jmp	 $LN2@CSList
$LN7@CSList:

; 34   : 	}
; 35   : 
; 36   : 	free(m_pArray);

  0019b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001a3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  001ac	90		 npad	 1

; 37   : 	m_pArray = 0;

  001ad	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001b5	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN1@CSList:

; 38   : }

  001bc	48 8b cc	 mov	 rcx, rsp
  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1CSList@@QEAA@XZ$rtcFrameData
  001c6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001cb	90		 npad	 1
  001cc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d1	48 33 cc	 xor	 rcx, rsp
  001d4	e8 00 00 00 00	 call	 __security_check_cookie
  001d9	90		 npad	 1
  001da	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  001e1	5f		 pop	 rdi
  001e2	c3		 ret	 0
??1CSList@@QEAA@XZ ENDP					; CSList::~CSList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comlist.cpp
_TEXT	SEGMENT
this$ = 16
??0CSList@@QEAA@XZ PROC					; CSList::CSList

; 6    : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 7    : 	m_pArray = NULL;

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 8    : 	m_nUse = 0;

  00012	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00017	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 9    : 	m_nLast = 0;

  0001e	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 10   : 	m_nDelIdx = 0;

  0002a	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002f	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 11   : 	m_nMax = 0;

  00036	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0003b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 12   : 	m_nObjAllocType = eAlloc_Type_none;

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 13   : }

  0004e	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
??0CSList@@QEAA@XZ ENDP					; CSList::CSList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?delBuf@CMemManager@@QEAAXPEADH@Z
_TEXT	SEGMENT
nIdx$ = 32
this$ = 64
pBuf$ = 72
nSize$ = 80
?delBuf@CMemManager@@QEAAXPEADH@Z PROC			; CMemManager::delBuf, COMDAT

; 38   : 	inline void delBuf(char *pBuf, int nSize) { int nIdx = getIndex(nSize); delBufByIndex(pBuf, nIdx); }

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]
  00028	8b 4c 24 50	 mov	 ecx, DWORD PTR nSize$[rsp]
  0002c	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00031	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax
  00035	44 8b 44 24 20	 mov	 r8d, DWORD PTR nIdx$[rsp]
  0003a	48 8b 54 24 48	 mov	 rdx, QWORD PTR pBuf$[rsp]
  0003f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00044	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex
  00049	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004d	5f		 pop	 rdi
  0004e	c3		 ret	 0
?delBuf@CMemManager@@QEAAXPEADH@Z ENDP			; CMemManager::delBuf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
m$ = 32
$S1$ = 56
tv80 = 68
tv73 = 72
s$ = 96
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 14 00 00 00	 mov	 ecx, 20
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 60	 mov	 ecx, DWORD PTR [rsp+96]
  0001c	f2 0f 2a 44 24
	60		 cvtsi2sd xmm0, DWORD PTR s$[rsp]
  00022	f2 0f 11 44 24
	38		 movsd	 QWORD PTR $S1$[rsp], xmm0
  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	48 6b c0 01	 imul	 rax, rax, 1
  00031	8b 44 04 38	 mov	 eax, DWORD PTR $S1$[rsp+rax]
  00035	c1 f8 14	 sar	 eax, 20
  00038	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  0003d	89 44 24 20	 mov	 DWORD PTR m$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR m$[rsp]
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	89 4c 24 44	 mov	 DWORD PTR tv80[rsp], ecx
  0004e	0f b6 c8	 movzx	 ecx, al
  00051	8b 44 24 44	 mov	 eax, DWORD PTR tv80[rsp]
  00055	d3 e0		 shl	 eax, cl
  00057	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  0005b	2b c8		 sub	 ecx, eax
  0005d	8b c1		 mov	 eax, ecx
  0005f	8b 4c 24 60	 mov	 ecx, DWORD PTR s$[rsp]
  00063	23 c8		 and	 ecx, eax
  00065	8b c1		 mov	 eax, ecx
  00067	85 c0		 test	 eax, eax
  00069	74 0a		 je	 SHORT $LN3@getIndex
  0006b	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
  00073	eb 08		 jmp	 SHORT $LN4@getIndex
$LN3@getIndex:
  00075	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
$LN4@getIndex:
  0007d	8b 44 24 48	 mov	 eax, DWORD PTR tv73[rsp]
  00081	8b 4c 24 20	 mov	 ecx, DWORD PTR m$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	8b f8		 mov	 edi, eax
  0008b	48 8b cc	 mov	 rcx, rsp
  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getIndex@@YAHH@Z$rtcFrameData
  00095	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0009a	8b c7		 mov	 eax, edi
  0009c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
i$ = 16
max$ = 24
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	57		 push	 rdi
  00009	83 7c 24 10 00	 cmp	 DWORD PTR i$[rsp], 0
  0000e	7c 0e		 jl	 SHORT $LN2@ISINCLUDE
  00010	8b 44 24 18	 mov	 eax, DWORD PTR max$[rsp]
  00014	39 44 24 10	 cmp	 DWORD PTR i$[rsp], eax
  00018	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  0001a	b0 01		 mov	 al, 1
  0001c	eb 02		 jmp	 SHORT $LN1@ISINCLUDE
$LN2@ISINCLUDE:
  0001e	32 c0		 xor	 al, al
$LN1@ISINCLUDE:
  00020	5f		 pop	 rdi
  00021	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z
_TEXT	SEGMENT
e$ = 16
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z PROC		; ISABLETODELETE, COMDAT

; 247  : inline bool ISABLETODELETE(E_ALLOC_TYPE e) { if (eAlloc_Type_MemPool < e) return true; return false; }

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	83 7c 24 10 01	 cmp	 DWORD PTR e$[rsp], 1
  0000a	7e 04		 jle	 SHORT $LN2@ISABLETODE
  0000c	b0 01		 mov	 al, 1
  0000e	eb 02		 jmp	 SHORT $LN1@ISABLETODE
$LN2@ISABLETODE:
  00010	32 c0		 xor	 al, al
$LN1@ISABLETODE:
  00012	5f		 pop	 rdi
  00013	c3		 ret	 0
?ISABLETODELETE@@YA_NW4E_ALLOC_TYPE@@@Z ENDP		; ISABLETODELETE
_TEXT	ENDS
END
