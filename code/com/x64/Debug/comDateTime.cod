; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG81213 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81214 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81221 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81222 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81233 DB	'ERROR _localtime_s', 0aH, 00H
$SG81337 DB	'%d', 00H
	ORG $+1
$SG81234 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81235 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81243 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81244 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81245 DB	'gm time and date : %s', 0aH, 00H
	ORG $+1
$SG81294 DB	'+00:00', 00H
	ORG $+1
$SG81296 DB	'+09:00', 00H
	ORG $+1
$SG81310 DB	'ERROR _localtime_s', 0aH, 00H
$SG81366 DB	'%d', 00H
	ORG $+1
$SG81359 DB	'%04d%c%02d%c%02d', 00H
	ORG $+3
$SG81367 DB	'%s', 00H
	ORG $+1
$SG81360 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81370 DB	'%s%c%02d%c%02d', 00H
	ORG $+1
$SG81371 DB	'%0s%02d%02d', 00H
	ORG $+4
$SG81378 DB	'%02d:%02d:%02d', 00H
	ORG $+1
$SG81379 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81389 DB	'CDateTime::addDateString', 00H
	ORG $+7
$SG81390 DB	'%s %d ERROR _localtime_s', 0aH, 00H
	ORG $+6
$SG81393 DB	'%04d%c%02d%c%02d', 00H
	ORG $+7
$SG81394 DB	'%04d%02d%02d', 00H
CONST	ENDS
_DATA	SEGMENT
?g_nTimeSize@@3HA DD 08H				; g_nTimeSize
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	?m_Sleep@Misc@@SAXH@Z				; Misc::m_Sleep
PUBLIC	?u_Sleep@Misc@@SAXH@Z				; Misc::u_Sleep
PUBLIC	?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z	; Misc::timespec_diff
PUBLIC	?getmillisec@Misc@@SAXPEAUtimespec@@@Z		; Misc::getmillisec
PUBLIC	?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z	; Misc::getFileTime
PUBLIC	??0CFileTime@@QEAA@XZ				; CFileTime::CFileTime
PUBLIC	??1CFileTime@@QEAA@XZ				; CFileTime::~CFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEAD@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEA_J@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z	; CFileTime::setFileTime
PUBLIC	?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z ; CFileTime::isCompare
PUBLIC	?getDate@CFileTime@@QEAAHXZ			; CFileTime::getDate
PUBLIC	?getTime@CFileTime@@QEAAHXZ			; CFileTime::getTime
PUBLIC	??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z	; CDateTime::CDateTime
PUBLIC	??1CDateTime@@QEAA@XZ				; CDateTime::~CDateTime
PUBLIC	?SetTimeValue@CDateTime@@QEAAXPEA_J@Z		; CDateTime::SetTimeValue
PUBLIC	?SetSecondsValue@CDateTime@@QEAAXH@Z		; CDateTime::SetSecondsValue
PUBLIC	?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
PUBLIC	?DateString@CDateTime@@QEAAPEBDD@Z		; CDateTime::DateString
PUBLIC	?DateString2@CDateTime@@QEAAPEBDD@Z		; CDateTime::DateString2
PUBLIC	?TimeString@CDateTime@@QEAAPEBD_N@Z		; CDateTime::TimeString
PUBLIC	?addDateString@CDateTime@@QEAAPEBDHD@Z		; CDateTime::addDateString
PUBLIC	?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z	; CDateTime::setString
PUBLIC	?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z	; CDateTime::uptoSeconds
PUBLIC	?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z	; CDateTime::uptoMilliSeconds
PUBLIC	?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
PUBLIC	?initTimeZone@@YAXXZ				; initTimeZone
PUBLIC	?getTimeInterval@@YAXPEAUSTTime@@00H@Z		; getTimeInterval
PUBLIC	?getCurrentTime@@YAXPEAUSTTime@@@Z		; getCurrentTime
PUBLIC	?setLocalFileTime@@YA_NPEA_JPEAH1@Z		; setLocalFileTime
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	memcpy:PROC
EXTRN	strcpy:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_asctime:PROC
EXTRN	__imp__gmtime64:PROC
EXTRN	__imp__localtime64_s:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetFileTime:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_GetSystemTimeAsFileTime:PROC
EXTRN	__imp_GetLocalTime:PROC
EXTRN	__imp_GetTimeZoneInformation:PROC
EXTRN	__imp_FileTimeToSystemTime:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_stTZ@@3USTTimeZone@@A DB 010H DUP (?)		; g_stTZ
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+4
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+140
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$gmtime DD imagerel gmtime
	DD	imagerel gmtime+47
	DD	imagerel $unwind$gmtime
$pdata$time DD	imagerel time
	DD	imagerel time+47
	DD	imagerel $unwind$time
$pdata$localtime_s DD imagerel localtime_s
	DD	imagerel localtime_s+57
	DD	imagerel $unwind$localtime_s
$pdata$?m_Sleep@Misc@@SAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?m_Sleep@Misc@@SAXH@Z
$pdata$?u_Sleep@Misc@@SAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?u_Sleep@Misc@@SAXH@Z
$pdata$?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z
$pdata$?getmillisec@Misc@@SAXPEAUtimespec@@@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?getmillisec@Misc@@SAXPEAUtimespec@@@Z
$pdata$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z DD imagerel $LN5
	DD	imagerel $LN5+243
	DD	imagerel $unwind$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z
$pdata$??0CFileTime@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0CFileTime@@QEAA@XZ
$pdata$??1CFileTime@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1CFileTime@@QEAA@XZ
$pdata$?setFileTime@CFileTime@@QEAAHPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+436
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEAD@Z
$pdata$?setFileTime@CFileTime@@QEAAHPEA_J@Z DD imagerel $LN3
	DD	imagerel $LN3+321
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEA_J@Z
$pdata$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z DD imagerel $LN3
	DD	imagerel $LN3+254
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z
$pdata$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z DD imagerel $LN26
	DD	imagerel $LN26+552
	DD	imagerel $unwind$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getDate@CFileTime@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?getDate@CFileTime@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getTime@CFileTime@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?getTime@CFileTime@@QEAAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z
$pdata$??1CDateTime@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+8
	DD	imagerel $unwind$??1CDateTime@@QEAA@XZ
$pdata$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z
$pdata$?SetSecondsValue@CDateTime@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$?SetSecondsValue@CDateTime@@QEAAXH@Z
$pdata$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z DD imagerel $LN12
	DD	imagerel $LN12+251
	DD	imagerel $unwind$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z
$pdata$?DateString@CDateTime@@QEAAPEBDD@Z DD imagerel $LN5
	DD	imagerel $LN5+200
	DD	imagerel $unwind$?DateString@CDateTime@@QEAAPEBDD@Z
$pdata$?DateString2@CDateTime@@QEAAPEBDD@Z DD imagerel $LN5
	DD	imagerel $LN5+328
	DD	imagerel $unwind$?DateString2@CDateTime@@QEAAPEBDD@Z
$pdata$?TimeString@CDateTime@@QEAAPEBD_N@Z DD imagerel $LN5
	DD	imagerel $LN5+166
	DD	imagerel $unwind$?TimeString@CDateTime@@QEAAPEBD_N@Z
$pdata$?addDateString@CDateTime@@QEAAPEBDHD@Z DD imagerel $LN6
	DD	imagerel $LN6+397
	DD	imagerel $unwind$?addDateString@CDateTime@@QEAAPEBDHD@Z
$pdata$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z DD imagerel $LN11
	DD	imagerel $LN11+777
	DD	imagerel $unwind$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z
$pdata$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z DD imagerel $LN6
	DD	imagerel $LN6+206
	DD	imagerel $unwind$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z
$pdata$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z
$pdata$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z
$pdata$?initTimeZone@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?initTimeZone@@YAXXZ
$pdata$?getTimeInterval@@YAXPEAUSTTime@@00H@Z DD imagerel $LN12
	DD	imagerel $LN12+398
	DD	imagerel $unwind$?getTimeInterval@@YAXPEAUSTTime@@00H@Z
$pdata$?getCurrentTime@@YAXPEAUSTTime@@@Z DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$?getCurrentTime@@YAXPEAUSTTime@@@Z
$pdata$?setLocalFileTime@@YA_NPEA_JPEAH1@Z DD imagerel $LN4
	DD	imagerel $LN4+311
	DD	imagerel $unwind$?setLocalFileTime@@YA_NPEA_JPEAH1@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getTime@CFileTime@@QEAAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getDate@CFileTime@@QEAAHXZ DD 010601H
	DD	07006H
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcName$0 DB 073H ; Misc::getmillisec
	DB	079H
	DB	073H
	DB	054H
	DB	06dH
	DB	00H
	ORG $+2
?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcVarDesc DD 028H ; Misc::getmillisec
	DD	010H
	DQ	FLAT:?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcName$0
	ORG $+48
?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcFrameData DD 01H ; Misc::getmillisec
	DD	00H
	DQ	FLAT:?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcVarDesc
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcName$0 DB 066H ; Misc::getFileTime
	DB	074H
	DB	00H
	ORG $+1
?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcName$1 DB 074H ; CDateTime::addDateString
	DB	00H
	ORG $+2
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcName$1 DB 06dH ; Misc::getFileTime
	DB	079H
	DB	046H
	DB	069H
	DB	06cH
	DB	065H
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+5
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcFrameData DD 02H ; Misc::getFileTime
	DD	00H
	DQ	FLAT:?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcVarDesc
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$0 DB 06dH	; CFileTime::setFileTime
	DB	05fH
	DB	074H
	DB	06dH
	DB	00H
	ORG $+3
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcVarDesc DD 048H ; Misc::getFileTime
	DD	08H
	DQ	FLAT:?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcName$0
	ORG $+96
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$1 DB 073H	; CFileTime::setFileTime
	DB	07aH
	DB	044H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$2 DB 066H	; CFileTime::setFileTime
	DB	074H
	DB	057H
	DB	072H
	DB	069H
	DB	074H
	DB	065H
	DB	00H
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$3 DB 073H	; CFileTime::setFileTime
	DB	079H
	DB	073H
	DB	054H
	DB	06dH
	DB	00H
	ORG $+2
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcFrameData DD 04H	; CFileTime::setFileTime
	DD	00H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcVarDesc
?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcName$0 DB 073H	; CFileTime::setFileTime
	DB	04dH
	DB	074H
	DB	06dH
	DB	00H
	ORG $+3
?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcVarDesc DD 0d8H	; CFileTime::setFileTime
	DD	010H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$3
	DD	0b8H
	DD	08H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$1
	DD	048H
	DD	024H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcName$0
	ORG $+192
?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcName$1 DB 073H	; CFileTime::setFileTime
	DB	07aH
	DB	044H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcFrameData DD 02H ; CFileTime::setFileTime
	DD	00H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcVarDesc
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcName$0 DB 073H ; CFileTime::setFileTime
	DB	07aH
	DB	044H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcVarDesc DD 088H	; CFileTime::setFileTime
	DD	010H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcName$1
	DD	048H
	DD	024H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcName$0
	ORG $+96
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcName$1 DB 073H ; CFileTime::setFileTime
	DB	079H
	DB	073H
	DB	054H
	DB	06dH
	DB	00H
	ORG $+2
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcFrameData DD 02H ; CFileTime::setFileTime
	DD	00H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcVarDesc
?DateString2@CDateTime@@QEAAPEBDD@Z$rtcName$0 DB 070H	; CDateTime::DateString2
	DB	079H
	DB	065H
	DB	061H
	DB	072H
	DB	00H
	ORG $+2
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcVarDesc DD 068H ; CFileTime::setFileTime
	DD	010H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcName$0
	ORG $+96
?DateString2@CDateTime@@QEAAPEBDD@Z$rtcVarDesc DD 044H	; CDateTime::DateString2
	DD	06H
	DQ	FLAT:?DateString2@CDateTime@@QEAAPEBDD@Z$rtcName$0
	ORG $+48
?DateString2@CDateTime@@QEAAPEBDD@Z$rtcFrameData DD 01H	; CDateTime::DateString2
	DD	00H
	DQ	FLAT:?DateString2@CDateTime@@QEAAPEBDD@Z$rtcVarDesc
?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcName$0 DB 074H ; CDateTime::addDateString
	DB	069H
	DB	06dH
	DB	065H
	DB	072H
	DB	00H
	ORG $+2
?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcFrameData DD 02H ; CDateTime::addDateString
	DD	00H
	DQ	FLAT:?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcVarDesc
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcName$0 DB 070H ; CDateTime::setString
	DB	079H
	DB	065H
	DB	061H
	DB	072H
	DB	00H
	ORG $+2
?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcVarDesc DD 068H ; CDateTime::addDateString
	DD	024H
	DQ	FLAT:?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcName$0
	ORG $+96
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcVarDesc DD 064H ; CDateTime::setString
	DD	06H
	DQ	FLAT:?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcName$0
	ORG $+48
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcFrameData DD 01H ; CDateTime::setString
	DD	00H
	DQ	FLAT:?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcVarDesc
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcName$0 DB 073H ; CDateTime::uptoMilliSeconds
	DB	079H
	DB	073H
	DB	054H
	DB	06dH
	DB	00H
	ORG $+2
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcFrameData DD 01H ; CDateTime::uptoMilliSeconds
	DD	00H
	DQ	FLAT:?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcVarDesc
?initTimeZone@@YAXXZ$rtcName$0 DB 074H			; initTimeZone
	DB	07aH
	DB	069H
	DB	00H
	ORG $+4
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcVarDesc DD 038H ; CDateTime::uptoMilliSeconds
	DD	010H
	DQ	FLAT:?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcName$0
	ORG $+48
?initTimeZone@@YAXXZ$rtcVarDesc DD 030H			; initTimeZone
	DD	0acH
	DQ	FLAT:?initTimeZone@@YAXXZ$rtcName$0
	ORG $+48
?initTimeZone@@YAXXZ$rtcFrameData DD 01H		; initTimeZone
	DD	00H
	DQ	FLAT:?initTimeZone@@YAXXZ$rtcVarDesc
?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcName$0 DB 073H	; getCurrentTime
	DB	079H
	DB	073H
	DB	054H
	DB	06dH
	DB	00H
	ORG $+2
?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcFrameData DD 01H	; getCurrentTime
	DD	00H
	DQ	FLAT:?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcVarDesc
?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcName$0 DB 074H	; setLocalFileTime
	DB	06dH
	DB	054H
	DB	069H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+1
?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcVarDesc DD 028H	; getCurrentTime
	DD	010H
	DQ	FLAT:?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcName$0
	ORG $+48
?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcName$1 DB 073H	; setLocalFileTime
	DB	07aH
	DB	044H
	DB	061H
	DB	074H
	DB	065H
	DB	00H
	ORG $+1
?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcFrameData DD 02H	; setLocalFileTime
	DD	00H
	DQ	FLAT:?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcVarDesc
	ORG $+8
?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcVarDesc DD 078H	; setLocalFileTime
	DD	010H
	DQ	FLAT:?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcName$1
	DD	038H
	DD	024H
	DQ	FLAT:?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcName$0
CONST	ENDS
xdata	SEGMENT
$unwind$gmtime DD 021e01H
	DD	07006320aH
$unwind$time DD	021e01H
	DD	07006320aH
$unwind$localtime_s DD 022301H
	DD	0700b320fH
$unwind$?m_Sleep@Misc@@SAXH@Z DD 021c01H
	DD	070053209H
$unwind$?u_Sleep@Misc@@SAXH@Z DD 021c01H
	DD	070053209H
$unwind$?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z DD 011501H
	DD	07015H
$unwind$?getmillisec@Misc@@SAXPEAUtimespec@@@Z DD 022d19H
	DD	07006b20aH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z DD 023419H
	DD	0700ad20eH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$??0CFileTime@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$??1CFileTime@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$?setFileTime@CFileTime@@QEAAHPEAD@Z DD 033b19H
	DD	0220112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?setFileTime@CFileTime@@QEAAHPEA_J@Z DD 033b19H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z DD 033b19H
	DD	0140112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z DD 022801H
	DD	070105214H
$unwind$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z DD 022701H
	DD	0700f3213H
$unwind$??1CDateTime@@QEAA@XZ DD 010601H
	DD	07006H
$unwind$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z DD 022301H
	DD	0700b320fH
$unwind$?SetSecondsValue@CDateTime@@QEAAXH@Z DD 010a01H
	DD	0700aH
$unwind$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z DD 022701H
	DD	0700f7213H
$unwind$?DateString@CDateTime@@QEAAPEBDD@Z DD 022201H
	DD	0700a920eH
$unwind$?DateString2@CDateTime@@QEAAPEBDD@Z DD 023419H
	DD	0700ad20eH
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?TimeString@CDateTime@@QEAAPEBD_N@Z DD 022201H
	DD	0700a520eH
$unwind$?addDateString@CDateTime@@QEAAPEBDHD@Z DD 033f19H
	DD	0180116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z DD 034519H
	DD	012011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z DD 022701H
	DD	0700f5213H
$unwind$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z DD 023419H
	DD	0700ad20eH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z DD 022701H
	DD	0700f5213H
$unwind$?initTimeZone@@YAXXZ DD 032a19H
	DD	0200109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$?getTimeInterval@@YAXPEAUSTTime@@00H@Z DD 022d01H
	DD	070151219H
$unwind$?getCurrentTime@@YAXPEAUSTTime@@@Z DD 022d19H
	DD	07006b20aH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?setLocalFileTime@@YA_NPEA_JPEAH1@Z DD 034019H
	DD	0160117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 023c19H
	DD	07015b219H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sprintf$rtcName$0
	ORG $+48
sprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 023c19H
	DD	07015b219H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tmTime$ = 56
ltm$ = 104
szDate$ = 120
err$ = 148
__$ArrayPad$ = 160
fileTime$ = 192
pDate$ = 200
pTime$ = 208
?setLocalFileTime@@YA_NPEA_JPEAH1@Z PROC		; setLocalFileTime

; 97   : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00017	48 8b fc	 mov	 rdi, rsp
  0001a	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0001f	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00024	f3 ab		 rep stosd
  00026	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+192]
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 98   : 	struct	tm	tmTime, *ltm = &tmTime;

  00040	48 8d 44 24 38	 lea	 rax, QWORD PTR tmTime$[rsp]
  00045	48 89 44 24 68	 mov	 QWORD PTR ltm$[rsp], rax

; 99   : 	TCHAR szDate[16];
; 100  : #ifndef WIN32
; 101  : 	ltm = localtime(&fileTime);
; 102  : #else
; 103  : 	errno_t err = localtime_s(ltm, fileTime);

  0004a	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR fileTime$[rsp]
  00052	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ltm$[rsp]
  00057	e8 00 00 00 00	 call	 localtime_s
  0005c	89 84 24 94 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 104  : 	if (err) { _tprintf(_T("ERROR _localtime_s\n")); return false; }

  00063	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0006b	74 13		 je	 SHORT $LN2@setLocalFi
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81233
  00074	e8 00 00 00 00	 call	 printf
  00079	32 c0		 xor	 al, al
  0007b	e9 89 00 00 00	 jmp	 $LN1@setLocalFi
$LN2@setLocalFi:

; 105  : #endif
; 106  : 	tmTime.tm_year += 1900;

  00080	8b 44 24 4c	 mov	 eax, DWORD PTR tmTime$[rsp+20]
  00084	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00089	89 44 24 4c	 mov	 DWORD PTR tmTime$[rsp+20], eax

; 107  : 	tmTime.tm_mon += 1;

  0008d	8b 44 24 48	 mov	 eax, DWORD PTR tmTime$[rsp+16]
  00091	ff c0		 inc	 eax
  00093	89 44 24 48	 mov	 DWORD PTR tmTime$[rsp+16], eax

; 108  : 
; 109  : 	_stprintf(szDate, "%04d%02d%02d", tmTime.tm_year, tmTime.tm_mon, tmTime.tm_mday);

  00097	8b 44 24 44	 mov	 eax, DWORD PTR tmTime$[rsp+12]
  0009b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009f	44 8b 4c 24 48	 mov	 r9d, DWORD PTR tmTime$[rsp+16]
  000a4	44 8b 44 24 4c	 mov	 r8d, DWORD PTR tmTime$[rsp+20]
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81234
  000b0	48 8d 4c 24 78	 lea	 rcx, QWORD PTR szDate$[rsp]
  000b5	e8 00 00 00 00	 call	 sprintf

; 110  : 	*pDate = atoi(szDate);

  000ba	48 8d 4c 24 78	 lea	 rcx, QWORD PTR szDate$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000c5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pDate$[rsp]
  000cd	89 01		 mov	 DWORD PTR [rcx], eax

; 111  : 	_stprintf(szDate, "%02d%02d%02d", tmTime.tm_hour, tmTime.tm_min, tmTime.tm_sec);

  000cf	8b 44 24 38	 mov	 eax, DWORD PTR tmTime$[rsp]
  000d3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d7	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR tmTime$[rsp+4]
  000dc	44 8b 44 24 40	 mov	 r8d, DWORD PTR tmTime$[rsp+8]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81235
  000e8	48 8d 4c 24 78	 lea	 rcx, QWORD PTR szDate$[rsp]
  000ed	e8 00 00 00 00	 call	 sprintf

; 112  : 	*pTime = atoi(szDate);

  000f2	48 8d 4c 24 78	 lea	 rcx, QWORD PTR szDate$[rsp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pTime$[rsp]
  00105	89 01		 mov	 DWORD PTR [rcx], eax

; 113  : 
; 114  : 	return true;

  00107	b0 01		 mov	 al, 1
$LN1@setLocalFi:

; 115  : }

  00109	48 8b f8	 mov	 rdi, rax
  0010c	48 8b cc	 mov	 rcx, rsp
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?setLocalFileTime@@YA_NPEA_JPEAH1@Z$rtcFrameData
  00116	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0011b	48 8b c7	 mov	 rax, rdi
  0011e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00126	48 33 cc	 xor	 rcx, rsp
  00129	e8 00 00 00 00	 call	 __security_check_cookie
  0012e	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00135	5f		 pop	 rdi
  00136	c3		 ret	 0
?setLocalFileTime@@YA_NPEA_JPEAH1@Z ENDP		; setLocalFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
sysTm$ = 40
__$ArrayPad$ = 80
pTime$ = 112
?getCurrentTime@@YAXPEAUSTTime@@@Z PROC			; getCurrentTime

; 465  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 18 00 00 00	 mov	 ecx, 24
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 466  : #ifndef WIN32
; 467  : 	struct	tm	ltm;
; 468  : 	ltm = &_tm;
; 469  : 	struct timespec tp;
; 470  : 	clock_gettime(CLOCK_REALTIME, &tp);
; 471  : 	pTime->nLast = tp.tv_nsec % MILLISEC_PER_SEC;
; 472  : 	time_t t = time(NULL);
; 473  : 	errno_t err = localtime_s(&ltm, &t);
; 474  : 	pTime->nHour = ltm.tm_hour;
; 475  : 	pTime->nMinute = ltm.tm_min;
; 476  : 	pTime->nSec = ltm.tm_sec;
; 477  : #else
; 478  : 	SYSTEMTIME	sysTm;
; 479  : 	GetSystemTime(&sysTm);

  0002d	48 8d 4c 24 28	 lea	 rcx, QWORD PTR sysTm$[rsp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 480  : 	pTime->nHour = sysTm.wHour;

  00038	0f b7 44 24 30	 movzx	 eax, WORD PTR sysTm$[rsp+8]
  0003d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pTime$[rsp]
  00042	89 01		 mov	 DWORD PTR [rcx], eax

; 481  : 	pTime->nMinute = sysTm.wMinute;

  00044	0f b7 44 24 32	 movzx	 eax, WORD PTR sysTm$[rsp+10]
  00049	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pTime$[rsp]
  0004e	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 482  : 	pTime->nSec = sysTm.wSecond;

  00051	0f b7 44 24 34	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  00056	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pTime$[rsp]
  0005b	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 483  : 	pTime->nLast = sysTm.wMilliseconds;

  0005e	0f b7 44 24 36	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  00063	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pTime$[rsp]
  00068	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 484  : #endif
; 485  : }

  0006b	48 8b cc	 mov	 rcx, rsp
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getCurrentTime@@YAXPEAUSTTime@@@Z$rtcFrameData
  00075	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0007f	48 33 cc	 xor	 rcx, rsp
  00082	e8 00 00 00 00	 call	 __security_check_cookie
  00087	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0008b	5f		 pop	 rdi
  0008c	c3		 ret	 0
?getCurrentTime@@YAXPEAUSTTime@@@Z ENDP			; getCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
nValue$ = 0
i$ = 4
pTime1$ = 32
pTime2$ = 40
pTimeTarget$ = 48
nLastLen$ = 56
?getTimeInterval@@YAXPEAUSTTime@@00H@Z PROC		; getTimeInterval

; 488  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 10	 sub	 rsp, 16
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 04 00 00 00	 mov	 ecx, 4
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR [rsp+32]

; 489  : 	int nValue = 0, i;

  0002d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nValue$[rsp], 0

; 490  : 	if (pTime2->nLast < pTime1->nLast) {

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0003e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00041	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  00044	7d 5d		 jge	 SHORT $LN5@getTimeInt

; 491  : 		nValue = 1;

  00046	c7 04 24 01 00
	00 00		 mov	 DWORD PTR nValue$[rsp], 1

; 492  : 		for (i = 0; i < nLastLen; i++)

  0004d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00055	eb 0a		 jmp	 SHORT $LN4@getTimeInt
$LN2@getTimeInt:
  00057	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  0005b	ff c0		 inc	 eax
  0005d	89 44 24 04	 mov	 DWORD PTR i$[rsp], eax
$LN4@getTimeInt:
  00061	8b 44 24 38	 mov	 eax, DWORD PTR nLastLen$[rsp]
  00065	39 44 24 04	 cmp	 DWORD PTR i$[rsp], eax
  00069	7d 09		 jge	 SHORT $LN3@getTimeInt

; 493  : 		{
; 494  : 			nValue = nValue * 10;

  0006b	6b 04 24 0a	 imul	 eax, DWORD PTR nValue$[rsp], 10
  0006f	89 04 24	 mov	 DWORD PTR nValue$[rsp], eax

; 495  : 		}

  00072	eb e3		 jmp	 SHORT $LN2@getTimeInt
$LN3@getTimeInt:

; 496  : 		pTimeTarget->nLast = (pTime2->nLast + nValue) - pTime1->nLast;

  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00079	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0007c	03 04 24	 add	 eax, DWORD PTR nValue$[rsp]
  0007f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00084	2b 41 0c	 sub	 eax, DWORD PTR [rcx+12]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  0008c	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 497  : 		pTime2->nSec -= 1;

  0008f	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00094	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00097	ff c8		 dec	 eax
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  0009e	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 498  : 	}
; 499  : 	else {

  000a1	eb 1a		 jmp	 SHORT $LN6@getTimeInt
$LN5@getTimeInt:

; 500  : 		pTimeTarget->nLast = pTime2->nLast - pTime1->nLast;

  000a3	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000ad	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  000b0	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  000b3	2b c1		 sub	 eax, ecx
  000b5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  000ba	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
$LN6@getTimeInt:

; 501  : 	}
; 502  : 
; 503  : 	if (pTime2->nSec < pTime1->nSec) {

  000bd	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000c7	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  000ca	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  000cd	7d 2f		 jge	 SHORT $LN7@getTimeInt

; 504  : 		pTimeTarget->nSec = (pTime2->nSec + 60) - pTime1->nSec;

  000cf	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000d4	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000d7	83 c0 3c	 add	 eax, 60			; 0000003cH
  000da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000df	2b 41 08	 sub	 eax, DWORD PTR [rcx+8]
  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  000e7	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 505  : 		pTime2->nMinute -= 1;

  000ea	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000ef	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000f2	ff c8		 dec	 eax
  000f4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  000f9	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 506  : 	}
; 507  : 	else {

  000fc	eb 1a		 jmp	 SHORT $LN8@getTimeInt
$LN7@getTimeInt:

; 508  : 		pTimeTarget->nSec = pTime2->nSec - pTime1->nSec;

  000fe	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00103	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00108	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0010b	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0010e	2b c1		 sub	 eax, ecx
  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00115	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN8@getTimeInt:

; 509  : 	}
; 510  : 
; 511  : 	if (pTime2->nMinute < pTime1->nMinute) {

  00118	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0011d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00122	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00125	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00128	7d 2d		 jge	 SHORT $LN9@getTimeInt

; 512  : 		pTimeTarget->nMinute = (pTime2->nMinute + 60) - pTime1->nMinute;

  0012a	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0012f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00132	83 c0 3c	 add	 eax, 60			; 0000003cH
  00135	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0013a	2b 41 04	 sub	 eax, DWORD PTR [rcx+4]
  0013d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00142	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 513  : 		pTime2->nHour -= 1;

  00145	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0014a	8b 00		 mov	 eax, DWORD PTR [rax]
  0014c	ff c8		 dec	 eax
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  00153	89 01		 mov	 DWORD PTR [rcx], eax

; 514  : 	}
; 515  : 	else {

  00155	eb 1a		 jmp	 SHORT $LN10@getTimeInt
$LN9@getTimeInt:

; 516  : 		pTimeTarget->nMinute = pTime2->nMinute - pTime1->nMinute;

  00157	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0015c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00161	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00164	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00167	2b c1		 sub	 eax, ecx
  00169	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  0016e	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN10@getTimeInt:

; 517  : 	}
; 518  : 	pTimeTarget->nHour = pTime2->nHour - pTime1->nHour;

  00171	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00176	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0017b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0017d	8b 00		 mov	 eax, DWORD PTR [rax]
  0017f	2b c1		 sub	 eax, ecx
  00181	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00186	89 01		 mov	 DWORD PTR [rcx], eax

; 519  : }

  00188	48 83 c4 10	 add	 rsp, 16
  0018c	5f		 pop	 rdi
  0018d	c3		 ret	 0
?getTimeInterval@@YAXPEAUSTTime@@00H@Z ENDP		; getTimeInterval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tzi$ = 48
__$ArrayPad$ = 240
?initTimeZone@@YAXXZ PROC				; initTimeZone

; 24   : {

$LN3:
  00000	40 57		 push	 rdi
  00002	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 25   : #ifndef WIN32
; 26   : 	//struct timespec tp;
; 27   : 	//clock_gettime(CLOCK_REALTIME, &tp); 
; 28   : 	//m_tmval.tv_sec = tp.tv_sec;
; 29   : 	//m_tmval.tv_usec = tp.tv_nsec/1000000L;
; 30   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 31   : 	//struct timezone tz;
; 32   : 	//gettimeofday(&m_tmval, &tz);
; 33   : 	//m_tm = *localtime((const time_t*)&m_tmval.tv_sec);
; 34   : 	//gettimeofday(&m_tmval, NULL);
; 35   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 36   : #else
; 37   : 	TIME_ZONE_INFORMATION tzi;
; 38   : 	GetTimeZoneInformation(&tzi);

  0002a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tzi$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetTimeZoneInformation

; 39   : 	g_stTZ.nTZHour = (-tzi.Bias) / 60;

  00035	8b 44 24 30	 mov	 eax, DWORD PTR tzi$[rsp]
  00039	f7 d8		 neg	 eax
  0003b	99		 cdq
  0003c	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00041	f7 f9		 idiv	 ecx
  00043	89 05 00 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A, eax

; 40   : 	g_stTZ.nTZMin = (-tzi.Bias) % 60;

  00049	8b 44 24 30	 mov	 eax, DWORD PTR tzi$[rsp]
  0004d	f7 d8		 neg	 eax
  0004f	99		 cdq
  00050	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00055	f7 f9		 idiv	 ecx
  00057	8b c2		 mov	 eax, edx
  00059	89 05 04 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+4, eax

; 41   : 	g_stTZ.nTZSec = (tzi.Bias) * 60;

  0005f	6b 44 24 30 3c	 imul	 eax, DWORD PTR tzi$[rsp], 60 ; 0000003cH
  00064	89 05 08 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+8, eax

; 42   : 	g_stTZ.nTZType = 0;

  0006a	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+12, 0

; 43   : #endif
; 44   : }

  00074	48 8b cc	 mov	 rcx, rsp
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?initTimeZone@@YAXXZ$rtcFrameData
  0007e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00083	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008b	48 33 cc	 xor	 rcx, rsp
  0008e	e8 00 00 00 00	 call	 __security_check_cookie
  00093	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
?initTimeZone@@YAXXZ ENDP				; initTimeZone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
ltm$ = 32
tv66 = 40
this$ = 64
nTz$ = 72
nType$ = 80
?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z PROC ; CDateTime::uptoMicroseconds

; 260  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 0c 00 00 00	 mov	 ecx, 12
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 261  : 	struct	tm	*ltm = &m_tm;

  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 262  : 	//long divisor;
; 263  : 
; 264  : #ifndef WIN32
; 265  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 266  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 267  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%divisor;
; 268  : 	if(nType == DT_MICROSEC) m_tmval.tv_nsec = m_tmval.tv_nsec%MICROSEC_PER_SEC;
; 269  : #else
; 270  : 	Misc::getFileTime(&m_tmval, nType == DT_MICROSEC?true:false);

  00031	83 7c 24 50 03	 cmp	 DWORD PTR nType$[rsp], 3
  00036	75 07		 jne	 SHORT $LN3@uptoMicros
  00038	c6 44 24 28 01	 mov	 BYTE PTR tv66[rsp], 1
  0003d	eb 05		 jmp	 SHORT $LN4@uptoMicros
$LN3@uptoMicros:
  0003f	c6 44 24 28 00	 mov	 BYTE PTR tv66[rsp], 0
$LN4@uptoMicros:
  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00049	48 83 c0 28	 add	 rax, 40			; 00000028H
  0004d	0f b6 54 24 28	 movzx	 edx, BYTE PTR tv66[rsp]
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 ?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z ; Misc::getFileTime

; 271  : 	uptoSeconds(nTz, m_tmval.tv_sec);

  0005a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005f	4c 8b 40 28	 mov	 r8, QWORD PTR [rax+40]
  00063	8b 54 24 48	 mov	 edx, DWORD PTR nTz$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 272  : #endif
; 273  : 	//_stprintf(szBuf, _T("%04d/%02d/%02d %02d:%02d:%02d , %d\n"), m_tm.tm_year, m_tm.tm_mon, m_tm.tm_wday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_usec);
; 274  : 	//_tprintf(szBuf);
; 275  : }

  00071	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00075	5f		 pop	 rdi
  00076	c3		 ret	 0
?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ENDP ; CDateTime::uptoMicroseconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
ltm$ = 32
sysTm$ = 56
__$ArrayPad$ = 96
this$ = 128
nTz$ = 136
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z PROC	; CDateTime::uptoMilliSeconds

; 227  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 1c 00 00 00	 mov	 ecx, 28
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 228  : 	// only UTC
; 229  : 	struct	tm	*ltm = &m_tm;

  00034	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0003c	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 230  : #ifndef WIN32
; 231  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 232  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 233  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%MILLISEC_PER_SEC;
; 234  : #else
; 235  : 	//GetSystemTime(&sysTm);
; 236  : //	time_t t = time(NULL);
; 237  : 	SYSTEMTIME	sysTm;
; 238  : 	if (nTz == TZ_UTC) {

  00041	83 bc 24 88 00
	00 00 01	 cmp	 DWORD PTR nTz$[rsp], 1
  00049	75 0d		 jne	 SHORT $LN2@uptoMilliS

; 239  : 		GetSystemTime(&sysTm);

  0004b	48 8d 4c 24 38	 lea	 rcx, QWORD PTR sysTm$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 240  : 	}
; 241  : 	else {//if (nTz == TZ_KST)

  00056	eb 0b		 jmp	 SHORT $LN3@uptoMilliS
$LN2@uptoMilliS:

; 242  : 		GetLocalTime(&sysTm);

  00058	48 8d 4c 24 38	 lea	 rcx, QWORD PTR sysTm$[rsp]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocalTime
$LN3@uptoMilliS:

; 243  : 	}
; 244  : 	m_tm.tm_year = sysTm.wYear;

  00063	0f b7 44 24 38	 movzx	 eax, WORD PTR sysTm$[rsp]
  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 245  : 	m_tm.tm_mon = sysTm.wMonth;

  00073	0f b7 44 24 3a	 movzx	 eax, WORD PTR sysTm$[rsp+2]
  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 246  : 	m_tm.tm_mday = sysTm.wDay;

  00083	0f b7 44 24 3e	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  00088	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00090	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 247  : 	m_tm.tm_wday = sysTm.wDayOfWeek;

  00093	0f b7 44 24 3c	 movzx	 eax, WORD PTR sysTm$[rsp+4]
  00098	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a0	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 248  : 	m_tm.tm_hour = sysTm.wHour;

  000a3	0f b7 44 24 40	 movzx	 eax, WORD PTR sysTm$[rsp+8]
  000a8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b0	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 249  : 	m_tm.tm_min = sysTm.wMinute;

  000b3	0f b7 44 24 42	 movzx	 eax, WORD PTR sysTm$[rsp+10]
  000b8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c0	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 250  : 	m_tm.tm_sec = sysTm.wSecond;

  000c3	0f b7 44 24 44	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d0	89 01		 mov	 DWORD PTR [rcx], eax

; 251  : 	//uptoSeconds(nTz, t);
; 252  : 	m_tmval.tv_sec = 0;

  000d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000da	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;

  000e2	0f b7 44 24 46	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  000e7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 255  : #endif
; 256  : }

  000f2	48 8b cc	 mov	 rcx, rsp
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z$rtcFrameData
  000fc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00101	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00106	48 33 cc	 xor	 rcx, rsp
  00109	e8 00 00 00 00	 call	 __security_check_cookie
  0010e	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00112	5f		 pop	 rdi
  00113	c3		 ret	 0
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z ENDP	; CDateTime::uptoMilliSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
ltm$ = 32
err$1 = 40
this$ = 64
nTz$ = 72
t$ = 80
?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z PROC	; CDateTime::uptoSeconds

; 200  : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 0c 00 00 00	 mov	 ecx, 12
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 201  : 	struct	tm	*ltm;
; 202  : 	if (nTz == TZ_UTC) {

  00027	83 7c 24 48 01	 cmp	 DWORD PTR nTz$[rsp], 1
  0002c	75 29		 jne	 SHORT $LN2@uptoSecond

; 203  : #ifndef WIN32
; 204  : 		ltm = gmtime_r(&t, ltm);
; 205  : #else
; 206  : 		ltm = gmtime(&t);

  0002e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR t$[rsp]
  00033	e8 00 00 00 00	 call	 gmtime
  00038	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 207  : #endif
; 208  : 		memcpy(&m_tm, ltm, sizeof(m_tm));

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00042	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00048	48 8b 54 24 20	 mov	 rdx, QWORD PTR ltm$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 memcpy

; 209  : 	}
; 210  : 	else {//if (nTz == TZ_KST) {

  00055	eb 30		 jmp	 SHORT $LN3@uptoSecond
$LN2@uptoSecond:

; 211  : 		ltm = &m_tm;

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 212  : #ifndef WIN32
; 213  : 		ltm = localtime(&t);
; 214  : #else
; 215  : 		errno_t err = localtime_s(ltm, &t);

  00061	48 8d 54 24 50	 lea	 rdx, QWORD PTR t$[rsp]
  00066	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ltm$[rsp]
  0006b	e8 00 00 00 00	 call	 localtime_s
  00070	89 44 24 28	 mov	 DWORD PTR err$1[rsp], eax

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  00074	83 7c 24 28 00	 cmp	 DWORD PTR err$1[rsp], 0
  00079	74 0c		 je	 SHORT $LN4@uptoSecond
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81310
  00082	e8 00 00 00 00	 call	 printf
$LN4@uptoSecond:
$LN3@uptoSecond:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008c	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0008f	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00099	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 220  : 	m_tm.tm_mon += 1;

  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000a1	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000a4	ff c0		 inc	 eax
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000ab	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 221  : 	m_tmval.tv_sec = t;

  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR t$[rsp]
  000b8	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 222  : 	m_tmval.tv_nsec = 0;

  000bc	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000c1	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 223  : }

  000c8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000cc	5f		 pop	 rdi
  000cd	c3		 ret	 0
?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ENDP	; CDateTime::uptoSeconds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
nLen$ = 80
pyear$4 = 100
tv64 = 128
__$ArrayPad$ = 136
this$ = 160
pTarget$ = 168
pFormat$ = 176
nFormat$ = 184
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z PROC	; CDateTime::setString

; 278  : {

$LN11:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  0001c	48 8b fc	 mov	 rdi, rsp
  0001f	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+160]
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003a	48 33 c4	 xor	 rax, rsp
  0003d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 279  : 	int nLen=0;

  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR nLen$[rsp], 0

; 280  : 	switch (nFormat)

  0004d	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR nFormat$[rsp]
  00054	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv64[rsp], eax
  0005b	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR tv64[rsp], 1
  00063	0f 84 87 01 00
	00		 je	 $LN8@setString
  00069	83 bc 24 80 00
	00 00 04	 cmp	 DWORD PTR tv64[rsp], 4
  00071	0f 8e e7 01 00
	00		 jle	 $LN9@setString
  00077	83 bc 24 80 00
	00 00 08	 cmp	 DWORD PTR tv64[rsp], 8
  0007f	7e 62		 jle	 SHORT $LN5@setString
  00081	83 bc 24 80 00
	00 00 09	 cmp	 DWORD PTR tv64[rsp], 9
  00089	74 05		 je	 SHORT $LN4@setString
  0008b	e9 ce 01 00 00	 jmp	 $LN9@setString
$LN4@setString:

; 281  : 	{
; 282  : 	case LOG_DATE_DDHHMMSS :
; 283  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00090	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00098	8b 00		 mov	 eax, DWORD PTR [rax]
  0009a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0009e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a6	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000a9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ad	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b5	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  000b9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c1	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  000c5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  000cd	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  000d5	e8 00 00 00 00	 call	 sprintf
  000da	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax

; 284  : 		break;

  000de	e9 f6 01 00 00	 jmp	 $LN2@setString
$LN5@setString:

; 285  : 	case LOG_DATE_YYMMDDHHMMSS:
; 286  : 	case LOG_DATE_YYMMDDHHMMSS3:
; 287  : 	case LOG_DATE_YYMMDDHHMMSS6:
; 288  : 	case LOG_DATE_YYMMDDHHMMSS9:
; 289  : 		{
; 290  : 			TCHAR pyear[6];
; 291  : 			_stprintf(pyear, _T("%d"), m_tm.tm_year);

  000e3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000eb	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81337
  000f6	48 8d 4c 24 64	 lea	 rcx, QWORD PTR pyear$4[rsp]
  000fb	e8 00 00 00 00	 call	 sprintf

; 292  : 			if (nFormat == LOG_DATE_YYMMDDHHMMSS) {

  00100	83 bc 24 b8 00
	00 00 05	 cmp	 DWORD PTR nFormat$[rsp], 5
  00108	75 6a		 jne	 SHORT $LN6@setString

; 293  : 				nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  0010a	48 8d 44 24 66	 lea	 rax, QWORD PTR pyear$4[rsp+2]
  0010f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00117	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00119	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0011d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00125	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00128	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0012c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00134	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00137	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0013b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00143	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00146	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0014a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00152	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  00156	4c 8b c0	 mov	 r8, rax
  00159	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  00161	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  00169	e8 00 00 00 00	 call	 sprintf
  0016e	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
  00172	eb 77		 jmp	 SHORT $LN7@setString
$LN6@setString:

; 294  : 			}
; 295  : 			else nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  00174	48 8d 44 24 66	 lea	 rax, QWORD PTR pyear$4[rsp+2]
  00179	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00181	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  00184	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00188	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00190	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00192	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00196	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0019e	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  001a1	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  001a5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ad	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  001b0	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  001b4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bc	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  001bf	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001c3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001cb	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  001cf	4c 8b c0	 mov	 r8, rax
  001d2	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  001da	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  001e2	e8 00 00 00 00	 call	 sprintf
  001e7	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
$LN7@setString:

; 296  : 		}
; 297  : 		break;

  001eb	e9 e9 00 00 00	 jmp	 $LN2@setString
$LN8@setString:

; 298  : 	case LOG_DATE_YYYYMMDDHHMMSS:
; 299  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  001f0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001f8	8b 00		 mov	 eax, DWORD PTR [rax]
  001fa	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  001fe	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00206	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00209	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0020d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00215	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00218	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0021c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00224	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00227	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0022b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00233	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  00237	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0023f	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00243	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  0024b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  00253	e8 00 00 00 00	 call	 sprintf
  00258	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax

; 300  : 		break;

  0025c	eb 7b		 jmp	 SHORT $LN2@setString
$LN9@setString:

; 301  : 	case LOG_DATE_YYYYMMDDHHMMSS3:
; 302  : 	case LOG_DATE_YYYYMMDDHHMMSS6:
; 303  : 	case LOG_DATE_YYYYMMDDHHMMSS9:
; 304  : 	default:
; 305  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  0025e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00266	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00269	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0026d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00275	8b 00		 mov	 eax, DWORD PTR [rax]
  00277	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0027b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00283	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00286	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0028a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00292	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00295	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00299	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002a1	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  002a4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002a8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002b0	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  002b4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002bc	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  002c0	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  002c8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  002d0	e8 00 00 00 00	 call	 sprintf
  002d5	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@setString:

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;

  002d9	8b 44 24 50	 mov	 eax, DWORD PTR nLen$[rsp]

; 309  : }

  002dd	8b f8		 mov	 edi, eax
  002df	48 8b cc	 mov	 rcx, rsp
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z$rtcFrameData
  002e9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002ee	8b c7		 mov	 eax, edi
  002f0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002f8	48 33 cc	 xor	 rcx, rsp
  002fb	e8 00 00 00 00	 call	 __security_check_cookie
  00300	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00307	5f		 pop	 rdi
  00308	c3		 ret	 0
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z ENDP	; CDateTime::setString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
timer$ = 72
t$ = 104
err$ = 148
tv91 = 160
tv131 = 168
__$ArrayPad$ = 176
this$ = 208
nAddDay$ = 216
f$ = 224
?addDateString@CDateTime@@QEAAPEBDHD@Z PROC		; CDateTime::addDateString

; 371  : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00016	48 8b fc	 mov	 rdi, rsp
  00019	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 time
  00046	6b 8c 24 d8 00
	00 00 18	 imul	 ecx, DWORD PTR nAddDay$[rsp], 24
  0004e	6b c9 3c	 imul	 ecx, ecx, 60		; 0000003cH
  00051	6b c9 3c	 imul	 ecx, ecx, 60		; 0000003cH
  00054	48 63 c9	 movsxd	 rcx, ecx
  00057	48 03 c1	 add	 rax, rcx
  0005a	48 89 44 24 48	 mov	 QWORD PTR timer$[rsp], rax

; 373  : 	struct tm t;
; 374  : 
; 375  : 	errno_t err = localtime_s(&t, &timer);

  0005f	48 8d 54 24 48	 lea	 rdx, QWORD PTR timer$[rsp]
  00064	48 8d 4c 24 68	 lea	 rcx, QWORD PTR t$[rsp]
  00069	e8 00 00 00 00	 call	 localtime_s
  0006e	89 84 24 94 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 376  : 	if (err) _tprintf(_T("%s %d ERROR _localtime_s\n"), __FUNCTION__, __LINE__);

  00075	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0007d	74 19		 je	 SHORT $LN2@addDateStr
  0007f	41 b8 78 01 00
	00		 mov	 r8d, 376		; 00000178H
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81389
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81390
  00093	e8 00 00 00 00	 call	 printf
$LN2@addDateStr:

; 377  : 
; 378  : 	if (f) {

  00098	0f be 84 24 e0
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  000a0	85 c0		 test	 eax, eax
  000a2	74 64		 je	 SHORT $LN3@addDateStr

; 379  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", t.tm_year + 1900, f, t.tm_mon+1, f, t.tm_mday);

  000a4	0f be 84 24 e0
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  000ac	8b 4c 24 78	 mov	 ecx, DWORD PTR t$[rsp+16]
  000b0	ff c1		 inc	 ecx
  000b2	0f be 94 24 e0
	00 00 00	 movsx	 edx, BYTE PTR f$[rsp]
  000ba	44 8b 44 24 7c	 mov	 r8d, DWORD PTR t$[rsp+20]
  000bf	41 81 c0 6c 07
	00 00		 add	 r8d, 1900		; 0000076cH
  000c6	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR this$[rsp]
  000ce	49 83 c1 38	 add	 r9, 56			; 00000038H
  000d2	4c 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv91[rsp], r9
  000da	44 8b 54 24 74	 mov	 r10d, DWORD PTR t$[rsp+12]
  000df	44 89 54 24 30	 mov	 DWORD PTR [rsp+48], r10d
  000e4	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000e8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000ec	44 8b ca	 mov	 r9d, edx
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81393
  000f6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv91[rsp]
  000fe	48 8b c8	 mov	 rcx, rax
  00101	e8 00 00 00 00	 call	 sprintf

; 380  : 	}
; 381  : 	else {

  00106	eb 4b		 jmp	 SHORT $LN4@addDateStr
$LN3@addDateStr:

; 382  : 		_stprintf(m_szDate, "%04d%02d%02d", t.tm_year + 1900, t.tm_mon + 1, t.tm_mday);

  00108	8b 44 24 78	 mov	 eax, DWORD PTR t$[rsp+16]
  0010c	ff c0		 inc	 eax
  0010e	8b 4c 24 7c	 mov	 ecx, DWORD PTR t$[rsp+20]
  00112	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  00118	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00120	48 83 c2 38	 add	 rdx, 56			; 00000038H
  00124	48 89 94 24 a8
	00 00 00	 mov	 QWORD PTR tv131[rsp], rdx
  0012c	44 8b 44 24 74	 mov	 r8d, DWORD PTR t$[rsp+12]
  00131	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00136	44 8b c8	 mov	 r9d, eax
  00139	44 8b c1	 mov	 r8d, ecx
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81394
  00143	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv131[rsp]
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	e8 00 00 00 00	 call	 sprintf
$LN4@addDateStr:

; 383  : 	}
; 384  : 	return m_szDate;

  00153	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0015b	48 83 c0 38	 add	 rax, 56			; 00000038H

; 385  : }

  0015f	48 8b f8	 mov	 rdi, rax
  00162	48 8b cc	 mov	 rcx, rsp
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?addDateString@CDateTime@@QEAAPEBDHD@Z$rtcFrameData
  0016c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00171	48 8b c7	 mov	 rax, rdi
  00174	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017c	48 33 cc	 xor	 rcx, rsp
  0017f	e8 00 00 00 00	 call	 __security_check_cookie
  00184	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0018b	5f		 pop	 rdi
  0018c	c3		 ret	 0
?addDateString@CDateTime@@QEAAPEBDHD@Z ENDP		; CDateTime::addDateString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 64
f$ = 72
?TimeString@CDateTime@@QEAAPEBD_N@Z PROC		; CDateTime::TimeString

; 359  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 0c 00 00 00	 mov	 ecx, 12
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 360  : 	if (f) {

  00022	0f b6 44 24 48	 movzx	 eax, BYTE PTR f$[rsp]
  00027	85 c0		 test	 eax, eax
  00029	74 37		 je	 SHORT $LN2@TimeString

; 361  : 		_stprintf(m_szTime, "%02d:%02d:%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 83 c0 44	 add	 rax, 68			; 00000044H
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00039	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0003b	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0003f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00044	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81378
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 sprintf

; 362  : 	}
; 363  : 	else {

  00060	eb 35		 jmp	 SHORT $LN3@TimeString
$LN2@TimeString:

; 364  : 		_stprintf(m_szTime, "%02d%02d%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 83 c0 44	 add	 rax, 68			; 00000044H
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00070	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00072	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007b	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00084	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81379
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 sprintf
$LN3@TimeString:

; 365  : 	}
; 366  : 	return m_szTime;

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009c	48 83 c0 44	 add	 rax, 68			; 00000044H

; 367  : 
; 368  : }

  000a0	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000a4	5f		 pop	 rdi
  000a5	c3		 ret	 0
?TimeString@CDateTime@@QEAAPEBD_N@Z ENDP		; CDateTime::TimeString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
pyear$ = 68
tv88 = 96
__$ArrayPad$ = 104
this$ = 128
f$ = 136
?DateString2@CDateTime@@QEAAPEBDD@Z PROC		; CDateTime::DateString2

; 348  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 1c 00 00 00	 mov	 ecx, 28
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 349  : 	char pyear[6];
; 350  : 	sprintf(pyear, "%d", m_tm.tm_year);

  00034	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0003c	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81366
  00047	48 8d 4c 24 44	 lea	 rcx, QWORD PTR pyear$[rsp]
  0004c	e8 00 00 00 00	 call	 sprintf

; 351  : 	sprintf(pyear, "%s", pyear + 2);

  00051	48 8d 44 24 46	 lea	 rax, QWORD PTR pyear$[rsp+2]
  00056	4c 8b c0	 mov	 r8, rax
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81367
  00060	48 8d 4c 24 44	 lea	 rcx, QWORD PTR pyear$[rsp]
  00065	e8 00 00 00 00	 call	 sprintf

; 352  : 
; 353  : 	if(f)_stprintf(m_szDate, "%s%c%02d%c%02d", pyear, f, m_tm.tm_mon, f, m_tm.tm_mday);

  0006a	0f be 84 24 88
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  00072	85 c0		 test	 eax, eax
  00074	74 63		 je	 SHORT $LN2@DateString
  00076	0f be 84 24 88
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  0007e	0f be 8c 24 88
	00 00 00	 movsx	 ecx, BYTE PTR f$[rsp]
  00086	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0008e	48 83 c2 38	 add	 rdx, 56			; 00000038H
  00092	48 89 54 24 60	 mov	 QWORD PTR tv88[rsp], rdx
  00097	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  0009f	45 8b 40 0c	 mov	 r8d, DWORD PTR [r8+12]
  000a3	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  000a8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ac	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b4	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000b7	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bb	44 8b c9	 mov	 r9d, ecx
  000be	4c 8d 44 24 44	 lea	 r8, QWORD PTR pyear$[rsp]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81370
  000ca	48 8b 44 24 60	 mov	 rax, QWORD PTR tv88[rsp]
  000cf	48 8b c8	 mov	 rcx, rax
  000d2	e8 00 00 00 00	 call	 sprintf
  000d7	eb 3b		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 354  : 	else _stprintf(m_szDate, "%0s%02d%02d", pyear, m_tm.tm_mon, m_tm.tm_mday);

  000d9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e1	48 83 c0 38	 add	 rax, 56			; 00000038H
  000e5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ed	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  000f0	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000fc	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  00100	4c 8d 44 24 44	 lea	 r8, QWORD PTR pyear$[rsp]
  00105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81371
  0010c	48 8b c8	 mov	 rcx, rax
  0010f	e8 00 00 00 00	 call	 sprintf
$LN3@DateString:

; 355  : 	return m_szDate;

  00114	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0011c	48 83 c0 38	 add	 rax, 56			; 00000038H

; 356  : }

  00120	48 8b f8	 mov	 rdi, rax
  00123	48 8b cc	 mov	 rcx, rsp
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?DateString2@CDateTime@@QEAAPEBDD@Z$rtcFrameData
  0012d	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00132	48 8b c7	 mov	 rax, rdi
  00135	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013a	48 33 cc	 xor	 rcx, rsp
  0013d	e8 00 00 00 00	 call	 __security_check_cookie
  00142	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
?DateString2@CDateTime@@QEAAPEBDD@Z ENDP		; CDateTime::DateString2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv81 = 64
this$ = 96
f$ = 104
?DateString@CDateTime@@QEAAPEBDD@Z PROC			; CDateTime::DateString

; 336  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 14 00 00 00	 mov	 ecx, 20
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR [rsp+96]

; 337  : 	if (f) {

  00022	0f be 44 24 68	 movsx	 eax, BYTE PTR f$[rsp]
  00027	85 c0		 test	 eax, eax
  00029	74 58		 je	 SHORT $LN2@DateString

; 338  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", m_tm.tm_year, f, m_tm.tm_mon, f, m_tm.tm_mday);

  0002b	0f be 44 24 68	 movsx	 eax, BYTE PTR f$[rsp]
  00030	0f be 4c 24 68	 movsx	 ecx, BYTE PTR f$[rsp]
  00035	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  0003a	48 83 c2 38	 add	 rdx, 56			; 00000038H
  0003e	48 89 54 24 40	 mov	 QWORD PTR tv81[rsp], rdx
  00043	4c 8b 44 24 60	 mov	 r8, QWORD PTR this$[rsp]
  00048	45 8b 40 0c	 mov	 r8d, DWORD PTR [r8+12]
  0004c	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  00051	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00055	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0005d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00061	44 8b c9	 mov	 r9d, ecx
  00064	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00069	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81359
  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR tv81[rsp]
  00079	48 8b c8	 mov	 rcx, rax
  0007c	e8 00 00 00 00	 call	 sprintf

; 339  : 	}
; 340  : 	else {

  00081	eb 36		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 341  : 		_stprintf(m_szDate, "%04d%02d%02d", m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday);

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 83 c0 38	 add	 rax, 56			; 00000038H
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00091	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00094	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00098	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  000a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a6	44 8b 41 14	 mov	 r8d, DWORD PTR [rcx+20]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81360
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 sprintf
$LN3@DateString:

; 342  : 	}
; 343  : 	return m_szDate;

  000b9	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000be	48 83 c0 38	 add	 rax, 56			; 00000038H

; 344  : }

  000c2	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
?DateString@CDateTime@@QEAAPEBDD@Z ENDP			; CDateTime::DateString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
ltm$ = 32
t$1 = 40
tv74 = 48
this$ = 80
nType$ = 88
nTz$ = 96
?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z PROC ; CDateTime::SetCurrentTime

; 179  : {

$LN12:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 10 00 00 00	 mov	 ecx, 16
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 180  : 	struct	tm	*ltm = &m_tm;

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 181  : 	m_szTimezone[0] = 0;

  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	48 6b c0 00	 imul	 rax, rax, 0
  0003a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003f	c6 44 01 5c 00	 mov	 BYTE PTR [rcx+rax+92], 0

; 182  : 
; 183  : 	if (nTz) {

  00044	83 7c 24 60 00	 cmp	 DWORD PTR nTz$[rsp], 0
  00049	74 40		 je	 SHORT $LN4@SetCurrent

; 184  : 		if (nTz == TZ_UTC) {

  0004b	83 7c 24 60 01	 cmp	 DWORD PTR nTz$[rsp], 1
  00050	75 1a		 jne	 SHORT $LN5@SetCurrent

; 185  : 			_tcscpy(m_szTimezone, _T("+00:00"));

  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 83 c0 5c	 add	 rax, 92			; 0000005cH
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81294
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 strcpy
  0006a	eb 1f		 jmp	 SHORT $LN6@SetCurrent
$LN5@SetCurrent:

; 186  : 		}
; 187  : 		else if (nTz == TZ_KST) {

  0006c	83 7c 24 60 02	 cmp	 DWORD PTR nTz$[rsp], 2
  00071	75 18		 jne	 SHORT $LN7@SetCurrent

; 188  : 			_tcscpy(m_szTimezone, _T("+09:00"));

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 83 c0 5c	 add	 rax, 92			; 0000005cH
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81296
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 strcpy
$LN7@SetCurrent:
$LN6@SetCurrent:
$LN4@SetCurrent:

; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	switch (nType) {

  0008b	8b 44 24 58	 mov	 eax, DWORD PTR nType$[rsp]
  0008f	89 44 24 30	 mov	 DWORD PTR tv74[rsp], eax
  00093	83 7c 24 30 01	 cmp	 DWORD PTR tv74[rsp], 1
  00098	74 17		 je	 SHORT $LN8@SetCurrent
  0009a	83 7c 24 30 02	 cmp	 DWORD PTR tv74[rsp], 2
  0009f	74 31		 je	 SHORT $LN9@SetCurrent
  000a1	83 7c 24 30 02	 cmp	 DWORD PTR tv74[rsp], 2
  000a6	7e 4d		 jle	 SHORT $LN2@SetCurrent
  000a8	83 7c 24 30 04	 cmp	 DWORD PTR tv74[rsp], 4
  000ad	7e 33		 jle	 SHORT $LN10@SetCurrent
  000af	eb 44		 jmp	 SHORT $LN2@SetCurrent
$LN8@SetCurrent:

; 193  : 	case DT_SEC: { time_t t = time(NULL);  uptoSeconds(nTz, t);	break; }

  000b1	33 c9		 xor	 ecx, ecx
  000b3	e8 00 00 00 00	 call	 time
  000b8	48 89 44 24 28	 mov	 QWORD PTR t$1[rsp], rax
  000bd	4c 8b 44 24 28	 mov	 r8, QWORD PTR t$1[rsp]
  000c2	8b 54 24 60	 mov	 edx, DWORD PTR nTz$[rsp]
  000c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000cb	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds
  000d0	eb 23		 jmp	 SHORT $LN2@SetCurrent
$LN9@SetCurrent:

; 194  : 	case DT_MILLISEC: uptoMilliSeconds(nTz);	break;

  000d2	8b 54 24 60	 mov	 edx, DWORD PTR nTz$[rsp]
  000d6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000db	e8 00 00 00 00	 call	 ?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z ; CDateTime::uptoMilliSeconds
  000e0	eb 13		 jmp	 SHORT $LN2@SetCurrent
$LN10@SetCurrent:

; 195  : 	case DT_MICROSEC: case DT_NANOSEC: uptoMicroseconds(nTz, nType); break;

  000e2	44 8b 44 24 58	 mov	 r8d, DWORD PTR nType$[rsp]
  000e7	8b 54 24 60	 mov	 edx, DWORD PTR nTz$[rsp]
  000eb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000f0	e8 00 00 00 00	 call	 ?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
$LN2@SetCurrent:

; 196  : 	}
; 197  : }

  000f5	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000f9	5f		 pop	 rdi
  000fa	c3		 ret	 0
?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ENDP ; CDateTime::SetCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 16
nSec$ = 24
?SetSecondsValue@CDateTime@@QEAAXH@Z PROC		; CDateTime::SetSecondsValue

; 323  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi

; 324  : 	m_tm.tm_year = 0;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 325  : 	m_tm.tm_mon = 0;

  00016	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 326  : 	m_tm.tm_mday = nSec/86400; //(24 * 3600)

  00022	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  00026	99		 cdq
  00027	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0002c	f7 f9		 idiv	 ecx
  0002e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00033	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 327  : 	nSec = nSec % 86400;

  00036	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  0003a	99		 cdq
  0003b	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00040	f7 f9		 idiv	 ecx
  00042	8b c2		 mov	 eax, edx
  00044	89 44 24 18	 mov	 DWORD PTR nSec$[rsp], eax

; 328  : 	m_tm.tm_hour = nSec/3600;

  00048	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  0004c	99		 cdq
  0004d	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00052	f7 f9		 idiv	 ecx
  00054	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  00059	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 329  : 	nSec = nSec % 3600;

  0005c	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  00060	99		 cdq
  00061	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00066	f7 f9		 idiv	 ecx
  00068	8b c2		 mov	 eax, edx
  0006a	89 44 24 18	 mov	 DWORD PTR nSec$[rsp], eax

; 330  : 	m_tm.tm_min = nSec / 60;

  0006e	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  00072	99		 cdq
  00073	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00078	f7 f9		 idiv	 ecx
  0007a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR this$[rsp]
  0007f	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 331  : 	nSec = nSec % 60;

  00082	8b 44 24 18	 mov	 eax, DWORD PTR nSec$[rsp]
  00086	99		 cdq
  00087	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0008c	f7 f9		 idiv	 ecx
  0008e	8b c2		 mov	 eax, edx
  00090	89 44 24 18	 mov	 DWORD PTR nSec$[rsp], eax

; 332  : 	m_tm.tm_sec = nSec;

  00094	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00099	8b 4c 24 18	 mov	 ecx, DWORD PTR nSec$[rsp]
  0009d	89 08		 mov	 DWORD PTR [rax], ecx

; 333  : }

  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
?SetSecondsValue@CDateTime@@QEAAXH@Z ENDP		; CDateTime::SetSecondsValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 48
ltmVal$ = 56
?SetTimeValue@CDateTime@@QEAAXPEA_J@Z PROC		; CDateTime::SetTimeValue

; 318  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 319  : 	uptoSeconds(TZ_NONE, *ltmVal);

  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR ltmVal$[rsp]
  00028	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0002b	33 d2		 xor	 edx, edx
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 320  : }

  00037	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003b	5f		 pop	 rdi
  0003c	c3		 ret	 0
?SetTimeValue@CDateTime@@QEAAXPEA_J@Z ENDP		; CDateTime::SetTimeValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 16
??1CDateTime@@QEAA@XZ PROC				; CDateTime::~CDateTime

; 312  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 313  :     
; 314  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1CDateTime@@QEAA@XZ ENDP				; CDateTime::~CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 48
nType$ = 56
nTz$ = 64
??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z PROC	; CDateTime::CDateTime

; 173  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	48 8b fc	 mov	 rdi, rsp
  00016	b9 08 00 00 00	 mov	 ecx, 8
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 174  : 	if (nType == DT_NONE) return;

  00027	83 7c 24 38 00	 cmp	 DWORD PTR nType$[rsp], 0
  0002c	75 02		 jne	 SHORT $LN2@CDateTime
  0002e	eb 13		 jmp	 SHORT $LN1@CDateTime
$LN2@CDateTime:

; 175  : 	SetCurrentTime(nType, nTz);

  00030	44 8b 44 24 40	 mov	 r8d, DWORD PTR nTz$[rsp]
  00035	8b 54 24 38	 mov	 edx, DWORD PTR nType$[rsp]
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
$LN1@CDateTime:

; 176  : }

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5f		 pop	 rdi
  0004d	c3		 ret	 0
??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z ENDP	; CDateTime::CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getTime@CFileTime@@QEAAHXZ
_TEXT	SEGMENT
this$ = 16
?getTime@CFileTime@@QEAAHXZ PROC			; CFileTime::getTime, COMDAT

; 197  : 	inline int getTime() { return m_nTime; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0000e	5f		 pop	 rdi
  0000f	c3		 ret	 0
?getTime@CFileTime@@QEAAHXZ ENDP			; CFileTime::getTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getDate@CFileTime@@QEAAHXZ
_TEXT	SEGMENT
this$ = 16
?getDate@CFileTime@@QEAAHXZ PROC			; CFileTime::getDate, COMDAT

; 196  : 	inline int getDate() { return m_nDate; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	8b 00		 mov	 eax, DWORD PTR [rax]
  0000d	5f		 pop	 rdi
  0000e	c3		 ret	 0
?getDate@CFileTime@@QEAAHXZ ENDP			; CFileTime::getDate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
tv64 = 32
this$ = 64
pCompare$ = 72
eOP$ = 80
?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z PROC	; CFileTime::isCompare

; 145  : {

$LN26:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 0c 00 00 00	 mov	 ecx, 12
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 146  : 	switch (eOP)

  00028	8b 44 24 50	 mov	 eax, DWORD PTR eOP$[rsp]
  0002c	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00030	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  00034	ff c8		 dec	 eax
  00036	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0003a	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  0003f	0f 87 c2 01 00
	00		 ja	 $LN2@isCompare
  00045	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00051	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN25@isCompare[rcx+rax*4]
  00058	48 03 c1	 add	 rax, rcx
  0005b	ff e0		 jmp	 rax
$LN4@isCompare:

; 147  : 	{
; 148  : 	case eOperator_EQ: if (pCompare->getDate() == m_nDate && pCompare->getTime() == m_nTime) return true; return false;

  0005d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00062	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	3b 01		 cmp	 eax, DWORD PTR [rcx]
  0006e	75 1b		 jne	 SHORT $LN5@isCompare
  00070	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00075	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  0007a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007f	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  00082	75 07		 jne	 SHORT $LN5@isCompare
  00084	b0 01		 mov	 al, 1
  00086	e9 7e 01 00 00	 jmp	 $LN1@isCompare
$LN5@isCompare:
  0008b	32 c0		 xor	 al, al
  0008d	e9 77 01 00 00	 jmp	 $LN1@isCompare
$LN6@isCompare:

; 149  : 	case eOperator_NE: if (pCompare->getDate() != m_nDate && pCompare->getTime() != m_nTime) return true; return false;

  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00097	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a1	3b 01		 cmp	 eax, DWORD PTR [rcx]
  000a3	74 1b		 je	 SHORT $LN7@isCompare
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000aa	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  000af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000b4	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  000b7	74 07		 je	 SHORT $LN7@isCompare
  000b9	b0 01		 mov	 al, 1
  000bb	e9 49 01 00 00	 jmp	 $LN1@isCompare
$LN7@isCompare:
  000c0	32 c0		 xor	 al, al
  000c2	e9 42 01 00 00	 jmp	 $LN1@isCompare
$LN8@isCompare:

; 150  : 	case eOperator_GT:
; 151  : 		if (pCompare->getDate() < m_nDate) return true;

  000c7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000cc	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000d6	3b 01		 cmp	 eax, DWORD PTR [rcx]
  000d8	7d 07		 jge	 SHORT $LN9@isCompare
  000da	b0 01		 mov	 al, 1
  000dc	e9 28 01 00 00	 jmp	 $LN1@isCompare
$LN9@isCompare:

; 152  : 		if (pCompare->getDate() > m_nDate) return false;

  000e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000e6	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  000eb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000f0	3b 01		 cmp	 eax, DWORD PTR [rcx]
  000f2	7e 07		 jle	 SHORT $LN10@isCompare
  000f4	32 c0		 xor	 al, al
  000f6	e9 0e 01 00 00	 jmp	 $LN1@isCompare
$LN10@isCompare:

; 153  : 		if (pCompare->getTime() < m_nTime) return true; return false;

  000fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00100	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  00105	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0010a	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  0010d	7d 07		 jge	 SHORT $LN11@isCompare
  0010f	b0 01		 mov	 al, 1
  00111	e9 f3 00 00 00	 jmp	 $LN1@isCompare
$LN11@isCompare:
  00116	32 c0		 xor	 al, al
  00118	e9 ec 00 00 00	 jmp	 $LN1@isCompare
$LN12@isCompare:

; 154  : 	case eOperator_LT:
; 155  : 		if (pCompare->getDate() > m_nDate) return true;

  0011d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00122	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00127	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0012c	3b 01		 cmp	 eax, DWORD PTR [rcx]
  0012e	7e 07		 jle	 SHORT $LN13@isCompare
  00130	b0 01		 mov	 al, 1
  00132	e9 d2 00 00 00	 jmp	 $LN1@isCompare
$LN13@isCompare:

; 156  : 		if (pCompare->getDate() < m_nDate) return false;

  00137	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  0013c	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00141	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00146	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00148	7d 07		 jge	 SHORT $LN14@isCompare
  0014a	32 c0		 xor	 al, al
  0014c	e9 b8 00 00 00	 jmp	 $LN1@isCompare
$LN14@isCompare:

; 157  : 		if (pCompare->getTime() > m_nTime) return true; return false;

  00151	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00156	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  0015b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00160	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  00163	7e 07		 jle	 SHORT $LN15@isCompare
  00165	b0 01		 mov	 al, 1
  00167	e9 9d 00 00 00	 jmp	 $LN1@isCompare
$LN15@isCompare:
  0016c	32 c0		 xor	 al, al
  0016e	e9 96 00 00 00	 jmp	 $LN1@isCompare
$LN16@isCompare:

; 158  : 	case eOperator_GE:
; 159  : 		if (pCompare->getDate() < m_nDate) return true;

  00173	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00178	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  0017d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00182	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00184	7d 04		 jge	 SHORT $LN17@isCompare
  00186	b0 01		 mov	 al, 1
  00188	eb 7f		 jmp	 SHORT $LN1@isCompare
$LN17@isCompare:

; 160  : 		if (pCompare->getDate() > m_nDate) return false;

  0018a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  0018f	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00194	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00199	3b 01		 cmp	 eax, DWORD PTR [rcx]
  0019b	7e 04		 jle	 SHORT $LN18@isCompare
  0019d	32 c0		 xor	 al, al
  0019f	eb 68		 jmp	 SHORT $LN1@isCompare
$LN18@isCompare:

; 161  : 		if (pCompare->getTime() <= m_nTime) return true; return false;

  001a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001a6	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  001ab	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001b0	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  001b3	7f 04		 jg	 SHORT $LN19@isCompare
  001b5	b0 01		 mov	 al, 1
  001b7	eb 50		 jmp	 SHORT $LN1@isCompare
$LN19@isCompare:
  001b9	32 c0		 xor	 al, al
  001bb	eb 4c		 jmp	 SHORT $LN1@isCompare
$LN20@isCompare:

; 162  : 	case eOperator_LE:
; 163  : 		if (pCompare->getDate() > m_nDate) return true;

  001bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001c2	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  001c7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001cc	3b 01		 cmp	 eax, DWORD PTR [rcx]
  001ce	7e 04		 jle	 SHORT $LN21@isCompare
  001d0	b0 01		 mov	 al, 1
  001d2	eb 35		 jmp	 SHORT $LN1@isCompare
$LN21@isCompare:

; 164  : 		if (pCompare->getDate() < m_nDate) return false;

  001d4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001d9	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  001de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001e3	3b 01		 cmp	 eax, DWORD PTR [rcx]
  001e5	7d 04		 jge	 SHORT $LN22@isCompare
  001e7	32 c0		 xor	 al, al
  001e9	eb 1e		 jmp	 SHORT $LN1@isCompare
$LN22@isCompare:

; 165  : 		if (pCompare->getTime() >= m_nTime) return true; return false;

  001eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001f0	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  001f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001fa	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  001fd	7c 04		 jl	 SHORT $LN23@isCompare
  001ff	b0 01		 mov	 al, 1
  00201	eb 06		 jmp	 SHORT $LN1@isCompare
$LN23@isCompare:
  00203	32 c0		 xor	 al, al
  00205	eb 02		 jmp	 SHORT $LN1@isCompare
$LN2@isCompare:

; 166  : 	}
; 167  : 	return false;

  00207	32 c0		 xor	 al, al
$LN1@isCompare:

; 168  : }

  00209	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0020d	5f		 pop	 rdi
  0020e	c3		 ret	 0
  0020f	90		 npad	 1
$LN25@isCompare:
  00210	00 00 00 00	 DD	 $LN4@isCompare
  00214	00 00 00 00	 DD	 $LN6@isCompare
  00218	00 00 00 00	 DD	 $LN8@isCompare
  0021c	00 00 00 00	 DD	 $LN12@isCompare
  00220	00 00 00 00	 DD	 $LN16@isCompare
  00224	00 00 00 00	 DD	 $LN20@isCompare
?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z ENDP	; CFileTime::isCompare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
szDate$ = 56
sysTm$ = 104
__$ArrayPad$ = 144
this$ = 176
pftWrite$ = 184
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z PROC	; CFileTime::setFileTime

; 84   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+176]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 85   : 	TCHAR szDate[16];
; 86   : 
; 87   : 	SYSTEMTIME	sysTm;
; 88   : 	FileTimeToSystemTime(pftWrite, &sysTm);

  0003b	48 8d 54 24 68	 lea	 rdx, QWORD PTR sysTm$[rsp]
  00040	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR pftWrite$[rsp]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FileTimeToSystemTime

; 89   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  0004e	0f b7 44 24 6e	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  00053	0f b7 4c 24 6a	 movzx	 ecx, WORD PTR sysTm$[rsp+2]
  00058	0f b7 54 24 68	 movzx	 edx, WORD PTR sysTm$[rsp]
  0005d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00061	44 8b c9	 mov	 r9d, ecx
  00064	44 8b c2	 mov	 r8d, edx
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81221
  0006e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szDate$[rsp]
  00073	e8 00 00 00 00	 call	 sprintf

; 90   : 	m_nDate = atoi(szDate);

  00078	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szDate$[rsp]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00083	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008b	89 01		 mov	 DWORD PTR [rcx], eax

; 91   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  0008d	0f b7 44 24 74	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  00092	0f b7 4c 24 72	 movzx	 ecx, WORD PTR sysTm$[rsp+10]
  00097	0f b7 54 24 70	 movzx	 edx, WORD PTR sysTm$[rsp+8]
  0009c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a0	44 8b c9	 mov	 r9d, ecx
  000a3	44 8b c2	 mov	 r8d, edx
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81222
  000ad	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szDate$[rsp]
  000b2	e8 00 00 00 00	 call	 sprintf

; 92   : 	m_nTime = atoi(szDate);

  000b7	48 8d 4c 24 38	 lea	 rcx, QWORD PTR szDate$[rsp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000c2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ca	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 93   : 	return 1;

  000cd	b8 01 00 00 00	 mov	 eax, 1

; 94   : }

  000d2	8b f8		 mov	 edi, eax
  000d4	48 8b cc	 mov	 rcx, rsp
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z$rtcFrameData
  000de	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e3	8b c7		 mov	 eax, edi
  000e5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ed	48 33 cc	 xor	 rcx, rsp
  000f0	e8 00 00 00 00	 call	 __security_check_cookie
  000f5	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000fc	5f		 pop	 rdi
  000fd	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z ENDP	; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
gm_timeInfo$ = 48
sMtm$ = 72
szDate$ = 136
__$ArrayPad$ = 176
this$ = 208
fileTime$ = 216
?setFileTime@CFileTime@@QEAAHPEA_J@Z PROC		; CFileTime::setFileTime

; 118  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+208]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 119  : 	struct	tm *gm_timeInfo, sMtm;
; 120  : 	TCHAR szDate[16];
; 121  : #ifndef WIN32
; 122  : 	gm_timeInfo = gmtime_r(&fileTime, gm_timeInfo);
; 123  : #else
; 124  : 	gm_timeInfo = gmtime(fileTime);

  0003b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR fileTime$[rsp]
  00043	e8 00 00 00 00	 call	 gmtime
  00048	48 89 44 24 30	 mov	 QWORD PTR gm_timeInfo$[rsp], rax

; 125  : 	memcpy(&sMtm, gm_timeInfo, sizeof(sMtm));

  0004d	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00053	48 8b 54 24 30	 mov	 rdx, QWORD PTR gm_timeInfo$[rsp]
  00058	48 8d 4c 24 48	 lea	 rcx, QWORD PTR sMtm$[rsp]
  0005d	e8 00 00 00 00	 call	 memcpy

; 126  : #endif
; 127  : 	sMtm.tm_year += 1900;

  00062	8b 44 24 5c	 mov	 eax, DWORD PTR sMtm$[rsp+20]
  00066	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0006b	89 44 24 5c	 mov	 DWORD PTR sMtm$[rsp+20], eax

; 128  : 	sMtm.tm_mon += 1;

  0006f	8b 44 24 58	 mov	 eax, DWORD PTR sMtm$[rsp+16]
  00073	ff c0		 inc	 eax
  00075	89 44 24 58	 mov	 DWORD PTR sMtm$[rsp+16], eax

; 129  : 
; 130  : 	_stprintf(szDate, "%04d%02d%02d", sMtm.tm_year, sMtm.tm_mon, sMtm.tm_mday);

  00079	8b 44 24 54	 mov	 eax, DWORD PTR sMtm$[rsp+12]
  0007d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00081	44 8b 4c 24 58	 mov	 r9d, DWORD PTR sMtm$[rsp+16]
  00086	44 8b 44 24 5c	 mov	 r8d, DWORD PTR sMtm$[rsp+20]
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81243
  00092	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  0009a	e8 00 00 00 00	 call	 sprintf

; 131  : 	m_nDate = atoi(szDate);

  0009f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000ad	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b5	89 01		 mov	 DWORD PTR [rcx], eax

; 132  : 	_stprintf(szDate, "%02d%02d%02d", sMtm.tm_hour, sMtm.tm_min, sMtm.tm_sec);

  000b7	8b 44 24 48	 mov	 eax, DWORD PTR sMtm$[rsp]
  000bb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bf	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR sMtm$[rsp+4]
  000c4	44 8b 44 24 50	 mov	 r8d, DWORD PTR sMtm$[rsp+8]
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81244
  000d0	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  000d8	e8 00 00 00 00	 call	 sprintf

; 133  : 	m_nTime = atoi(szDate);

  000dd	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000eb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f3	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 134  : 	printf("gm time and date : %s\n", asctime(gm_timeInfo));

  000f6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gm_timeInfo$[rsp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_asctime
  00101	48 8b d0	 mov	 rdx, rax
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81245
  0010b	e8 00 00 00 00	 call	 printf

; 135  : 
; 136  : 	return 1;

  00110	b8 01 00 00 00	 mov	 eax, 1

; 137  : }

  00115	8b f8		 mov	 edi, eax
  00117	48 8b cc	 mov	 rcx, rsp
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?setFileTime@CFileTime@@QEAAHPEA_J@Z$rtcFrameData
  00121	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00126	8b c7		 mov	 eax, edi
  00128	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00130	48 33 cc	 xor	 rcx, rsp
  00133	e8 00 00 00 00	 call	 __security_check_cookie
  00138	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0013f	5f		 pop	 rdi
  00140	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEA_J@Z ENDP		; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
m_tm$ = 72
ltm$ = 120
szDate$ = 136
ftWrite$ = 184
hFile$ = 200
sysTm$ = 216
__$ArrayPad$ = 256
this$ = 288
pFilePath$ = 296
?setFileTime@CFileTime@@QEAAHPEAD@Z PROC		; CFileTime::setFileTime

; 51   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00012	48 8b fc	 mov	 rdi, rsp
  00015	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  0001a	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001f	f3 ab		 rep stosd
  00021	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR [rsp+288]
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 52   : 	struct	tm	m_tm, *ltm = &m_tm;

  0003b	48 8d 44 24 48	 lea	 rax, QWORD PTR m_tm$[rsp]
  00040	48 89 44 24 78	 mov	 QWORD PTR ltm$[rsp], rax

; 53   : 	TCHAR szDate[16];
; 54   : 	FILETIME ftWrite;
; 55   : 	HANDLE hFile = CreateFile(pFilePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

  00045	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0004e	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  00056	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  0005e	45 33 c9	 xor	 r9d, r9d
  00061	41 b8 01 00 00
	00		 mov	 r8d, 1
  00067	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  0006c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR pFilePath$[rsp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  0007a	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR hFile$[rsp], rax

; 56   : 	if (hFile == INVALID_HANDLE_VALUE) {

  00082	48 83 bc 24 c8
	00 00 00 ff	 cmp	 QWORD PTR hFile$[rsp], -1
  0008b	75 0a		 jne	 SHORT $LN2@setFileTim

; 57   : 		return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	e9 ef 00 00 00	 jmp	 $LN1@setFileTim
$LN2@setFileTim:

; 58   : 	}
; 59   : 
; 60   : 	if (!GetFileTime(hFile, NULL, NULL, &ftWrite)) {

  00097	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR ftWrite$[rsp]
  0009f	45 33 c0	 xor	 r8d, r8d
  000a2	33 d2		 xor	 edx, edx
  000a4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileTime
  000b2	85 c0		 test	 eax, eax
  000b4	75 0a		 jne	 SHORT $LN3@setFileTim

; 61   : 		return -2;

  000b6	b8 fe ff ff ff	 mov	 eax, -2
  000bb	e9 c6 00 00 00	 jmp	 $LN1@setFileTim
$LN3@setFileTim:

; 62   : 	}
; 63   : 
; 64   : 	//SYSTEMTIME	sysTm, localTime;
; 65   : 	SYSTEMTIME	sysTm;
; 66   : 	FileTimeToSystemTime(&ftWrite, &sysTm);  // UTC SystemTime

  000c0	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR sysTm$[rsp]
  000c8	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR ftWrite$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FileTimeToSystemTime

; 67   : 	//SystemTimeToTzSpecificLocalTime(NULL, &sysTm, &localTime);	// KTC LocalTime
; 68   : 
; 69   : 	//_stprintf(szDate, "%04d%02d%02d", localTime.wYear, localTime.wMonth, localTime.wDay);
; 70   : 	//m_nDate = atoi(szDate);
; 71   : 	//_stprintf(szDate, "%02d%02d%02d", localTime.wHour, localTime.wMinute, localTime.wSecond);
; 72   : 	//m_nTime = atoi(szDate);
; 73   : 
; 74   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  000d6	0f b7 84 24 de
	00 00 00	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  000de	0f b7 8c 24 da
	00 00 00	 movzx	 ecx, WORD PTR sysTm$[rsp+2]
  000e6	0f b7 94 24 d8
	00 00 00	 movzx	 edx, WORD PTR sysTm$[rsp]
  000ee	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000f2	44 8b c9	 mov	 r9d, ecx
  000f5	44 8b c2	 mov	 r8d, edx
  000f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81213
  000ff	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00107	e8 00 00 00 00	 call	 sprintf

; 75   : 	m_nDate = atoi(szDate);

  0010c	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0011a	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00122	89 01		 mov	 DWORD PTR [rcx], eax

; 76   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  00124	0f b7 84 24 e4
	00 00 00	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  0012c	0f b7 8c 24 e2
	00 00 00	 movzx	 ecx, WORD PTR sysTm$[rsp+10]
  00134	0f b7 94 24 e0
	00 00 00	 movzx	 edx, WORD PTR sysTm$[rsp+8]
  0013c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00140	44 8b c9	 mov	 r9d, ecx
  00143	44 8b c2	 mov	 r8d, edx
  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81214
  0014d	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00155	e8 00 00 00 00	 call	 sprintf

; 77   : 	m_nTime = atoi(szDate);

  0015a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00168	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00170	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 78   : 
; 79   : 	CloseHandle(hFile);

  00173	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR hFile$[rsp]
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 80   : 	return 1;

  00181	b8 01 00 00 00	 mov	 eax, 1
$LN1@setFileTim:

; 81   : }

  00186	48 8b f8	 mov	 rdi, rax
  00189	48 8b cc	 mov	 rcx, rsp
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?setFileTime@CFileTime@@QEAAHPEAD@Z$rtcFrameData
  00193	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00198	48 8b c7	 mov	 rax, rdi
  0019b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a3	48 33 cc	 xor	 rcx, rsp
  001a6	e8 00 00 00 00	 call	 __security_check_cookie
  001ab	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  001b2	5f		 pop	 rdi
  001b3	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEAD@Z ENDP		; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 16
??1CFileTime@@QEAA@XZ PROC				; CFileTime::~CFileTime

; 140  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 141  : }

  00006	5f		 pop	 rdi
  00007	c3		 ret	 0
??1CFileTime@@QEAA@XZ ENDP				; CFileTime::~CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
this$ = 16
??0CFileTime@@QEAA@XZ PROC				; CFileTime::CFileTime

; 47   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi

; 48   : }

  00006	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0000b	5f		 pop	 rdi
  0000c	c3		 ret	 0
??0CFileTime@@QEAA@XZ ENDP				; CFileTime::CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
ft$ = 40
myFileTime$ = 72
__$ArrayPad$ = 96
cur$ = 128
bMicro$ = 136
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z PROC		; Misc::getFileTime

; 441  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 1c 00 00 00	 mov	 ecx, 28
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR [rsp+128]
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 442  : 	FILETIME ft;
; 443  : 	union
; 444  : 	{
; 445  : 		FILETIME asFileTime;
; 446  : 		u_int64 asInt64;
; 447  : 	} myFileTime;
; 448  : 	GetSystemTimeAsFileTime(&ft);

  00034	48 8d 4c 24 28	 lea	 rcx, QWORD PTR ft$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTimeAsFileTime

; 449  : 	myFileTime.asFileTime = ft;

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR ft$[rsp]
  00044	48 89 44 24 48	 mov	 QWORD PTR myFileTime$[rsp], rax

; 450  : 	//unsigned long long tt = ft.dwHighDateTime;
; 451  : 	//tt <<= 32;
; 452  : 	//tt |= ft.dwLowDateTime;
; 453  : 	myFileTime.asInt64 -= DELTA_EPOCH_IN_MICROSECS;

  00049	48 b8 00 40 86
	48 96 5e 29 00	 mov	 rax, 11644473600000000	; 00295e9648864000H
  00053	48 8b 4c 24 48	 mov	 rcx, QWORD PTR myFileTime$[rsp]
  00058	48 2b c8	 sub	 rcx, rax
  0005b	48 8b c1	 mov	 rax, rcx
  0005e	48 89 44 24 48	 mov	 QWORD PTR myFileTime$[rsp], rax

; 454  : 	cur->tv_sec = time(NULL);

  00063	33 c9		 xor	 ecx, ecx
  00065	e8 00 00 00 00	 call	 time
  0006a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cur$[rsp]
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax

; 455  : 	if (bMicro) {

  00075	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR bMicro$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 33		 je	 SHORT $LN2@getFileTim

; 456  : 		myFileTime.asInt64 /= 10; // microtime

  00081	33 d2		 xor	 edx, edx
  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR myFileTime$[rsp]
  00088	b9 0a 00 00 00	 mov	 ecx, 10
  0008d	48 f7 f1	 div	 rcx
  00090	48 89 44 24 48	 mov	 QWORD PTR myFileTime$[rsp], rax

; 457  : 		cur->tv_nsec = myFileTime.asInt64%MICROSEC_PER_SEC;

  00095	33 d2		 xor	 edx, edx
  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR myFileTime$[rsp]
  0009c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000a1	48 f7 f1	 div	 rcx
  000a4	48 8b c2	 mov	 rax, rdx
  000a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cur$[rsp]
  000af	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  000b2	eb 1d		 jmp	 SHORT $LN3@getFileTim
$LN2@getFileTim:

; 458  : 	}
; 459  : 	else cur->tv_nsec = myFileTime.asInt64%10000000L; //(100 nano)

  000b4	33 d2		 xor	 edx, edx
  000b6	48 8b 44 24 48	 mov	 rax, QWORD PTR myFileTime$[rsp]
  000bb	b9 80 96 98 00	 mov	 ecx, 10000000		; 00989680H
  000c0	48 f7 f1	 div	 rcx
  000c3	48 8b c2	 mov	 rax, rdx
  000c6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cur$[rsp]
  000ce	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN3@getFileTim:

; 460  : }

  000d1	48 8b cc	 mov	 rcx, rsp
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z$rtcFrameData
  000db	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e5	48 33 cc	 xor	 rcx, rsp
  000e8	e8 00 00 00 00	 call	 __security_check_cookie
  000ed	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000f1	5f		 pop	 rdi
  000f2	c3		 ret	 0
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z ENDP		; Misc::getFileTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
sysTm$ = 40
__$ArrayPad$ = 80
cur$ = 112
?getmillisec@Misc@@SAXPEAUtimespec@@@Z PROC		; Misc::getmillisec

; 421  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 18 00 00 00	 mov	 ecx, 24
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 422  : #ifndef WIN32
; 423  : 	clock_gettime(CLOCK_REALTIME, cur);
; 424  : 	cur->tv_nsec = cur->tv_nsec%MILLISEC_PER_SEC;
; 425  : #else
; 426  : 	SYSTEMTIME	sysTm;
; 427  : 	GetSystemTime(&sysTm);

  0002d	48 8d 4c 24 28	 lea	 rcx, QWORD PTR sysTm$[rsp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 428  : 	cur->tv_sec = time(NULL);

  00038	33 c9		 xor	 ecx, ecx
  0003a	e8 00 00 00 00	 call	 time
  0003f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cur$[rsp]
  00044	48 89 01	 mov	 QWORD PTR [rcx], rax

; 429  : 	cur->tv_nsec = sysTm.wMilliseconds;

  00047	0f b7 44 24 36	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  0004c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cur$[rsp]
  00051	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 430  : #endif
; 431  : }

  00054	48 8b cc	 mov	 rcx, rsp
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?getmillisec@Misc@@SAXPEAUtimespec@@@Z$rtcFrameData
  0005e	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00068	48 33 cc	 xor	 rcx, rsp
  0006b	e8 00 00 00 00	 call	 __security_check_cookie
  00070	48 83 c4 60	 add	 rsp, 96			; 00000060H
  00074	5f		 pop	 rdi
  00075	c3		 ret	 0
?getmillisec@Misc@@SAXPEAUtimespec@@@Z ENDP		; Misc::getmillisec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
start$ = 16
stop$ = 24
result$ = 32
unit$ = 40
?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z PROC	; Misc::timespec_diff

; 408  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi

; 409  : 	if ((stop->tv_nsec - start->tv_nsec) < 0) {

  00015	48 8b 44 24 18	 mov	 rax, QWORD PTR stop$[rsp]
  0001a	48 8b 4c 24 10	 mov	 rcx, QWORD PTR start$[rsp]
  0001f	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00022	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00025	2b c1		 sub	 eax, ecx
  00027	85 c0		 test	 eax, eax
  00029	7d 3e		 jge	 SHORT $LN2@timespec_d

; 410  : 		result->tv_sec = stop->tv_sec - start->tv_sec - 1;

  0002b	48 8b 44 24 18	 mov	 rax, QWORD PTR stop$[rsp]
  00030	48 8b 4c 24 10	 mov	 rcx, QWORD PTR start$[rsp]
  00035	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 2b c1	 sub	 rax, rcx
  0003e	48 ff c8	 dec	 rax
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00046	48 89 01	 mov	 QWORD PTR [rcx], rax

; 411  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec + unit;

  00049	48 8b 44 24 18	 mov	 rax, QWORD PTR stop$[rsp]
  0004e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR start$[rsp]
  00053	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00056	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00059	2b c1		 sub	 eax, ecx
  0005b	03 44 24 28	 add	 eax, DWORD PTR unit$[rsp]
  0005f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00064	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 412  : 	}
; 413  : 	else {

  00067	eb 35		 jmp	 SHORT $LN3@timespec_d
$LN2@timespec_d:

; 414  : 		result->tv_sec = stop->tv_sec - start->tv_sec;

  00069	48 8b 44 24 18	 mov	 rax, QWORD PTR stop$[rsp]
  0006e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR start$[rsp]
  00073	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00076	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00079	48 2b c1	 sub	 rax, rcx
  0007c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00081	48 89 01	 mov	 QWORD PTR [rcx], rax

; 415  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec;

  00084	48 8b 44 24 18	 mov	 rax, QWORD PTR stop$[rsp]
  00089	48 8b 4c 24 10	 mov	 rcx, QWORD PTR start$[rsp]
  0008e	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00091	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00094	2b c1		 sub	 eax, ecx
  00096	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  0009b	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN3@timespec_d:

; 416  : 	}
; 417  : }

  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z ENDP	; Misc::timespec_diff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
iuSec$ = 48
?u_Sleep@Misc@@SAXH@Z PROC				; Misc::u_Sleep

; 399  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 08 00 00 00	 mov	 ecx, 8
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR [rsp+48]

; 400  : #ifndef WIN32
; 401  : 	usleep(iuSec);
; 402  : #else
; 403  : 	Sleep(iuSec/1000);

  0001c	8b 44 24 30	 mov	 eax, DWORD PTR iuSec$[rsp]
  00020	99		 cdq
  00021	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00026	f7 f9		 idiv	 ecx
  00028	8b c8		 mov	 ecx, eax
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 404  : #endif
; 405  : }

  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?u_Sleep@Misc@@SAXH@Z ENDP				; Misc::u_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
_TEXT	SEGMENT
iMiliSec$ = 48
?m_Sleep@Misc@@SAXH@Z PROC				; Misc::m_Sleep

; 390  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 08 00 00 00	 mov	 ecx, 8
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR [rsp+48]

; 391  : #ifndef WIN32
; 392  : 	usleep(iMiliSec * 1000);
; 393  : #else
; 394  : 	Sleep(iMiliSec);

  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR iMiliSec$[rsp]
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 395  : #endif
; 396  : }

  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5f		 pop	 rdi
  0002b	c3		 ret	 0
?m_Sleep@Misc@@SAXH@Z ENDP				; Misc::m_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
_Tm$ = 48
_Time$ = 56
localtime_s PROC

; 572  :             {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 08 00 00 00	 mov	 ecx, 8
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 573  :                 return _localtime64_s(_Tm, _Time);

  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Time$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Tm$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64_s

; 574  :             }

  00033	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00037	5f		 pop	 rdi
  00038	c3		 ret	 0
localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
time	PROC

; 534  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 535  :             return _time64(_Time);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 536  :         }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
gmtime	PROC

; 497  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 08 00 00 00	 mov	 ecx, 8
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 498  :             #pragma warning(push)
; 499  :             #pragma warning(disable: 4996)
; 500  :             return _gmtime64(_Time);

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64

; 501  :             #pragma warning(pop)
; 502  :         }

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
__$ArrayPad$ = 80
_Buffer$ = 112
_Format$ = 120
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0003c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  00041	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00049	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0004e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Format$[rsp]
  0005b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00060	e8 00 00 00 00	 call	 _vsprintf_l
  00065	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00069	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

  00072	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1788 : }

  00076	8b f8		 mov	 edi, eax
  00078	48 8b cc	 mov	 rcx, rsp
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf$rtcFrameData
  00082	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00087	8b c7		 mov	 eax, edi
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008e	48 33 cc	 xor	 rcx, rsp
  00091	e8 00 00 00 00	 call	 __security_check_cookie
  00096	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0003c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00041	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0004d	e8 00 00 00 00	 call	 _vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 83 c8 01	 or	 rax, 1
  00039	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0003e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00043	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00048	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  00052	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00057	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00065	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00069	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  0006e	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00070	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00078	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0007a	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  0007e	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00082	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1391 : }

  00086	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
__$ArrayPad$ = 80
_Format$ = 112
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  0003c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  00041	48 8d 44 24 78	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00046	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00056	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Format$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _vfprintf_l
  0006b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

  00078	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 957  : }

  0007c	8b f8		 mov	 edi, eax
  0007e	48 8b cc	 mov	 rcx, rsp
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00088	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008d	8b c7		 mov	 eax, edi
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00094	48 33 cc	 xor	 rcx, rsp
  00097	e8 00 00 00 00	 call	 __security_check_cookie
  0009c	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 144  :         {

$LN3:
  00000	40 57		 push	 rdi

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00002	5f		 pop	 rdi
  00003	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00041	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00046	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
  00000	40 57		 push	 rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
