; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_pWorkDir@@3PEADEA				; g_pWorkDir
PUBLIC	?g_pWorkDir2@@3PEADEA				; g_pWorkDir2
PUBLIC	?g_pSystem@@3PEADEA				; g_pSystem
PUBLIC	?g_pProcessName@@3PEADEA			; g_pProcessName
PUBLIC	?g_pProcessConfig@@3PEADEA			; g_pProcessConfig
_BSS	SEGMENT
?g_pWorkDir@@3PEADEA DQ 01H DUP (?)			; g_pWorkDir
?g_pWorkDir2@@3PEADEA DQ 01H DUP (?)			; g_pWorkDir2
?g_pSystem@@3PEADEA DQ 01H DUP (?)			; g_pSystem
?g_pProcessName@@3PEADEA DQ 01H DUP (?)			; g_pProcessName
?g_pProcessConfig@@3PEADEA DQ 01H DUP (?)		; g_pProcessConfig
_BSS	ENDS
CONST	SEGMENT
$SG42133 DB	'SOLUTION_HOME', 00H
	ORG $+2
$SG42139 DB	'.ini', 00H
	ORG $+3
$SG42140 DB	'.ini', 00H
	ORG $+3
$SG42188 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42191 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42194 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42196 DB	'g_pSystem is NULL', 0aH, 00H
CONST	ENDS
PUBLIC	_tcsncpy
PUBLIC	_tcsrchr
PUBLIC	?_tcsrchr@@YAPEADPEADI@Z			; _tcsrchr
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	?FullName@CEnv@@SAHPEBDPEAPEAD@Z		; CEnv::FullName
PUBLIC	?setWorkingDir@CEnv@@SA_NPEAD@Z			; CEnv::setWorkingDir
PUBLIC	?setWorkingDir2@CEnv@@SA_NH@Z			; CEnv::setWorkingDir2
PUBLIC	?initWorkingPath@CEnv@@SA_NXZ			; CEnv::initWorkingPath
PUBLIC	?initSystem@CEnv@@SAHPEAD@Z			; CEnv::initSystem
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp__mbsnbcpy:PROC
EXTRN	__imp__mbsrchr:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_getenv:PROC
EXTRN	??_U@YAPEAX_KAEBUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	GetModuleFileNameExA:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsncpy DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_tcsncpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsrchr DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$_tcsrchr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcsrchr@@YAPEADPEADI@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?_tcsrchr@@YAPEADPEADI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+4
	DD	imagerel $unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+162
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+140
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$?FullName@CEnv@@SAHPEBDPEAPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+175
	DD	imagerel $unwind$?FullName@CEnv@@SAHPEBDPEAPEAD@Z
$pdata$?setWorkingDir@CEnv@@SA_NPEAD@Z DD imagerel $LN9
	DD	imagerel $LN9+228
	DD	imagerel $unwind$?setWorkingDir@CEnv@@SA_NPEAD@Z
$pdata$?setWorkingDir2@CEnv@@SA_NH@Z DD imagerel $LN10
	DD	imagerel $LN10+370
	DD	imagerel $unwind$?setWorkingDir2@CEnv@@SA_NH@Z
$pdata$?initWorkingPath@CEnv@@SA_NXZ DD imagerel $LN13
	DD	imagerel $LN13+799
	DD	imagerel $unwind$?initWorkingPath@CEnv@@SA_NXZ
$pdata$?initSystem@CEnv@@SAHPEAD@Z DD imagerel $LN11
	DD	imagerel $LN11+342
	DD	imagerel $unwind$?initSystem@CEnv@@SAHPEAD@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
	ORG $+1
?initWorkingPath@CEnv@@SA_NXZ$rtcName$0 DB 073H		; CEnv::initWorkingPath
	DB	07aH
	DB	042H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?initWorkingPath@CEnv@@SA_NXZ$rtcVarDesc DD 030H	; CEnv::initWorkingPath
	DD	080H
	DQ	FLAT:?initWorkingPath@CEnv@@SA_NXZ$rtcName$0
	ORG $+48
?initWorkingPath@CEnv@@SA_NXZ$rtcFrameData DD 01H	; CEnv::initWorkingPath
	DD	00H
	DQ	FLAT:?initWorkingPath@CEnv@@SA_NXZ$rtcVarDesc
?initSystem@CEnv@@SAHPEAD@Z$rtcName$0 DB 073H		; CEnv::initSystem
	DB	07aH
	DB	043H
	DB	06fH
	DB	06eH
	DB	066H
	DB	069H
	DB	067H
	DB	00H
	ORG $+7
?initSystem@CEnv@@SAHPEAD@Z$rtcVarDesc DD 040H		; CEnv::initSystem
	DD	080H
	DQ	FLAT:?initSystem@CEnv@@SAHPEAD@Z$rtcName$0
	ORG $+48
?initSystem@CEnv@@SAHPEAD@Z$rtcFrameData DD 01H		; CEnv::initSystem
	DD	00H
	DQ	FLAT:?initSystem@CEnv@@SAHPEAD@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?FullName@CEnv@@SAHPEBDPEAPEAD@Z DD 022301H
	DD	0700b720fH
$unwind$?setWorkingDir@CEnv@@SA_NPEAD@Z DD 021e01H
	DD	07006720aH
$unwind$?setWorkingDir2@CEnv@@SA_NH@Z DD 021c01H
	DD	070059209H
$unwind$?initWorkingPath@CEnv@@SA_NXZ DD 032a19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?initSystem@CEnv@@SAHPEAD@Z DD 033619H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 023c19H
	DD	07015b219H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sprintf$rtcName$0
	ORG $+48
sprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 023c19H
	DD	07015b219H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcsrchr@@YAPEADPEADI@Z DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsrchr DD 022201H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsncpy DD 022801H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
nLen$ = 32
szConfig$ = 64
$T4 = 208
__$ArrayPad$ = 216
pDir$ = 240
?initSystem@CEnv@@SAHPEAD@Z PROC			; CEnv::initSystem

; 152  : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b fc	 mov	 rdi, rsp
  00010	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	f3 ab		 rep stosd
  0001c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR [rsp+240]
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002b	48 33 c4	 xor	 rax, rsp
  0002e	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 153  : 	if (g_pSystem) return 1;

  00036	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pSystem@@3PEADEA, 0 ; g_pSystem
  0003e	74 0a		 je	 SHORT $LN2@initSystem
  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	e9 de 00 00 00	 jmp	 $LN1@initSystem
$LN2@initSystem:

; 154  : 
; 155  : 	int nLen;
; 156  : 	TCHAR szConfig[128];
; 157  : 	if (pDir) {

  0004a	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR pDir$[rsp], 0
  00053	74 1f		 je	 SHORT $LN3@initSystem

; 158  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), pDir);

  00055	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR pDir$[rsp]
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42188
  00064	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szConfig$[rsp]
  00069	e8 00 00 00 00	 call	 sprintf
  0006e	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
  00072	eb 56		 jmp	 SHORT $LN4@initSystem
$LN3@initSystem:

; 159  : 	}
; 160  : 	else if (g_pWorkDir) {

  00074	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  0007c	74 1e		 je	 SHORT $LN5@initSystem

; 161  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  0007e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42191
  0008c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szConfig$[rsp]
  00091	e8 00 00 00 00	 call	 sprintf
  00096	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax

; 162  : 	}
; 163  : 	else {

  0009a	eb 2e		 jmp	 SHORT $LN6@initSystem
$LN5@initSystem:

; 164  : 		if (CEnv::initWorkingPath()) {

  0009c	e8 00 00 00 00	 call	 ?initWorkingPath@CEnv@@SA_NXZ ; CEnv::initWorkingPath
  000a1	0f b6 c0	 movzx	 eax, al
  000a4	85 c0		 test	 eax, eax
  000a6	74 1e		 je	 SHORT $LN7@initSystem

; 165  : 			nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  000a8	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42194
  000b6	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szConfig$[rsp]
  000bb	e8 00 00 00 00	 call	 sprintf
  000c0	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
  000c4	eb 04		 jmp	 SHORT $LN8@initSystem
$LN7@initSystem:

; 166  : 		}
; 167  : 		else return 0;

  000c6	33 c0		 xor	 eax, eax
  000c8	eb 5e		 jmp	 SHORT $LN1@initSystem
$LN8@initSystem:
$LN6@initSystem:
$LN4@initSystem:

; 168  : 	}
; 169  : 	g_pSystem = new (std::nothrow) TCHAR[nLen + 1];

  000ca	8b 44 24 20	 mov	 eax, DWORD PTR nLen$[rsp]
  000ce	ff c0		 inc	 eax
  000d0	48 98		 cdqe
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000e1	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  000e9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  000f1	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pSystem@@3PEADEA, rax ; g_pSystem

; 170  : 	if (!g_pSystem) {

  000f8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pSystem@@3PEADEA, 0 ; g_pSystem
  00100	75 10		 jne	 SHORT $LN9@initSystem

; 171  : 		printf("g_pSystem is NULL\n");

  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG42196
  00109	e8 00 00 00 00	 call	 printf

; 172  : 		return 0;

  0010e	33 c0		 xor	 eax, eax
  00110	eb 16		 jmp	 SHORT $LN1@initSystem
$LN9@initSystem:

; 173  : 	}
; 174  : 	_tcscpy(g_pSystem, szConfig);

  00112	48 8d 54 24 40	 lea	 rdx, QWORD PTR szConfig$[rsp]
  00117	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pSystem@@3PEADEA ; g_pSystem
  0011e	e8 00 00 00 00	 call	 strcpy

; 175  : 
; 176  : 	return 1;

  00123	b8 01 00 00 00	 mov	 eax, 1
$LN1@initSystem:

; 177  : }

  00128	48 8b f8	 mov	 rdi, rax
  0012b	48 8b cc	 mov	 rcx, rsp
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?initSystem@CEnv@@SAHPEAD@Z$rtcFrameData
  00135	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0013a	48 8b c7	 mov	 rax, rdi
  0013d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00145	48 33 cc	 xor	 rcx, rsp
  00148	e8 00 00 00 00	 call	 __security_check_cookie
  0014d	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
?initSystem@CEnv@@SAHPEAD@Z ENDP			; CEnv::initSystem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
szBuf$ = 48
nLen$ = 184
nLen2$ = 192
pPos$ = 200
pDot$ = 208
pRear$4 = 216
$T5 = 232
$T6 = 240
$T7 = 248
__$ArrayPad$ = 256
?initWorkingPath@CEnv@@SA_NXZ PROC			; CEnv::initWorkingPath

; 37   : {

$LN13:
  00000	40 57		 push	 rdi
  00002	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 38   : 	if (g_pWorkDir) return true;

  0002a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00032	74 07		 je	 SHORT $LN2@initWorkin
  00034	b0 01		 mov	 al, 1
  00036	e9 b6 02 00 00	 jmp	 $LN1@initWorkin
$LN2@initWorkin:

; 39   : 
; 40   : 	// setting working path
; 41   : 
; 42   : 	TCHAR szBuf[128];
; 43   : 	size_t nLen = 0, nLen2=0;

  0003b	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR nLen$[rsp], 0
  00047	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR nLen2$[rsp], 0

; 44   : 	TCHAR *pPos = _tgetenv(SOLUTION_HOME);

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG42133
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  00060	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pPos$[rsp], rax

; 45   : 	TCHAR *pDot;
; 46   : 	if (pPos) {

  00068	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pPos$[rsp], 0
  00071	74 1a		 je	 SHORT $LN3@initWorkin

; 47   : 		nLen = _tcslen(pPos);

  00073	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pPos$[rsp]
  0007b	e8 00 00 00 00	 call	 strlen
  00080	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR nLen$[rsp], rax

; 48   : 	}
; 49   : 	else {

  00088	e9 b0 01 00 00	 jmp	 $LN4@initWorkin
$LN3@initWorkin:

; 50   : 
; 51   : #ifdef WIN32
; 52   : 		nLen = GetModuleFileNameEx(GetCurrentProcess(), NULL, szBuf, 128);

  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00093	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  00099	4c 8d 44 24 30	 lea	 r8, QWORD PTR szBuf$[rsp]
  0009e	33 d2		 xor	 edx, edx
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 GetModuleFileNameExA
  000a8	8b c0		 mov	 eax, eax
  000aa	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR nLen$[rsp], rax

; 53   : 		//HANDLE process_handle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION,FALSE,GetCurrentProcessId());
; 54   : 		//DWORD BufSize;
; 55   : 		//if (process_handle) {
; 56   : 		//	if (QueryFullProcessImageName(process_handle, 0, szBuf, &BufSize)) {
; 57   : 		//		nLen = BufSize;
; 58   : 		//	}
; 59   : 		//	else {
; 60   : 		//		//gs_cLogger.DebugLog(LEVEL_ERROR, "QueryFullProcessImageName is FAIL!");
; 61   : 		//	}
; 62   : 		//	CloseHandle(process_handle);			
; 63   : 		//}
; 64   : 
; 65   : #else
; 66   : 		if (argv0) {
; 67   : 			if (realpath(argv0, szBuf))	nLen = strlen(szBuf);
; 68   : 			else gs_cLogger.DebugLog(LEVEL_ERROR, "realpath [%s]", argv0);
; 69   : 		}
; 70   : 		else {
; 71   : 			nLen = GetProcessFullName(szBuf);
; 72   : 		}
; 73   : #endif
; 74   : 		if (nLen) {

  000b2	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR nLen$[rsp], 0
  000bb	0f 84 7c 01 00
	00		 je	 $LN5@initWorkin

; 75   : 			g_pProcessConfig = new (std::nothrow) TCHAR[nLen + 8];

  000c1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nLen$[rsp]
  000c9	48 83 c0 08	 add	 rax, 8
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000d4	48 8b c8	 mov	 rcx, rax
  000d7	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000dc	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  000e4	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  000ec	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pProcessConfig@@3PEADEA, rax ; g_pProcessConfig

; 76   : 			_tcscpy(g_pProcessConfig, szBuf);

  000f3	48 8d 54 24 30	 lea	 rdx, QWORD PTR szBuf$[rsp]
  000f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  000ff	e8 00 00 00 00	 call	 strcpy

; 77   : 			pDot = _tcsrchr(g_pProcessConfig, '.');

  00104	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  00110	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  00115	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR pDot$[rsp], rax

; 78   : 			if(pDot) _tcscpy(pDot, _T(".ini"));

  0011d	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pDot$[rsp], 0
  00126	74 16		 je	 SHORT $LN6@initWorkin
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42139
  0012f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pDot$[rsp]
  00137	e8 00 00 00 00	 call	 strcpy
  0013c	eb 24		 jmp	 SHORT $LN7@initWorkin
$LN6@initWorkin:

; 79   : 			else _stprintf(g_pProcessConfig+nLen, _T(".ini"));

  0013e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nLen$[rsp]
  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  0014d	48 03 c8	 add	 rcx, rax
  00150	48 8b c1	 mov	 rax, rcx
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42140
  0015a	48 8b c8	 mov	 rcx, rax
  0015d	e8 00 00 00 00	 call	 sprintf
$LN7@initWorkin:

; 80   : 
; 81   : 			pPos = _tcsrchr(szBuf, g_s);

  00162	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00167	48 8d 4c 24 30	 lea	 rcx, QWORD PTR szBuf$[rsp]
  0016c	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  00171	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pPos$[rsp], rax

; 82   : 			nLen = pPos - szBuf + 1;

  00179	48 8d 44 24 30	 lea	 rax, QWORD PTR szBuf$[rsp]
  0017e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pPos$[rsp]
  00186	48 2b c8	 sub	 rcx, rax
  00189	48 8b c1	 mov	 rax, rcx
  0018c	48 ff c0	 inc	 rax
  0018f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR nLen$[rsp], rax

; 83   : 			pPos++;

  00197	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pPos$[rsp]
  0019f	48 ff c0	 inc	 rax
  001a2	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pPos$[rsp], rax

; 84   : 			nLen2 = _tcslen(pPos);

  001aa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pPos$[rsp]
  001b2	e8 00 00 00 00	 call	 strlen
  001b7	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR nLen2$[rsp], rax

; 85   : 			g_pProcessName = new (std::nothrow) TCHAR[nLen2 + 1];

  001bf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR nLen2$[rsp]
  001c7	48 ff c0	 inc	 rax
  001ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  001d1	48 8b c8	 mov	 rcx, rax
  001d4	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  001d9	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR $T6[rsp], rax
  001e1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  001e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pProcessName@@3PEADEA, rax ; g_pProcessName

; 86   : 			if (g_pProcessName) _tcscpy(g_pProcessName, pPos);

  001f0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pProcessName@@3PEADEA, 0 ; g_pProcessName
  001f8	74 14		 je	 SHORT $LN8@initWorkin
  001fa	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR pPos$[rsp]
  00202	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessName@@3PEADEA ; g_pProcessName
  00209	e8 00 00 00 00	 call	 strcpy
$LN8@initWorkin:

; 87   : 			pDot = _tcsrchr(g_pProcessName, '.');

  0020e	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00213	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessName@@3PEADEA ; g_pProcessName
  0021a	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0021f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR pDot$[rsp], rax

; 88   : 			if (pPos) *pDot = 0;

  00227	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pPos$[rsp], 0
  00230	74 0b		 je	 SHORT $LN9@initWorkin
  00232	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pDot$[rsp]
  0023a	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN9@initWorkin:
$LN5@initWorkin:
$LN4@initWorkin:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if (nLen) {

  0023d	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR nLen$[rsp], 0
  00246	0f 84 a3 00 00
	00		 je	 $LN10@initWorkin

; 93   : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen];

  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00253	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nLen$[rsp]
  0025b	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  00260	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR $T7[rsp], rax
  00268	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR $T7[rsp]
  00270	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, rax ; g_pWorkDir

; 94   : 		if (!g_pWorkDir) {

  00277	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  0027f	75 04		 jne	 SHORT $LN11@initWorkin

; 95   : 			//gs_cLogger.Log_Debug(LOG_ERROR, "new g_pWorkDir");
; 96   : 			return false;

  00281	32 c0		 xor	 al, al
  00283	eb 6c		 jmp	 SHORT $LN1@initWorkin
$LN11@initWorkin:

; 97   : 		}
; 98   : 		TCHAR *pRear = _tcsrchr((TCHAR *)szBuf, g_s);

  00285	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0028a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR szBuf$[rsp]
  0028f	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  00294	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR pRear$4[rsp], rax

; 99   : 		nLen = pRear - szBuf + 1;

  0029c	48 8d 44 24 30	 lea	 rax, QWORD PTR szBuf$[rsp]
  002a1	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pRear$4[rsp]
  002a9	48 2b c8	 sub	 rcx, rax
  002ac	48 8b c1	 mov	 rax, rcx
  002af	48 ff c0	 inc	 rax
  002b2	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR nLen$[rsp], rax

; 100  : 		_tcsncpy(g_pWorkDir, szBuf, nLen);

  002ba	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR nLen$[rsp]
  002c2	48 8d 54 24 30	 lea	 rdx, QWORD PTR szBuf$[rsp]
  002c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  002ce	e8 00 00 00 00	 call	 _tcsncpy

; 101  : 		g_pWorkDir[nLen] = 0;

  002d3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nLen$[rsp]
  002db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  002e2	48 03 c8	 add	 rcx, rax
  002e5	48 8b c1	 mov	 rax, rcx
  002e8	c6 00 00	 mov	 BYTE PTR [rax], 0

; 102  : 		return true;

  002eb	b0 01		 mov	 al, 1
  002ed	eb 02		 jmp	 SHORT $LN1@initWorkin
$LN10@initWorkin:

; 103  : 	}
; 104  : 	
; 105  : 	return false;

  002ef	32 c0		 xor	 al, al
$LN1@initWorkin:

; 106  : }

  002f1	48 8b f8	 mov	 rdi, rax
  002f4	48 8b cc	 mov	 rcx, rsp
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?initWorkingPath@CEnv@@SA_NXZ$rtcFrameData
  002fe	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00303	48 8b c7	 mov	 rax, rdi
  00306	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0030e	48 33 cc	 xor	 rcx, rsp
  00311	e8 00 00 00 00	 call	 __security_check_cookie
  00316	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0031d	5f		 pop	 rdi
  0031e	c3		 ret	 0
?initWorkingPath@CEnv@@SA_NXZ ENDP			; CEnv::initWorkingPath
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
nLen$ = 32
pRear$ = 40
i$ = 48
$T1 = 56
$T2 = 64
tv73 = 72
upCount$ = 96
?setWorkingDir2@CEnv@@SA_NH@Z PROC			; CEnv::setWorkingDir2

; 128  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00009	48 8b fc	 mov	 rdi, rsp
  0000c	b9 14 00 00 00	 mov	 ecx, 20
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	8b 4c 24 60	 mov	 ecx, DWORD PTR [rsp+96]

; 129  : 	if (!g_pWorkDir) {

  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00024	75 07		 jne	 SHORT $LN5@setWorking

; 130  : 		return false;

  00026	32 c0		 xor	 al, al
  00028	e9 3f 01 00 00	 jmp	 $LN1@setWorking
$LN5@setWorking:

; 131  : 	}
; 132  : 	size_t	nLen = (int)_tcslen(g_pWorkDir);

  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00034	e8 00 00 00 00	 call	 strlen
  00039	48 98		 cdqe
  0003b	48 89 44 24 20	 mov	 QWORD PTR nLen$[rsp], rax

; 133  : 	TCHAR *pRear = g_pWorkDir;

  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00047	48 89 44 24 28	 mov	 QWORD PTR pRear$[rsp], rax

; 134  : 	if (g_pWorkDir2) delete g_pWorkDir2;

  0004c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir2@@3PEADEA, 0 ; g_pWorkDir2
  00054	74 45		 je	 SHORT $LN6@setWorking
  00056	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  0005d	48 89 44 24 38	 mov	 QWORD PTR $T1[rsp], rax
  00062	ba 01 00 00 00	 mov	 edx, 1
  00067	48 8b 4c 24 38	 mov	 rcx, QWORD PTR $T1[rsp]
  0006c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00071	48 83 7c 24 38
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00077	75 0b		 jne	 SHORT $LN8@setWorking
  00079	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00082	eb 17		 jmp	 SHORT $LN9@setWorking
$LN8@setWorking:
  00084	48 c7 05 00 00
	00 00 23 81 00
	00		 mov	 QWORD PTR ?g_pWorkDir2@@3PEADEA, 33059 ; g_pWorkDir2, 00008123H
  0008f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00096	48 89 44 24 48	 mov	 QWORD PTR tv73[rsp], rax
$LN9@setWorking:
$LN6@setWorking:

; 135  : 	g_pWorkDir2 = new TCHAR[nLen + 1];

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR nLen$[rsp]
  000a0	48 ff c0	 inc	 rax
  000a3	48 8b c8	 mov	 rcx, rax
  000a6	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  000ab	48 89 44 24 40	 mov	 QWORD PTR $T2[rsp], rax
  000b0	48 8b 44 24 40	 mov	 rax, QWORD PTR $T2[rsp]
  000b5	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir2@@3PEADEA, rax ; g_pWorkDir2

; 136  : 	_tcscpy(g_pWorkDir2, g_pWorkDir);

  000bc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  000ca	e8 00 00 00 00	 call	 strcpy

; 137  : 
; 138  : 	int i;
; 139  : 	for (i = 0; i < upCount; i++) 

  000cf	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000d7	eb 0a		 jmp	 SHORT $LN4@setWorking
$LN2@setWorking:
  000d9	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000dd	ff c0		 inc	 eax
  000df	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@setWorking:
  000e3	8b 44 24 60	 mov	 eax, DWORD PTR upCount$[rsp]
  000e7	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  000eb	7d 20		 jge	 SHORT $LN3@setWorking

; 140  : 	{
; 141  : 		pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  000ed	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  000f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  000f9	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  000fe	48 89 44 24 28	 mov	 QWORD PTR pRear$[rsp], rax

; 142  : 		*pRear = 0;

  00103	48 8b 44 24 28	 mov	 rax, QWORD PTR pRear$[rsp]
  00108	c6 00 00	 mov	 BYTE PTR [rax], 0

; 143  : 	}

  0010b	eb cc		 jmp	 SHORT $LN2@setWorking
$LN3@setWorking:

; 144  : 	pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  0010d	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00119	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0011e	48 89 44 24 28	 mov	 QWORD PTR pRear$[rsp], rax

; 145  : 	nLen = pRear - g_pWorkDir2 + 1;

  00123	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  0012a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pRear$[rsp]
  0012f	48 2b c8	 sub	 rcx, rax
  00132	48 8b c1	 mov	 rax, rcx
  00135	48 ff c0	 inc	 rax
  00138	48 89 44 24 20	 mov	 QWORD PTR nLen$[rsp], rax

; 146  : 
; 147  : 	_tcsncpy(g_pWorkDir2, g_pWorkDir, nLen); g_pWorkDir2[nLen] = 0;

  0013d	4c 8b 44 24 20	 mov	 r8, QWORD PTR nLen$[rsp]
  00142	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00149	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00150	e8 00 00 00 00	 call	 _tcsncpy
  00155	48 8b 44 24 20	 mov	 rax, QWORD PTR nLen$[rsp]
  0015a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00161	48 03 c8	 add	 rcx, rax
  00164	48 8b c1	 mov	 rax, rcx
  00167	c6 00 00	 mov	 BYTE PTR [rax], 0

; 148  : 	return true;

  0016a	b0 01		 mov	 al, 1
$LN1@setWorking:

; 149  : }

  0016c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00170	5f		 pop	 rdi
  00171	c3		 ret	 0
?setWorkingDir2@CEnv@@SA_NH@Z ENDP			; CEnv::setWorkingDir2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
nLen$1 = 32
$T2 = 40
$T3 = 48
tv73 = 56
pPullPath$ = 80
?setWorkingDir@CEnv@@SA_NPEAD@Z PROC			; CEnv::setWorkingDir

; 110  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000a	48 8b fc	 mov	 rdi, rsp
  0000d	b9 10 00 00 00	 mov	 ecx, 16
  00012	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00017	f3 ab		 rep stosd
  00019	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 111  : 	if (pPullPath) {

  0001e	48 83 7c 24 50
	00		 cmp	 QWORD PTR pPullPath$[rsp], 0
  00024	0f 84 b2 00 00
	00		 je	 $LN2@setWorking

; 112  : 		size_t	nLen = (int)_tcslen(pPullPath);

  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPullPath$[rsp]
  0002f	e8 00 00 00 00	 call	 strlen
  00034	48 98		 cdqe
  00036	48 89 44 24 20	 mov	 QWORD PTR nLen$1[rsp], rax

; 113  : 		if (!nLen) return false;

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR nLen$1[rsp], 0
  00041	75 07		 jne	 SHORT $LN3@setWorking
  00043	32 c0		 xor	 al, al
  00045	e9 94 00 00 00	 jmp	 $LN1@setWorking
$LN3@setWorking:

; 114  : 		if (g_pWorkDir) {

  0004a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00052	74 40		 je	 SHORT $LN4@setWorking

; 115  : 			delete[] g_pWorkDir;

  00054	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  0005b	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00060	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  00065	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  0006a	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00070	75 0b		 jne	 SHORT $LN7@setWorking
  00072	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  0007b	eb 17		 jmp	 SHORT $LN8@setWorking
$LN7@setWorking:
  0007d	48 c7 05 00 00
	00 00 23 81 00
	00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, 33059 ; g_pWorkDir, 00008123H
  00088	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  0008f	48 89 44 24 38	 mov	 QWORD PTR tv73[rsp], rax
$LN8@setWorking:
$LN4@setWorking:

; 116  : 		}
; 117  : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen + 2];

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR nLen$1[rsp]
  00099	48 83 c0 02	 add	 rax, 2
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000ac	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR $T3[rsp]
  000b6	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, rax ; g_pWorkDir

; 118  : 
; 119  : 		if (g_pWorkDir == NULL) return false;

  000bd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  000c5	75 04		 jne	 SHORT $LN5@setWorking
  000c7	32 c0		 xor	 al, al
  000c9	eb 13		 jmp	 SHORT $LN1@setWorking
$LN5@setWorking:

; 120  : 
; 121  : 		_tcscpy(g_pWorkDir, pPullPath);

  000cb	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPullPath$[rsp]
  000d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000d7	e8 00 00 00 00	 call	 strcpy
$LN2@setWorking:

; 122  : 	}
; 123  : 
; 124  : 	return true;

  000dc	b0 01		 mov	 al, 1
$LN1@setWorking:

; 125  : }

  000de	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000e2	5f		 pop	 rdi
  000e3	c3		 ret	 0
?setWorkingDir@CEnv@@SA_NPEAD@Z ENDP			; CEnv::setWorkingDir
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File e:\infinia-library-3.0\com\src\comenv.cpp
_TEXT	SEGMENT
nLen$ = 32
$T1 = 40
tv64 = 48
fName$ = 80
fPath$ = 88
?FullName@CEnv@@SAHPEBDPEAPEAD@Z PROC			; CEnv::FullName

; 22   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000f	48 8b fc	 mov	 rdi, rsp
  00012	b9 10 00 00 00	 mov	 ecx, 16
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 23   : 	*fPath = NULL;

  00023	48 8b 44 24 58	 mov	 rax, QWORD PTR fPath$[rsp]
  00028	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 24   : 	int	nLen;
; 25   : 
; 26   : 	nLen = (int)_tcslen(g_pWorkDir) + (int)_tcslen(fName) + 1;

  0002f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00036	e8 00 00 00 00	 call	 strlen
  0003b	48 89 44 24 30	 mov	 QWORD PTR tv64[rsp], rax
  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fName$[rsp]
  00045	e8 00 00 00 00	 call	 strlen
  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv64[rsp]
  0004f	8d 44 01 01	 lea	 eax, DWORD PTR [rcx+rax+1]
  00053	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax

; 27   : 	*fPath = new (std::nothrow) TCHAR[nLen];

  00057	48 63 44 24 20	 movsxd	 rax, DWORD PTR nLen$[rsp]
  0005c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  0006b	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00070	48 8b 44 24 58	 mov	 rax, QWORD PTR fPath$[rsp]
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp]
  0007a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 28   : 
; 29   : 	if (*fPath) {

  0007d	48 8b 44 24 58	 mov	 rax, QWORD PTR fPath$[rsp]
  00082	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00086	74 1d		 je	 SHORT $LN2@FullName

; 30   : 		nLen = _stprintf(*fPath, g_pWorkDir, fName);

  00088	4c 8b 44 24 50	 mov	 r8, QWORD PTR fName$[rsp]
  0008d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00094	48 8b 44 24 58	 mov	 rax, QWORD PTR fPath$[rsp]
  00099	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009c	e8 00 00 00 00	 call	 sprintf
  000a1	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@FullName:

; 31   : 	}
; 32   : 	return nLen;

  000a5	8b 44 24 20	 mov	 eax, DWORD PTR nLen$[rsp]

; 33   : }

  000a9	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000ad	5f		 pop	 rdi
  000ae	c3		 ret	 0
?FullName@CEnv@@SAHPEBDPEAPEAD@Z ENDP			; CEnv::FullName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
__$ArrayPad$ = 80
_Buffer$ = 112
_Format$ = 120
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  0003c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  00041	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00049	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0004e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00053	45 33 c0	 xor	 r8d, r8d
  00056	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Format$[rsp]
  0005b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00060	e8 00 00 00 00	 call	 _vsprintf_l
  00065	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00069	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

  00072	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1788 : }

  00076	8b f8		 mov	 edi, eax
  00078	48 8b cc	 mov	 rcx, rsp
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sprintf$rtcFrameData
  00082	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00087	8b c7		 mov	 eax, edi
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008e	48 33 cc	 xor	 rcx, rsp
  00091	e8 00 00 00 00	 call	 __security_check_cookie
  00096	48 83 c4 60	 add	 rsp, 96			; 00000060H
  0009a	5f		 pop	 rdi
  0009b	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0003c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00041	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0004d	e8 00 00 00 00	 call	 _vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 10 00 00 00	 mov	 ecx, 16
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR [rsp+80]

; 1386 :     int const _Result = __stdio_common_vsprintf(

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 83 c8 01	 or	 rax, 1
  00039	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  0003e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00043	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00048	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  00052	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00057	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00065	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00069	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  0006e	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00070	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00078	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0007a	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  0007e	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00082	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1391 : }

  00086	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0008a	5f		 pop	 rdi
  0008b	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
__$ArrayPad$ = 80
_Format$ = 112
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	57		 push	 rdi
  00015	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 18 00 00 00	 mov	 ecx, 24
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 70	 mov	 rcx, QWORD PTR [rsp+112]
  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00034	48 33 c4	 xor	 rax, rsp
  00037	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  0003c	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  00041	48 8d 44 24 78	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00046	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00056	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Format$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 _vfprintf_l
  0006b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

  00078	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 957  : }

  0007c	8b f8		 mov	 edi, eax
  0007e	48 8b cc	 mov	 rcx, rsp
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:printf$rtcFrameData
  00088	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008d	8b c7		 mov	 eax, edi
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00094	48 33 cc	 xor	 rcx, rsp
  00097	e8 00 00 00 00	 call	 __security_check_cookie
  0009c	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000a0	5f		 pop	 rdi
  000a1	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 144  :         {

$LN3:
  00000	40 57		 push	 rdi

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00002	5f		 pop	 rdi
  00003	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00019	48 8b fc	 mov	 rdi, rsp
  0001c	b9 0c 00 00 00	 mov	 ecx, 12
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002d	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00032	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00037	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00041	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00046	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  0004b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  00054	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00058	5f		 pop	 rdi
  00059	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
  00000	40 57		 push	 rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00002	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00009	5f		 pop	 rdi
  0000a	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPEADPEADI@Z
_TEXT	SEGMENT
_S$ = 48
_C$ = 56
?_tcsrchr@@YAPEADPEADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _C$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  0002b	e8 00 00 00 00	 call	 _tcsrchr
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5f		 pop	 rdi
  00035	c3		 ret	 0
?_tcsrchr@@YAPEADPEADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsrchr
_TEXT	SEGMENT
_s1$ = 48
_c$ = 56
_tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000e	48 8b fc	 mov	 rdi, rsp
  00011	b9 08 00 00 00	 mov	 ecx, 8
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]
  00022	8b 54 24 38	 mov	 edx, DWORD PTR _c$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsrchr
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5f		 pop	 rdi
  00036	c3		 ret	 0
_tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsncpy
_TEXT	SEGMENT
_Dst$ = 48
_Source$ = 56
_Count$ = 64
_tcsncpy PROC						; COMDAT

; 1542 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	48 8b fc	 mov	 rdi, rsp
  00017	b9 08 00 00 00	 mov	 ecx, 8
  0001c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00021	f3 ab		 rep stosd
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR [rsp+48]

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00028	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  0002d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Source$[rsp]
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dst$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsnbcpy

; 1546 : #pragma warning(pop)
; 1547 : }

  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5f		 pop	 rdi
  00042	c3		 ret	 0
_tcsncpy ENDP
_TEXT	ENDS
END
