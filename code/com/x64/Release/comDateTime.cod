; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG81201 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81202 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81209 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81210 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81221 DB	'ERROR _localtime_s', 0aH, 00H
$SG81325 DB	'%d', 00H
	ORG $+1
$SG81222 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81223 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81231 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81232 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81233 DB	'gm time and date : %s', 0aH, 00H
	ORG $+1
$SG81282 DB	'+00:00', 00H
	ORG $+1
$SG81284 DB	'+09:00', 00H
	ORG $+1
$SG81298 DB	'ERROR _localtime_s', 0aH, 00H
$SG81354 DB	'%d', 00H
	ORG $+1
$SG81347 DB	'%04d%c%02d%c%02d', 00H
	ORG $+3
$SG81355 DB	'%s', 00H
	ORG $+1
$SG81348 DB	'%04d%02d%02d', 00H
	ORG $+3
$SG81358 DB	'%s%c%02d%c%02d', 00H
	ORG $+1
$SG81359 DB	'%0s%02d%02d', 00H
	ORG $+4
$SG81366 DB	'%02d:%02d:%02d', 00H
	ORG $+1
$SG81367 DB	'%02d%02d%02d', 00H
	ORG $+3
$SG81377 DB	'CDateTime::addDateString', 00H
	ORG $+7
$SG81378 DB	'%s %d ERROR _localtime_s', 0aH, 00H
	ORG $+6
$SG81381 DB	'%04d%c%02d%c%02d', 00H
	ORG $+7
$SG81382 DB	'%04d%02d%02d', 00H
CONST	ENDS
_DATA	SEGMENT
?g_nTimeSize@@3HA DD 08H				; g_nTimeSize
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	?m_Sleep@Misc@@SAXH@Z				; Misc::m_Sleep
PUBLIC	?u_Sleep@Misc@@SAXH@Z				; Misc::u_Sleep
PUBLIC	?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z	; Misc::timespec_diff
PUBLIC	?getmillisec@Misc@@SAXPEAUtimespec@@@Z		; Misc::getmillisec
PUBLIC	?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z	; Misc::getFileTime
PUBLIC	??0CFileTime@@QEAA@XZ				; CFileTime::CFileTime
PUBLIC	??1CFileTime@@QEAA@XZ				; CFileTime::~CFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEAD@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEA_J@Z		; CFileTime::setFileTime
PUBLIC	?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z	; CFileTime::setFileTime
PUBLIC	?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z ; CFileTime::isCompare
PUBLIC	?getDate@CFileTime@@QEAAHXZ			; CFileTime::getDate
PUBLIC	?getTime@CFileTime@@QEAAHXZ			; CFileTime::getTime
PUBLIC	??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z	; CDateTime::CDateTime
PUBLIC	??1CDateTime@@QEAA@XZ				; CDateTime::~CDateTime
PUBLIC	?SetTimeValue@CDateTime@@QEAAXPEA_J@Z		; CDateTime::SetTimeValue
PUBLIC	?SetSecondsValue@CDateTime@@QEAAXH@Z		; CDateTime::SetSecondsValue
PUBLIC	?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
PUBLIC	?DateString@CDateTime@@QEAAPEBDD@Z		; CDateTime::DateString
PUBLIC	?DateString2@CDateTime@@QEAAPEBDD@Z		; CDateTime::DateString2
PUBLIC	?TimeString@CDateTime@@QEAAPEBD_N@Z		; CDateTime::TimeString
PUBLIC	?addDateString@CDateTime@@QEAAPEBDHD@Z		; CDateTime::addDateString
PUBLIC	?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z	; CDateTime::setString
PUBLIC	?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z	; CDateTime::uptoSeconds
PUBLIC	?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z	; CDateTime::uptoMilliSeconds
PUBLIC	?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
PUBLIC	?initTimeZone@@YAXXZ				; initTimeZone
PUBLIC	?getTimeInterval@@YAXPEAUSTTime@@00H@Z		; getTimeInterval
PUBLIC	?getCurrentTime@@YAXPEAUSTTime@@@Z		; getCurrentTime
PUBLIC	?setLocalFileTime@@YA_NPEA_JPEAH1@Z		; setLocalFileTime
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_asctime:PROC
EXTRN	__imp__gmtime64:PROC
EXTRN	__imp__localtime64_s:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_GetFileTime:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetSystemTime:PROC
EXTRN	__imp_GetSystemTimeAsFileTime:PROC
EXTRN	__imp_GetLocalTime:PROC
EXTRN	__imp_GetTimeZoneInformation:PROC
EXTRN	__imp_FileTimeToSystemTime:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_stTZ@@3USTTimeZone@@A DB 010H DUP (?)		; g_stTZ
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gmtime DD imagerel gmtime
	DD	imagerel gmtime+25
	DD	imagerel $unwind$gmtime
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$localtime_s DD imagerel localtime_s
	DD	imagerel localtime_s+35
	DD	imagerel $unwind$localtime_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?m_Sleep@Misc@@SAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$?m_Sleep@Misc@@SAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?u_Sleep@Misc@@SAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$?u_Sleep@Misc@@SAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getmillisec@Misc@@SAXPEAUtimespec@@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?getmillisec@Misc@@SAXPEAUtimespec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setFileTime@CFileTime@@QEAAHPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+351
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setFileTime@CFileTime@@QEAAHPEA_J@Z DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEA_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z DD imagerel $LN26
	DD	imagerel $LN26+532
	DD	imagerel $unwind$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z DD imagerel $LN12
	DD	imagerel $LN12+237
	DD	imagerel $unwind$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DateString@CDateTime@@QEAAPEBDD@Z DD imagerel $LN5
	DD	imagerel $LN5+178
	DD	imagerel $unwind$?DateString@CDateTime@@QEAAPEBDD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DateString2@CDateTime@@QEAAPEBDD@Z DD imagerel $LN5
	DD	imagerel $LN5+249
	DD	imagerel $unwind$?DateString2@CDateTime@@QEAAPEBDD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TimeString@CDateTime@@QEAAPEBD_N@Z DD imagerel $LN5
	DD	imagerel $LN5+144
	DD	imagerel $unwind$?TimeString@CDateTime@@QEAAPEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?addDateString@CDateTime@@QEAAPEBDHD@Z DD imagerel $LN6
	DD	imagerel $LN6+333
	DD	imagerel $unwind$?addDateString@CDateTime@@QEAAPEBDHD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z DD imagerel $LN11
	DD	imagerel $LN11+706
	DD	imagerel $unwind$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z DD imagerel $LN6
	DD	imagerel $LN6+181
	DD	imagerel $unwind$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z DD imagerel $LN5
	DD	imagerel $LN5+203
	DD	imagerel $unwind$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initTimeZone@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?initTimeZone@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getTimeInterval@@YAXPEAUSTTime@@00H@Z DD imagerel $LN12
	DD	imagerel $LN12+376
	DD	imagerel $unwind$?getTimeInterval@@YAXPEAUSTTime@@00H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getCurrentTime@@YAXPEAUSTTime@@@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?getCurrentTime@@YAXPEAUSTTime@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setLocalFileTime@@YA_NPEA_JPEAH1@Z DD imagerel $LN4
	DD	imagerel $LN4+253
	DD	imagerel $unwind$?setLocalFileTime@@YA_NPEA_JPEAH1@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setLocalFileTime@@YA_NPEA_JPEAH1@Z DD 022519H
	DD	0110116H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getCurrentTime@@YAXPEAUSTTime@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getTimeInterval@@YAXPEAUSTTime@@00H@Z DD 011801H
	DD	02218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initTimeZone@@YAXXZ DD 021919H
	DD	01d0107H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z DD 011c19H
	DD	0820dH
	DD	imagerel __GSHandlerCheck
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z DD 031401H
	DD	070106214H
	DD	0600fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?addDateString@CDateTime@@QEAAPEBDHD@Z DD 022719H
	DD	0130115H
	DD	imagerel __GSHandlerCheck
	DD	088H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TimeString@CDateTime@@QEAAPEBD_N@Z DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DateString2@CDateTime@@QEAAPEBDD@Z DD 011c19H
	DD	0c20dH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DateString@CDateTime@@QEAAPEBDD@Z DD 010d01H
	DD	0a20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z DD 031401H
	DD	070108214H
	DD	0600fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetTimeValue@CDateTime@@QEAAXPEA_J@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setFileTime@CFileTime@@QEAAHPEA_J@Z DD 042219H
	DD	0110113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setFileTime@CFileTime@@QEAAHPEAD@Z DD 022319H
	DD	0170111H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z DD 011c19H
	DD	0820dH
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getmillisec@Misc@@SAXPEAUtimespec@@@Z DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?u_Sleep@Misc@@SAXH@Z DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?m_Sleep@Misc@@SAXH@Z DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$localtime_s DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gmtime DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 012719H
	DD	08218H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 012719H
	DD	08218H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setLocalFileTime@@YA_NPEA_JPEAH1@Z
_TEXT	SEGMENT
err$ = 48
ltm$ = 56
tmTime$ = 64
szDate$ = 104
__$ArrayPad$ = 120
fileTime$ = 144
pDate$ = 152
pTime$ = 160
?setLocalFileTime@@YA_NPEA_JPEAH1@Z PROC		; setLocalFileTime, COMDAT

; 97   : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 98   : 	struct	tm	tmTime, *ltm = &tmTime;

  00025	48 8d 44 24 40	 lea	 rax, QWORD PTR tmTime$[rsp]
  0002a	48 89 44 24 38	 mov	 QWORD PTR ltm$[rsp], rax

; 99   : 	TCHAR szDate[16];
; 100  : #ifndef WIN32
; 101  : 	ltm = localtime(&fileTime);
; 102  : #else
; 103  : 	errno_t err = localtime_s(ltm, fileTime);

  0002f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR fileTime$[rsp]
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ltm$[rsp]
  0003c	e8 00 00 00 00	 call	 localtime_s
  00041	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 104  : 	if (err) { _tprintf(_T("ERROR _localtime_s\n")); return false; }

  00045	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  0004a	74 13		 je	 SHORT $LN2@setLocalFi
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81221
  00053	e8 00 00 00 00	 call	 printf
  00058	32 c0		 xor	 al, al
  0005a	e9 89 00 00 00	 jmp	 $LN1@setLocalFi
$LN2@setLocalFi:

; 105  : #endif
; 106  : 	tmTime.tm_year += 1900;

  0005f	8b 44 24 54	 mov	 eax, DWORD PTR tmTime$[rsp+20]
  00063	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00068	89 44 24 54	 mov	 DWORD PTR tmTime$[rsp+20], eax

; 107  : 	tmTime.tm_mon += 1;

  0006c	8b 44 24 50	 mov	 eax, DWORD PTR tmTime$[rsp+16]
  00070	ff c0		 inc	 eax
  00072	89 44 24 50	 mov	 DWORD PTR tmTime$[rsp+16], eax

; 108  : 
; 109  : 	_stprintf(szDate, "%04d%02d%02d", tmTime.tm_year, tmTime.tm_mon, tmTime.tm_mday);

  00076	8b 44 24 4c	 mov	 eax, DWORD PTR tmTime$[rsp+12]
  0007a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007e	44 8b 4c 24 50	 mov	 r9d, DWORD PTR tmTime$[rsp+16]
  00083	44 8b 44 24 54	 mov	 r8d, DWORD PTR tmTime$[rsp+20]
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81222
  0008f	48 8d 4c 24 68	 lea	 rcx, QWORD PTR szDate$[rsp]
  00094	e8 00 00 00 00	 call	 sprintf

; 110  : 	*pDate = atoi(szDate);

  00099	48 8d 4c 24 68	 lea	 rcx, QWORD PTR szDate$[rsp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000a4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pDate$[rsp]
  000ac	89 01		 mov	 DWORD PTR [rcx], eax

; 111  : 	_stprintf(szDate, "%02d%02d%02d", tmTime.tm_hour, tmTime.tm_min, tmTime.tm_sec);

  000ae	8b 44 24 40	 mov	 eax, DWORD PTR tmTime$[rsp]
  000b2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b6	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tmTime$[rsp+4]
  000bb	44 8b 44 24 48	 mov	 r8d, DWORD PTR tmTime$[rsp+8]
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81223
  000c7	48 8d 4c 24 68	 lea	 rcx, QWORD PTR szDate$[rsp]
  000cc	e8 00 00 00 00	 call	 sprintf

; 112  : 	*pTime = atoi(szDate);

  000d1	48 8d 4c 24 68	 lea	 rcx, QWORD PTR szDate$[rsp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000dc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pTime$[rsp]
  000e4	89 01		 mov	 DWORD PTR [rcx], eax

; 113  : 
; 114  : 	return true;

  000e6	b0 01		 mov	 al, 1
$LN1@setLocalFi:

; 115  : }

  000e8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ed	48 33 cc	 xor	 rcx, rsp
  000f0	e8 00 00 00 00	 call	 __security_check_cookie
  000f5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000fc	c3		 ret	 0
?setLocalFileTime@@YA_NPEA_JPEAH1@Z ENDP		; setLocalFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getCurrentTime@@YAXPEAUSTTime@@@Z
_TEXT	SEGMENT
sysTm$ = 32
__$ArrayPad$ = 48
pTime$ = 80
?getCurrentTime@@YAXPEAUSTTime@@@Z PROC			; getCurrentTime, COMDAT

; 465  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 466  : #ifndef WIN32
; 467  : 	struct	tm	ltm;
; 468  : 	ltm = &_tm;
; 469  : 	struct timespec tp;
; 470  : 	clock_gettime(CLOCK_REALTIME, &tp);
; 471  : 	pTime->nLast = tp.tv_nsec % MILLISEC_PER_SEC;
; 472  : 	time_t t = time(NULL);
; 473  : 	errno_t err = localtime_s(&ltm, &t);
; 474  : 	pTime->nHour = ltm.tm_hour;
; 475  : 	pTime->nMinute = ltm.tm_min;
; 476  : 	pTime->nSec = ltm.tm_sec;
; 477  : #else
; 478  : 	SYSTEMTIME	sysTm;
; 479  : 	GetSystemTime(&sysTm);

  00018	48 8d 4c 24 20	 lea	 rcx, QWORD PTR sysTm$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 480  : 	pTime->nHour = sysTm.wHour;

  00023	0f b7 44 24 28	 movzx	 eax, WORD PTR sysTm$[rsp+8]
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTime$[rsp]
  0002d	89 01		 mov	 DWORD PTR [rcx], eax

; 481  : 	pTime->nMinute = sysTm.wMinute;

  0002f	0f b7 44 24 2a	 movzx	 eax, WORD PTR sysTm$[rsp+10]
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTime$[rsp]
  00039	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 482  : 	pTime->nSec = sysTm.wSecond;

  0003c	0f b7 44 24 2c	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTime$[rsp]
  00046	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 483  : 	pTime->nLast = sysTm.wMilliseconds;

  00049	0f b7 44 24 2e	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pTime$[rsp]
  00053	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 484  : #endif
; 485  : }

  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0005b	48 33 cc	 xor	 rcx, rsp
  0005e	e8 00 00 00 00	 call	 __security_check_cookie
  00063	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00067	c3		 ret	 0
?getCurrentTime@@YAXPEAUSTTime@@@Z ENDP			; getCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getTimeInterval@@YAXPEAUSTTime@@00H@Z
_TEXT	SEGMENT
nValue$ = 0
i$ = 4
pTime1$ = 32
pTime2$ = 40
pTimeTarget$ = 48
nLastLen$ = 56
?getTimeInterval@@YAXPEAUSTTime@@00H@Z PROC		; getTimeInterval, COMDAT

; 488  : {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 489  : 	int nValue = 0, i;

  00018	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nValue$[rsp], 0

; 490  : 	if (pTime2->nLast < pTime1->nLast) {

  0001f	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00029	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0002c	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  0002f	7d 5d		 jge	 SHORT $LN5@getTimeInt

; 491  : 		nValue = 1;

  00031	c7 04 24 01 00
	00 00		 mov	 DWORD PTR nValue$[rsp], 1

; 492  : 		for (i = 0; i < nLastLen; i++)

  00038	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00040	eb 0a		 jmp	 SHORT $LN4@getTimeInt
$LN2@getTimeInt:
  00042	8b 44 24 04	 mov	 eax, DWORD PTR i$[rsp]
  00046	ff c0		 inc	 eax
  00048	89 44 24 04	 mov	 DWORD PTR i$[rsp], eax
$LN4@getTimeInt:
  0004c	8b 44 24 38	 mov	 eax, DWORD PTR nLastLen$[rsp]
  00050	39 44 24 04	 cmp	 DWORD PTR i$[rsp], eax
  00054	7d 09		 jge	 SHORT $LN3@getTimeInt

; 493  : 		{
; 494  : 			nValue = nValue * 10;

  00056	6b 04 24 0a	 imul	 eax, DWORD PTR nValue$[rsp], 10
  0005a	89 04 24	 mov	 DWORD PTR nValue$[rsp], eax

; 495  : 		}

  0005d	eb e3		 jmp	 SHORT $LN2@getTimeInt
$LN3@getTimeInt:

; 496  : 		pTimeTarget->nLast = (pTime2->nLast + nValue) - pTime1->nLast;

  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00064	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00067	03 04 24	 add	 eax, DWORD PTR nValue$[rsp]
  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0006f	2b 41 0c	 sub	 eax, DWORD PTR [rcx+12]
  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00077	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 497  : 		pTime2->nSec -= 1;

  0007a	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0007f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00082	ff c8		 dec	 eax
  00084	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  00089	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 498  : 	}
; 499  : 	else {

  0008c	eb 1a		 jmp	 SHORT $LN6@getTimeInt
$LN5@getTimeInt:

; 500  : 		pTimeTarget->nLast = pTime2->nLast - pTime1->nLast;

  0008e	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00093	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00098	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0009b	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0009e	2b c1		 sub	 eax, ecx
  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  000a5	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
$LN6@getTimeInt:

; 501  : 	}
; 502  : 
; 503  : 	if (pTime2->nSec < pTime1->nSec) {

  000a8	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000b2	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  000b5	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  000b8	7d 2f		 jge	 SHORT $LN7@getTimeInt

; 504  : 		pTimeTarget->nSec = (pTime2->nSec + 60) - pTime1->nSec;

  000ba	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000bf	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000c2	83 c0 3c	 add	 eax, 60			; 0000003cH
  000c5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000ca	2b 41 08	 sub	 eax, DWORD PTR [rcx+8]
  000cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  000d2	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 505  : 		pTime2->nMinute -= 1;

  000d5	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000da	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000dd	ff c8		 dec	 eax
  000df	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  000e4	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 506  : 	}
; 507  : 	else {

  000e7	eb 1a		 jmp	 SHORT $LN8@getTimeInt
$LN7@getTimeInt:

; 508  : 		pTimeTarget->nSec = pTime2->nSec - pTime1->nSec;

  000e9	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  000f3	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  000f6	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000f9	2b c1		 sub	 eax, ecx
  000fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00100	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN8@getTimeInt:

; 509  : 	}
; 510  : 
; 511  : 	if (pTime2->nMinute < pTime1->nMinute) {

  00103	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00108	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0010d	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00110	39 48 04	 cmp	 DWORD PTR [rax+4], ecx
  00113	7d 2d		 jge	 SHORT $LN9@getTimeInt

; 512  : 		pTimeTarget->nMinute = (pTime2->nMinute + 60) - pTime1->nMinute;

  00115	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  0011a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0011d	83 c0 3c	 add	 eax, 60			; 0000003cH
  00120	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00125	2b 41 04	 sub	 eax, DWORD PTR [rcx+4]
  00128	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  0012d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 513  : 		pTime2->nHour -= 1;

  00130	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00135	8b 00		 mov	 eax, DWORD PTR [rax]
  00137	ff c8		 dec	 eax
  00139	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pTime2$[rsp]
  0013e	89 01		 mov	 DWORD PTR [rcx], eax

; 514  : 	}
; 515  : 	else {

  00140	eb 1a		 jmp	 SHORT $LN10@getTimeInt
$LN9@getTimeInt:

; 516  : 		pTimeTarget->nMinute = pTime2->nMinute - pTime1->nMinute;

  00142	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00147	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  0014c	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  0014f	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00152	2b c1		 sub	 eax, ecx
  00154	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00159	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN10@getTimeInt:

; 517  : 	}
; 518  : 	pTimeTarget->nHour = pTime2->nHour - pTime1->nHour;

  0015c	48 8b 44 24 28	 mov	 rax, QWORD PTR pTime2$[rsp]
  00161	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTime1$[rsp]
  00166	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00168	8b 00		 mov	 eax, DWORD PTR [rax]
  0016a	2b c1		 sub	 eax, ecx
  0016c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pTimeTarget$[rsp]
  00171	89 01		 mov	 DWORD PTR [rcx], eax

; 519  : }

  00173	48 83 c4 18	 add	 rsp, 24
  00177	c3		 ret	 0
?getTimeInterval@@YAXPEAUSTTime@@00H@Z ENDP		; getTimeInterval
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?initTimeZone@@YAXXZ
_TEXT	SEGMENT
tzi$ = 32
__$ArrayPad$ = 208
?initTimeZone@@YAXXZ PROC				; initTimeZone, COMDAT

; 24   : {

$LN3:
  00000	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 25   : #ifndef WIN32
; 26   : 	//struct timespec tp;
; 27   : 	//clock_gettime(CLOCK_REALTIME, &tp); 
; 28   : 	//m_tmval.tv_sec = tp.tv_sec;
; 29   : 	//m_tmval.tv_usec = tp.tv_nsec/1000000L;
; 30   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 31   : 	//struct timezone tz;
; 32   : 	//gettimeofday(&m_tmval, &tz);
; 33   : 	//m_tm = *localtime((const time_t*)&m_tmval.tv_sec);
; 34   : 	//gettimeofday(&m_tmval, NULL);
; 35   : 	//ltm = ::localtime((const time_t*)&m_tmval.tv_sec);
; 36   : #else
; 37   : 	TIME_ZONE_INFORMATION tzi;
; 38   : 	GetTimeZoneInformation(&tzi);

  00019	48 8d 4c 24 20	 lea	 rcx, QWORD PTR tzi$[rsp]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetTimeZoneInformation

; 39   : 	g_stTZ.nTZHour = (-tzi.Bias) / 60;

  00024	8b 44 24 20	 mov	 eax, DWORD PTR tzi$[rsp]
  00028	f7 d8		 neg	 eax
  0002a	99		 cdq
  0002b	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00030	f7 f9		 idiv	 ecx
  00032	89 05 00 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A, eax

; 40   : 	g_stTZ.nTZMin = (-tzi.Bias) % 60;

  00038	8b 44 24 20	 mov	 eax, DWORD PTR tzi$[rsp]
  0003c	f7 d8		 neg	 eax
  0003e	99		 cdq
  0003f	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00044	f7 f9		 idiv	 ecx
  00046	8b c2		 mov	 eax, edx
  00048	89 05 04 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+4, eax

; 41   : 	g_stTZ.nTZSec = (tzi.Bias) * 60;

  0004e	6b 44 24 20 3c	 imul	 eax, DWORD PTR tzi$[rsp], 60 ; 0000003cH
  00053	89 05 08 00 00
	00		 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+8, eax

; 42   : 	g_stTZ.nTZType = 0;

  00059	c7 05 0c 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?g_stTZ@@3USTTimeZone@@A+12, 0

; 43   : #endif
; 44   : }

  00063	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0006b	48 33 cc	 xor	 rcx, rsp
  0006e	e8 00 00 00 00	 call	 __security_check_cookie
  00073	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0007a	c3		 ret	 0
?initTimeZone@@YAXXZ ENDP				; initTimeZone
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z
_TEXT	SEGMENT
tv66 = 32
ltm$ = 40
this$ = 64
nTz$ = 72
nType$ = 80
?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z PROC ; CDateTime::uptoMicroseconds, COMDAT

; 260  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 261  : 	struct	tm	*ltm = &m_tm;

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 89 44 24 28	 mov	 QWORD PTR ltm$[rsp], rax

; 262  : 	//long divisor;
; 263  : 
; 264  : #ifndef WIN32
; 265  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 266  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 267  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%divisor;
; 268  : 	if(nType == DT_MICROSEC) m_tmval.tv_nsec = m_tmval.tv_nsec%MICROSEC_PER_SEC;
; 269  : #else
; 270  : 	Misc::getFileTime(&m_tmval, nType == DT_MICROSEC?true:false);

  0001c	83 7c 24 50 03	 cmp	 DWORD PTR nType$[rsp], 3
  00021	75 07		 jne	 SHORT $LN3@uptoMicros
  00023	c6 44 24 20 01	 mov	 BYTE PTR tv66[rsp], 1
  00028	eb 05		 jmp	 SHORT $LN4@uptoMicros
$LN3@uptoMicros:
  0002a	c6 44 24 20 00	 mov	 BYTE PTR tv66[rsp], 0
$LN4@uptoMicros:
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c0 28	 add	 rax, 40			; 00000028H
  00038	0f b6 54 24 20	 movzx	 edx, BYTE PTR tv66[rsp]
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 ?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z ; Misc::getFileTime

; 271  : 	uptoSeconds(nTz, m_tmval.tv_sec);

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004a	4c 8b 40 28	 mov	 r8, QWORD PTR [rax+40]
  0004e	8b 54 24 48	 mov	 edx, DWORD PTR nTz$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00057	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 272  : #endif
; 273  : 	//_stprintf(szBuf, _T("%04d/%02d/%02d %02d:%02d:%02d , %d\n"), m_tm.tm_year, m_tm.tm_mon, m_tm.tm_wday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_usec);
; 274  : 	//_tprintf(szBuf);
; 275  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ENDP ; CDateTime::uptoMicroseconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z
_TEXT	SEGMENT
ltm$ = 32
sysTm$ = 40
__$ArrayPad$ = 56
this$ = 80
nTz$ = 88
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z PROC	; CDateTime::uptoMilliSeconds, COMDAT

; 227  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 44 24 38	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 228  : 	// only UTC
; 229  : 	struct	tm	*ltm = &m_tm;

  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 89 44 24 20	 mov	 QWORD PTR ltm$[rsp], rax

; 230  : #ifndef WIN32
; 231  : 	clock_gettime(CLOCK_REALTIME, &m_tmval);
; 232  : 	uptoSeconds(nTz, m_tmval.tv_sec);
; 233  : 	m_tmval.tv_nsec = m_tmval.tv_nsec%MILLISEC_PER_SEC;
; 234  : #else
; 235  : 	//GetSystemTime(&sysTm);
; 236  : //	time_t t = time(NULL);
; 237  : 	SYSTEMTIME	sysTm;
; 238  : 	if (nTz == TZ_UTC) {

  00026	83 7c 24 58 01	 cmp	 DWORD PTR nTz$[rsp], 1
  0002b	75 0d		 jne	 SHORT $LN2@uptoMilliS

; 239  : 		GetSystemTime(&sysTm);

  0002d	48 8d 4c 24 28	 lea	 rcx, QWORD PTR sysTm$[rsp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 240  : 	}
; 241  : 	else {//if (nTz == TZ_KST)

  00038	eb 0b		 jmp	 SHORT $LN3@uptoMilliS
$LN2@uptoMilliS:

; 242  : 		GetLocalTime(&sysTm);

  0003a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR sysTm$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLocalTime
$LN3@uptoMilliS:

; 243  : 	}
; 244  : 	m_tm.tm_year = sysTm.wYear;

  00045	0f b7 44 24 28	 movzx	 eax, WORD PTR sysTm$[rsp]
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 245  : 	m_tm.tm_mon = sysTm.wMonth;

  00052	0f b7 44 24 2a	 movzx	 eax, WORD PTR sysTm$[rsp+2]
  00057	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 246  : 	m_tm.tm_mday = sysTm.wDay;

  0005f	0f b7 44 24 2e	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00069	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 247  : 	m_tm.tm_wday = sysTm.wDayOfWeek;

  0006c	0f b7 44 24 2c	 movzx	 eax, WORD PTR sysTm$[rsp+4]
  00071	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00076	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 248  : 	m_tm.tm_hour = sysTm.wHour;

  00079	0f b7 44 24 30	 movzx	 eax, WORD PTR sysTm$[rsp+8]
  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00083	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 249  : 	m_tm.tm_min = sysTm.wMinute;

  00086	0f b7 44 24 32	 movzx	 eax, WORD PTR sysTm$[rsp+10]
  0008b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00090	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 250  : 	m_tm.tm_sec = sysTm.wSecond;

  00093	0f b7 44 24 34	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  00098	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	89 01		 mov	 DWORD PTR [rcx], eax

; 251  : 	//uptoSeconds(nTz, t);
; 252  : 	m_tmval.tv_sec = 0;

  0009f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a4	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 253  : 
; 254  : 	m_tmval.tv_nsec = sysTm.wMilliseconds;

  000ac	0f b7 44 24 36	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b6	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 255  : #endif
; 256  : }

  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000be	48 33 cc	 xor	 rcx, rsp
  000c1	e8 00 00 00 00	 call	 __security_check_cookie
  000c6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ca	c3		 ret	 0
?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z ENDP	; CDateTime::uptoMilliSeconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z
_TEXT	SEGMENT
err$1 = 32
ltm$ = 40
this$ = 80
nTz$ = 88
t$ = 96
?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z PROC	; CDateTime::uptoSeconds, COMDAT

; 200  : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 201  : 	struct	tm	*ltm;
; 202  : 	if (nTz == TZ_UTC) {

  00014	83 7c 24 58 01	 cmp	 DWORD PTR nTz$[rsp], 1
  00019	75 22		 jne	 SHORT $LN2@uptoSecond

; 203  : #ifndef WIN32
; 204  : 		ltm = gmtime_r(&t, ltm);
; 205  : #else
; 206  : 		ltm = gmtime(&t);

  0001b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR t$[rsp]
  00020	e8 00 00 00 00	 call	 gmtime
  00025	48 89 44 24 28	 mov	 QWORD PTR ltm$[rsp], rax

; 207  : #endif
; 208  : 		memcpy(&m_tm, ltm, sizeof(m_tm));

  0002a	48 8b 7c 24 50	 mov	 rdi, QWORD PTR this$[rsp]
  0002f	48 8b 74 24 28	 mov	 rsi, QWORD PTR ltm$[rsp]
  00034	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00039	f3 a4		 rep movsb

; 209  : 	}
; 210  : 	else {//if (nTz == TZ_KST) {

  0003b	eb 30		 jmp	 SHORT $LN3@uptoSecond
$LN2@uptoSecond:

; 211  : 		ltm = &m_tm;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 89 44 24 28	 mov	 QWORD PTR ltm$[rsp], rax

; 212  : #ifndef WIN32
; 213  : 		ltm = localtime(&t);
; 214  : #else
; 215  : 		errno_t err = localtime_s(ltm, &t);

  00047	48 8d 54 24 60	 lea	 rdx, QWORD PTR t$[rsp]
  0004c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ltm$[rsp]
  00051	e8 00 00 00 00	 call	 localtime_s
  00056	89 44 24 20	 mov	 DWORD PTR err$1[rsp], eax

; 216  : 		if (err) _tprintf(_T("ERROR _localtime_s\n"));

  0005a	83 7c 24 20 00	 cmp	 DWORD PTR err$1[rsp], 0
  0005f	74 0c		 je	 SHORT $LN4@uptoSecond
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81298
  00068	e8 00 00 00 00	 call	 printf
$LN4@uptoSecond:
$LN3@uptoSecond:

; 217  : #endif
; 218  : 	}
; 219  : 	m_tm.tm_year += 1900;

  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00072	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00075	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  0007a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0007f	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 220  : 	m_tm.tm_mon += 1;

  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00087	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0008a	ff c0		 inc	 eax
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00091	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 221  : 	m_tmval.tv_sec = t;

  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00099	48 8b 4c 24 60	 mov	 rcx, QWORD PTR t$[rsp]
  0009e	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 222  : 	m_tmval.tv_nsec = 0;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a7	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 223  : }

  000ae	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b2	5f		 pop	 rdi
  000b3	5e		 pop	 rsi
  000b4	c3		 ret	 0
?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ENDP	; CDateTime::uptoSeconds
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z
_TEXT	SEGMENT
nLen$ = 80
tv64 = 84
pyear$1 = 88
__$ArrayPad$ = 96
this$ = 128
pTarget$ = 136
pFormat$ = 144
nFormat$ = 152
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z PROC	; CDateTime::setString, COMDAT

; 278  : {

$LN11:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 279  : 	int nLen=0;

  00027	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR nLen$[rsp], 0

; 280  : 	switch (nFormat)

  0002f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR nFormat$[rsp]
  00036	89 44 24 54	 mov	 DWORD PTR tv64[rsp], eax
  0003a	83 7c 24 54 01	 cmp	 DWORD PTR tv64[rsp], 1
  0003f	0f 84 7e 01 00
	00		 je	 $LN8@setString
  00045	83 7c 24 54 04	 cmp	 DWORD PTR tv64[rsp], 4
  0004a	0f 8e e1 01 00
	00		 jle	 $LN9@setString
  00050	83 7c 24 54 08	 cmp	 DWORD PTR tv64[rsp], 8
  00055	7e 5f		 jle	 SHORT $LN5@setString
  00057	83 7c 24 54 09	 cmp	 DWORD PTR tv64[rsp], 9
  0005c	74 05		 je	 SHORT $LN4@setString
  0005e	e9 ce 01 00 00	 jmp	 $LN9@setString
$LN4@setString:

; 281  : 	{
; 282  : 	case LOG_DATE_DDHHMMSS :
; 283  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00063	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0006b	8b 00		 mov	 eax, DWORD PTR [rax]
  0006d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00071	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00079	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0007c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00080	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00088	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  0008c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00094	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00098	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  000a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  000a8	e8 00 00 00 00	 call	 sprintf
  000ad	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax

; 284  : 		break;

  000b1	e9 f6 01 00 00	 jmp	 $LN2@setString
$LN5@setString:

; 285  : 	case LOG_DATE_YYMMDDHHMMSS:
; 286  : 	case LOG_DATE_YYMMDDHHMMSS3:
; 287  : 	case LOG_DATE_YYMMDDHHMMSS6:
; 288  : 	case LOG_DATE_YYMMDDHHMMSS9:
; 289  : 		{
; 290  : 			TCHAR pyear[6];
; 291  : 			_stprintf(pyear, _T("%d"), m_tm.tm_year);

  000b6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000be	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81325
  000c9	48 8d 4c 24 58	 lea	 rcx, QWORD PTR pyear$1[rsp]
  000ce	e8 00 00 00 00	 call	 sprintf

; 292  : 			if (nFormat == LOG_DATE_YYMMDDHHMMSS) {

  000d3	83 bc 24 98 00
	00 00 05	 cmp	 DWORD PTR nFormat$[rsp], 5
  000db	75 6a		 jne	 SHORT $LN6@setString

; 293  : 				nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  000dd	48 8d 44 24 5a	 lea	 rax, QWORD PTR pyear$1[rsp+2]
  000e2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ea	8b 09		 mov	 ecx, DWORD PTR [rcx]
  000ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000f0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f8	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  000fb	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  000ff	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00107	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0010a	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0010e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00116	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00119	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0011d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00125	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  00129	4c 8b c0	 mov	 r8, rax
  0012c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  00134	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  0013c	e8 00 00 00 00	 call	 sprintf
  00141	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
  00145	eb 77		 jmp	 SHORT $LN7@setString
$LN6@setString:

; 294  : 			}
; 295  : 			else nLen = _stprintf(pTarget, pFormat, pyear+2, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  00147	48 8d 44 24 5a	 lea	 rax, QWORD PTR pyear$1[rsp+2]
  0014c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00154	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  00157	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0015b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00163	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00165	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00169	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00171	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00174	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00178	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00180	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00183	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00187	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0018f	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00192	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00196	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0019e	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  001a2	4c 8b c0	 mov	 r8, rax
  001a5	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  001ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  001b5	e8 00 00 00 00	 call	 sprintf
  001ba	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
$LN7@setString:

; 296  : 		}
; 297  : 		break;

  001be	e9 e9 00 00 00	 jmp	 $LN2@setString
$LN8@setString:

; 298  : 	case LOG_DATE_YYYYMMDDHHMMSS:
; 299  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  001c3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001cb	8b 00		 mov	 eax, DWORD PTR [rax]
  001cd	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  001d1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001d9	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001dc	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  001e0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001e8	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  001eb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001ef	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001f7	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  001fa	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00206	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  0020a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00212	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00216	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  0021e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  00226	e8 00 00 00 00	 call	 sprintf
  0022b	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax

; 300  : 		break;

  0022f	eb 7b		 jmp	 SHORT $LN2@setString
$LN9@setString:

; 301  : 	case LOG_DATE_YYYYMMDDHHMMSS3:
; 302  : 	case LOG_DATE_YYYYMMDDHHMMSS6:
; 303  : 	case LOG_DATE_YYYYMMDDHHMMSS9:
; 304  : 	default:
; 305  : 		nLen = _stprintf(pTarget, pFormat, m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday, m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec, m_tmval.tv_nsec);

  00231	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00239	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  0023c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00240	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00248	8b 00		 mov	 eax, DWORD PTR [rax]
  0024a	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0024e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00256	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00259	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0025d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00265	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00268	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0026c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00274	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00277	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0027b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00283	44 8b 48 10	 mov	 r9d, DWORD PTR [rax+16]
  00287	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0028f	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00293	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR pFormat$[rsp]
  0029b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pTarget$[rsp]
  002a3	e8 00 00 00 00	 call	 sprintf
  002a8	89 44 24 50	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@setString:

; 306  : 		break;
; 307  : 	}
; 308  : 	return nLen;

  002ac	8b 44 24 50	 mov	 eax, DWORD PTR nLen$[rsp]

; 309  : }

  002b0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002b5	48 33 cc	 xor	 rcx, rsp
  002b8	e8 00 00 00 00	 call	 __security_check_cookie
  002bd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002c1	c3		 ret	 0
?setString@CDateTime@@QEAAHPEAD0W4DT_FORMAT@@@Z ENDP	; CDateTime::setString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?addDateString@CDateTime@@QEAAPEBDHD@Z
_TEXT	SEGMENT
err$ = 64
tv91 = 72
tv131 = 80
timer$ = 88
t$ = 96
__$ArrayPad$ = 136
this$ = 160
nAddDay$ = 168
f$ = 176
?addDateString@CDateTime@@QEAAPEBDHD@Z PROC		; CDateTime::addDateString, COMDAT

; 371  : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 372  : 	time_t timer = time(NULL) + (nAddDay * 24 * 60 * 60);

  00027	33 c9		 xor	 ecx, ecx
  00029	e8 00 00 00 00	 call	 time
  0002e	6b 8c 24 a8 00
	00 00 18	 imul	 ecx, DWORD PTR nAddDay$[rsp], 24
  00036	6b c9 3c	 imul	 ecx, ecx, 60		; 0000003cH
  00039	6b c9 3c	 imul	 ecx, ecx, 60		; 0000003cH
  0003c	48 63 c9	 movsxd	 rcx, ecx
  0003f	48 03 c1	 add	 rax, rcx
  00042	48 89 44 24 58	 mov	 QWORD PTR timer$[rsp], rax

; 373  : 	struct tm t;
; 374  : 
; 375  : 	errno_t err = localtime_s(&t, &timer);

  00047	48 8d 54 24 58	 lea	 rdx, QWORD PTR timer$[rsp]
  0004c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR t$[rsp]
  00051	e8 00 00 00 00	 call	 localtime_s
  00056	89 44 24 40	 mov	 DWORD PTR err$[rsp], eax

; 376  : 	if (err) _tprintf(_T("%s %d ERROR _localtime_s\n"), __FUNCTION__, __LINE__);

  0005a	83 7c 24 40 00	 cmp	 DWORD PTR err$[rsp], 0
  0005f	74 19		 je	 SHORT $LN2@addDateStr
  00061	41 b8 78 01 00
	00		 mov	 r8d, 376		; 00000178H
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81377
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81378
  00075	e8 00 00 00 00	 call	 printf
$LN2@addDateStr:

; 377  : 
; 378  : 	if (f) {

  0007a	0f be 84 24 b0
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  00082	85 c0		 test	 eax, eax
  00084	74 5e		 je	 SHORT $LN3@addDateStr

; 379  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", t.tm_year + 1900, f, t.tm_mon+1, f, t.tm_mday);

  00086	0f be 84 24 b0
	00 00 00	 movsx	 eax, BYTE PTR f$[rsp]
  0008e	8b 4c 24 70	 mov	 ecx, DWORD PTR t$[rsp+16]
  00092	ff c1		 inc	 ecx
  00094	0f be 94 24 b0
	00 00 00	 movsx	 edx, BYTE PTR f$[rsp]
  0009c	44 8b 44 24 74	 mov	 r8d, DWORD PTR t$[rsp+20]
  000a1	41 81 c0 6c 07
	00 00		 add	 r8d, 1900		; 0000076cH
  000a8	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR this$[rsp]
  000b0	49 83 c1 38	 add	 r9, 56			; 00000038H
  000b4	4c 89 4c 24 48	 mov	 QWORD PTR tv91[rsp], r9
  000b9	44 8b 54 24 6c	 mov	 r10d, DWORD PTR t$[rsp+12]
  000be	44 89 54 24 30	 mov	 DWORD PTR [rsp+48], r10d
  000c3	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000cb	44 8b ca	 mov	 r9d, edx
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81381
  000d5	48 8b 44 24 48	 mov	 rax, QWORD PTR tv91[rsp]
  000da	48 8b c8	 mov	 rcx, rax
  000dd	e8 00 00 00 00	 call	 sprintf

; 380  : 	}
; 381  : 	else {

  000e2	eb 45		 jmp	 SHORT $LN4@addDateStr
$LN3@addDateStr:

; 382  : 		_stprintf(m_szDate, "%04d%02d%02d", t.tm_year + 1900, t.tm_mon + 1, t.tm_mday);

  000e4	8b 44 24 70	 mov	 eax, DWORD PTR t$[rsp+16]
  000e8	ff c0		 inc	 eax
  000ea	8b 4c 24 74	 mov	 ecx, DWORD PTR t$[rsp+20]
  000ee	81 c1 6c 07 00
	00		 add	 ecx, 1900		; 0000076cH
  000f4	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  000fc	48 83 c2 38	 add	 rdx, 56			; 00000038H
  00100	48 89 54 24 50	 mov	 QWORD PTR tv131[rsp], rdx
  00105	44 8b 44 24 6c	 mov	 r8d, DWORD PTR t$[rsp+12]
  0010a	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  0010f	44 8b c8	 mov	 r9d, eax
  00112	44 8b c1	 mov	 r8d, ecx
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81382
  0011c	48 8b 44 24 50	 mov	 rax, QWORD PTR tv131[rsp]
  00121	48 8b c8	 mov	 rcx, rax
  00124	e8 00 00 00 00	 call	 sprintf
$LN4@addDateStr:

; 383  : 	}
; 384  : 	return m_szDate;

  00129	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00131	48 83 c0 38	 add	 rax, 56			; 00000038H

; 385  : }

  00135	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013d	48 33 cc	 xor	 rcx, rsp
  00140	e8 00 00 00 00	 call	 __security_check_cookie
  00145	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0014c	c3		 ret	 0
?addDateString@CDateTime@@QEAAPEBDHD@Z ENDP		; CDateTime::addDateString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?TimeString@CDateTime@@QEAAPEBD_N@Z
_TEXT	SEGMENT
this$ = 64
f$ = 72
?TimeString@CDateTime@@QEAAPEBD_N@Z PROC		; CDateTime::TimeString, COMDAT

; 359  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 360  : 	if (f) {

  0000d	0f b6 44 24 48	 movzx	 eax, BYTE PTR f$[rsp]
  00012	85 c0		 test	 eax, eax
  00014	74 37		 je	 SHORT $LN2@TimeString

; 361  : 		_stprintf(m_szTime, "%02d:%02d:%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 83 c0 44	 add	 rax, 68			; 00000044H
  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00024	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00026	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002f	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00038	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81366
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 sprintf

; 362  : 	}
; 363  : 	else {

  0004b	eb 35		 jmp	 SHORT $LN3@TimeString
$LN2@TimeString:

; 364  : 		_stprintf(m_szTime, "%02d%02d%02d", m_tm.tm_hour, m_tm.tm_min, m_tm.tm_sec);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00052	48 83 c0 44	 add	 rax, 68			; 00000044H
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0005d	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00066	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  0006a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006f	44 8b 41 08	 mov	 r8d, DWORD PTR [rcx+8]
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81367
  0007a	48 8b c8	 mov	 rcx, rax
  0007d	e8 00 00 00 00	 call	 sprintf
$LN3@TimeString:

; 365  : 	}
; 366  : 	return m_szTime;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00087	48 83 c0 44	 add	 rax, 68			; 00000044H

; 367  : 
; 368  : }

  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
?TimeString@CDateTime@@QEAAPEBD_N@Z ENDP		; CDateTime::TimeString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?DateString2@CDateTime@@QEAAPEBDD@Z
_TEXT	SEGMENT
tv88 = 64
pyear$ = 72
__$ArrayPad$ = 80
this$ = 112
f$ = 120
?DateString2@CDateTime@@QEAAPEBDD@Z PROC		; CDateTime::DateString2, COMDAT

; 348  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 349  : 	char pyear[6];
; 350  : 	sprintf(pyear, "%d", m_tm.tm_year);

  0001c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00021	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81354
  0002c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR pyear$[rsp]
  00031	e8 00 00 00 00	 call	 sprintf

; 351  : 	sprintf(pyear, "%s", pyear + 2);

  00036	48 8d 44 24 4a	 lea	 rax, QWORD PTR pyear$[rsp+2]
  0003b	4c 8b c0	 mov	 r8, rax
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81355
  00045	48 8d 4c 24 48	 lea	 rcx, QWORD PTR pyear$[rsp]
  0004a	e8 00 00 00 00	 call	 sprintf

; 352  : 
; 353  : 	if(f)_stprintf(m_szDate, "%s%c%02d%c%02d", pyear, f, m_tm.tm_mon, f, m_tm.tm_mday);

  0004f	0f be 44 24 78	 movsx	 eax, BYTE PTR f$[rsp]
  00054	85 c0		 test	 eax, eax
  00056	74 54		 je	 SHORT $LN2@DateString
  00058	0f be 44 24 78	 movsx	 eax, BYTE PTR f$[rsp]
  0005d	0f be 4c 24 78	 movsx	 ecx, BYTE PTR f$[rsp]
  00062	48 8b 54 24 70	 mov	 rdx, QWORD PTR this$[rsp]
  00067	48 83 c2 38	 add	 rdx, 56			; 00000038H
  0006b	48 89 54 24 40	 mov	 QWORD PTR tv88[rsp], rdx
  00070	4c 8b 44 24 70	 mov	 r8, QWORD PTR this$[rsp]
  00075	45 8b 40 0c	 mov	 r8d, DWORD PTR [r8+12]
  00079	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  0007e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00082	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00087	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0008a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008e	44 8b c9	 mov	 r9d, ecx
  00091	4c 8d 44 24 48	 lea	 r8, QWORD PTR pyear$[rsp]
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81358
  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR tv88[rsp]
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 sprintf
  000aa	eb 32		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 354  : 	else _stprintf(m_szDate, "%0s%02d%02d", pyear, m_tm.tm_mon, m_tm.tm_mday);

  000ac	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000b1	48 83 c0 38	 add	 rax, 56			; 00000038H
  000b5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  000bd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000c1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000c6	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  000ca	4c 8d 44 24 48	 lea	 r8, QWORD PTR pyear$[rsp]
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81359
  000d6	48 8b c8	 mov	 rcx, rax
  000d9	e8 00 00 00 00	 call	 sprintf
$LN3@DateString:

; 355  : 	return m_szDate;

  000de	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000e3	48 83 c0 38	 add	 rax, 56			; 00000038H

; 356  : }

  000e7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ec	48 33 cc	 xor	 rcx, rsp
  000ef	e8 00 00 00 00	 call	 __security_check_cookie
  000f4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000f8	c3		 ret	 0
?DateString2@CDateTime@@QEAAPEBDD@Z ENDP		; CDateTime::DateString2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?DateString@CDateTime@@QEAAPEBDD@Z
_TEXT	SEGMENT
tv81 = 64
this$ = 96
f$ = 104
?DateString@CDateTime@@QEAAPEBDD@Z PROC			; CDateTime::DateString, COMDAT

; 336  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 337  : 	if (f) {

  0000d	0f be 44 24 68	 movsx	 eax, BYTE PTR f$[rsp]
  00012	85 c0		 test	 eax, eax
  00014	74 58		 je	 SHORT $LN2@DateString

; 338  : 		_stprintf(m_szDate, "%04d%c%02d%c%02d", m_tm.tm_year, f, m_tm.tm_mon, f, m_tm.tm_mday);

  00016	0f be 44 24 68	 movsx	 eax, BYTE PTR f$[rsp]
  0001b	0f be 4c 24 68	 movsx	 ecx, BYTE PTR f$[rsp]
  00020	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  00025	48 83 c2 38	 add	 rdx, 56			; 00000038H
  00029	48 89 54 24 40	 mov	 QWORD PTR tv81[rsp], rdx
  0002e	4c 8b 44 24 60	 mov	 r8, QWORD PTR this$[rsp]
  00033	45 8b 40 0c	 mov	 r8d, DWORD PTR [r8+12]
  00037	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  0003c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00045	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00048	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0004c	44 8b c9	 mov	 r9d, ecx
  0004f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00054	44 8b 40 14	 mov	 r8d, DWORD PTR [rax+20]
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81347
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv81[rsp]
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 sprintf

; 339  : 	}
; 340  : 	else {

  0006c	eb 36		 jmp	 SHORT $LN3@DateString
$LN2@DateString:

; 341  : 		_stprintf(m_szDate, "%04d%02d%02d", m_tm.tm_year, m_tm.tm_mon, m_tm.tm_mday);

  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00073	48 83 c0 38	 add	 rax, 56			; 00000038H
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0007f	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00083	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00088	44 8b 49 10	 mov	 r9d, DWORD PTR [rcx+16]
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00091	44 8b 41 14	 mov	 r8d, DWORD PTR [rcx+20]
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81348
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	e8 00 00 00 00	 call	 sprintf
$LN3@DateString:

; 342  : 	}
; 343  : 	return m_szDate;

  000a4	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000a9	48 83 c0 38	 add	 rax, 56			; 00000038H

; 344  : }

  000ad	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b1	c3		 ret	 0
?DateString@CDateTime@@QEAAPEBDD@Z ENDP			; CDateTime::DateString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z
_TEXT	SEGMENT
tv87 = 32
t$1 = 40
ltm$ = 48
this$ = 96
nType$ = 104
nTz$ = 112
?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z PROC ; CDateTime::SetCurrentTime, COMDAT

; 179  : {

$LN12:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 180  : 	struct	tm	*ltm = &m_tm;

  00014	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 89 44 24 30	 mov	 QWORD PTR ltm$[rsp], rax

; 181  : 	m_szTimezone[0] = 0;

  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	c6 44 01 5c 00	 mov	 BYTE PTR [rcx+rax+92], 0

; 182  : 
; 183  : 	if (nTz) {

  00031	83 7c 24 70 00	 cmp	 DWORD PTR nTz$[rsp], 0
  00036	74 44		 je	 SHORT $LN4@SetCurrent

; 184  : 		if (nTz == TZ_UTC) {

  00038	83 7c 24 70 01	 cmp	 DWORD PTR nTz$[rsp], 1
  0003d	75 1c		 jne	 SHORT $LN5@SetCurrent

; 185  : 			_tcscpy(m_szTimezone, _T("+00:00"));

  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81282
  0004b	48 8d 78 5c	 lea	 rdi, QWORD PTR [rax+92]
  0004f	48 8b f1	 mov	 rsi, rcx
  00052	b9 07 00 00 00	 mov	 ecx, 7
  00057	f3 a4		 rep movsb
  00059	eb 21		 jmp	 SHORT $LN6@SetCurrent
$LN5@SetCurrent:

; 186  : 		}
; 187  : 		else if (nTz == TZ_KST) {

  0005b	83 7c 24 70 02	 cmp	 DWORD PTR nTz$[rsp], 2
  00060	75 1a		 jne	 SHORT $LN7@SetCurrent

; 188  : 			_tcscpy(m_szTimezone, _T("+09:00"));

  00062	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81284
  0006e	48 8d 78 5c	 lea	 rdi, QWORD PTR [rax+92]
  00072	48 8b f1	 mov	 rsi, rcx
  00075	b9 07 00 00 00	 mov	 ecx, 7
  0007a	f3 a4		 rep movsb
$LN7@SetCurrent:
$LN6@SetCurrent:
$LN4@SetCurrent:

; 189  : 		}
; 190  : 	}
; 191  : 
; 192  : 	switch (nType) {

  0007c	8b 44 24 68	 mov	 eax, DWORD PTR nType$[rsp]
  00080	89 44 24 20	 mov	 DWORD PTR tv87[rsp], eax
  00084	83 7c 24 20 01	 cmp	 DWORD PTR tv87[rsp], 1
  00089	74 17		 je	 SHORT $LN8@SetCurrent
  0008b	83 7c 24 20 02	 cmp	 DWORD PTR tv87[rsp], 2
  00090	74 31		 je	 SHORT $LN9@SetCurrent
  00092	83 7c 24 20 02	 cmp	 DWORD PTR tv87[rsp], 2
  00097	7e 4d		 jle	 SHORT $LN2@SetCurrent
  00099	83 7c 24 20 04	 cmp	 DWORD PTR tv87[rsp], 4
  0009e	7e 33		 jle	 SHORT $LN10@SetCurrent
  000a0	eb 44		 jmp	 SHORT $LN2@SetCurrent
$LN8@SetCurrent:

; 193  : 	case DT_SEC: { time_t t = time(NULL);  uptoSeconds(nTz, t);	break; }

  000a2	33 c9		 xor	 ecx, ecx
  000a4	e8 00 00 00 00	 call	 time
  000a9	48 89 44 24 28	 mov	 QWORD PTR t$1[rsp], rax
  000ae	4c 8b 44 24 28	 mov	 r8, QWORD PTR t$1[rsp]
  000b3	8b 54 24 70	 mov	 edx, DWORD PTR nTz$[rsp]
  000b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000bc	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds
  000c1	eb 23		 jmp	 SHORT $LN2@SetCurrent
$LN9@SetCurrent:

; 194  : 	case DT_MILLISEC: uptoMilliSeconds(nTz);	break;

  000c3	8b 54 24 70	 mov	 edx, DWORD PTR nTz$[rsp]
  000c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?uptoMilliSeconds@CDateTime@@AEAAXW4TZ_TYPE@@@Z ; CDateTime::uptoMilliSeconds
  000d1	eb 13		 jmp	 SHORT $LN2@SetCurrent
$LN10@SetCurrent:

; 195  : 	case DT_MICROSEC: case DT_NANOSEC: uptoMicroseconds(nTz, nType); break;

  000d3	44 8b 44 24 68	 mov	 r8d, DWORD PTR nType$[rsp]
  000d8	8b 54 24 70	 mov	 edx, DWORD PTR nTz$[rsp]
  000dc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000e1	e8 00 00 00 00	 call	 ?uptoMicroseconds@CDateTime@@AEAAXW4TZ_TYPE@@W4DT_TYPE@@@Z ; CDateTime::uptoMicroseconds
$LN2@SetCurrent:

; 196  : 	}
; 197  : }

  000e6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ea	5f		 pop	 rdi
  000eb	5e		 pop	 rsi
  000ec	c3		 ret	 0
?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ENDP ; CDateTime::SetCurrentTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetSecondsValue@CDateTime@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 8
nSec$ = 16
?SetSecondsValue@CDateTime@@QEAAXH@Z PROC		; CDateTime::SetSecondsValue, COMDAT

; 323  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 324  : 	m_tm.tm_year = 0;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000e	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 325  : 	m_tm.tm_mon = 0;

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001a	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 326  : 	m_tm.tm_mday = nSec/86400; //(24 * 3600)

  00021	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  00025	99		 cdq
  00026	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0002b	f7 f9		 idiv	 ecx
  0002d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00032	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 327  : 	nSec = nSec % 86400;

  00035	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  00039	99		 cdq
  0003a	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0003f	f7 f9		 idiv	 ecx
  00041	8b c2		 mov	 eax, edx
  00043	89 44 24 10	 mov	 DWORD PTR nSec$[rsp], eax

; 328  : 	m_tm.tm_hour = nSec/3600;

  00047	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  0004b	99		 cdq
  0004c	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00051	f7 f9		 idiv	 ecx
  00053	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00058	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 329  : 	nSec = nSec % 3600;

  0005b	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  0005f	99		 cdq
  00060	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00065	f7 f9		 idiv	 ecx
  00067	8b c2		 mov	 eax, edx
  00069	89 44 24 10	 mov	 DWORD PTR nSec$[rsp], eax

; 330  : 	m_tm.tm_min = nSec / 60;

  0006d	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  00071	99		 cdq
  00072	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00077	f7 f9		 idiv	 ecx
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0007e	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 331  : 	nSec = nSec % 60;

  00081	8b 44 24 10	 mov	 eax, DWORD PTR nSec$[rsp]
  00085	99		 cdq
  00086	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0008b	f7 f9		 idiv	 ecx
  0008d	8b c2		 mov	 eax, edx
  0008f	89 44 24 10	 mov	 DWORD PTR nSec$[rsp], eax

; 332  : 	m_tm.tm_sec = nSec;

  00093	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00098	8b 4c 24 10	 mov	 ecx, DWORD PTR nSec$[rsp]
  0009c	89 08		 mov	 DWORD PTR [rax], ecx

; 333  : }

  0009e	c3		 ret	 0
?SetSecondsValue@CDateTime@@QEAAXH@Z ENDP		; CDateTime::SetSecondsValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?SetTimeValue@CDateTime@@QEAAXPEA_J@Z
_TEXT	SEGMENT
this$ = 48
ltmVal$ = 56
?SetTimeValue@CDateTime@@QEAAXPEA_J@Z PROC		; CDateTime::SetTimeValue, COMDAT

; 318  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 319  : 	uptoSeconds(TZ_NONE, *ltmVal);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR ltmVal$[rsp]
  00013	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?uptoSeconds@CDateTime@@AEAAXW4TZ_TYPE@@_J@Z ; CDateTime::uptoSeconds

; 320  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
?SetTimeValue@CDateTime@@QEAAXPEA_J@Z ENDP		; CDateTime::SetTimeValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??1CDateTime@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1CDateTime@@QEAA@XZ PROC				; CDateTime::~CDateTime, COMDAT

; 312  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 313  :     
; 314  : }

  00005	c3		 ret	 0
??1CDateTime@@QEAA@XZ ENDP				; CDateTime::~CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z
_TEXT	SEGMENT
this$ = 48
nType$ = 56
nTz$ = 64
??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z PROC	; CDateTime::CDateTime, COMDAT

; 173  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 174  : 	if (nType == DT_NONE) return;

  00012	83 7c 24 38 00	 cmp	 DWORD PTR nType$[rsp], 0
  00017	75 02		 jne	 SHORT $LN2@CDateTime
  00019	eb 13		 jmp	 SHORT $LN1@CDateTime
$LN2@CDateTime:

; 175  : 	SetCurrentTime(nType, nTz);

  0001b	44 8b 44 24 40	 mov	 r8d, DWORD PTR nTz$[rsp]
  00020	8b 54 24 38	 mov	 edx, DWORD PTR nType$[rsp]
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?SetCurrentTime@CDateTime@@QEAAXW4DT_TYPE@@W4TZ_TYPE@@@Z ; CDateTime::SetCurrentTime
$LN1@CDateTime:

; 176  : }

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
??0CDateTime@@QEAA@W4DT_TYPE@@W4TZ_TYPE@@@Z ENDP	; CDateTime::CDateTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getTime@CFileTime@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
?getTime@CFileTime@@QEAAHXZ PROC			; CFileTime::getTime, COMDAT

; 197  : 	inline int getTime() { return m_nTime; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0000d	c3		 ret	 0
?getTime@CFileTime@@QEAAHXZ ENDP			; CFileTime::getTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\comdatetime.h
;	COMDAT ?getDate@CFileTime@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
?getDate@CFileTime@@QEAAHXZ PROC			; CFileTime::getDate, COMDAT

; 196  : 	inline int getDate() { return m_nDate; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]
  0000c	c3		 ret	 0
?getDate@CFileTime@@QEAAHXZ ENDP			; CFileTime::getDate
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
pCompare$ = 72
eOP$ = 80
?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z PROC	; CFileTime::isCompare, COMDAT

; 145  : {

$LN26:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 146  : 	switch (eOP)

  00013	8b 44 24 50	 mov	 eax, DWORD PTR eOP$[rsp]
  00017	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0001b	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  0001f	ff c8		 dec	 eax
  00021	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00025	83 7c 24 20 05	 cmp	 DWORD PTR tv64[rsp], 5
  0002a	0f 87 c2 01 00
	00		 ja	 $LN2@isCompare
  00030	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN25@isCompare[rcx+rax*4]
  00043	48 03 c1	 add	 rax, rcx
  00046	ff e0		 jmp	 rax
$LN4@isCompare:

; 147  : 	{
; 148  : 	case eOperator_EQ: if (pCompare->getDate() == m_nDate && pCompare->getTime() == m_nTime) return true; return false;

  00048	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  0004d	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00057	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00059	75 1b		 jne	 SHORT $LN5@isCompare
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00060	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  0006d	75 07		 jne	 SHORT $LN5@isCompare
  0006f	b0 01		 mov	 al, 1
  00071	e9 7e 01 00 00	 jmp	 $LN1@isCompare
$LN5@isCompare:
  00076	32 c0		 xor	 al, al
  00078	e9 77 01 00 00	 jmp	 $LN1@isCompare
$LN6@isCompare:

; 149  : 	case eOperator_NE: if (pCompare->getDate() != m_nDate && pCompare->getTime() != m_nTime) return true; return false;

  0007d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00082	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0008c	3b 01		 cmp	 eax, DWORD PTR [rcx]
  0008e	74 1b		 je	 SHORT $LN7@isCompare
  00090	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00095	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0009f	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  000a2	74 07		 je	 SHORT $LN7@isCompare
  000a4	b0 01		 mov	 al, 1
  000a6	e9 49 01 00 00	 jmp	 $LN1@isCompare
$LN7@isCompare:
  000ab	32 c0		 xor	 al, al
  000ad	e9 42 01 00 00	 jmp	 $LN1@isCompare
$LN8@isCompare:

; 150  : 	case eOperator_GT:
; 151  : 		if (pCompare->getDate() < m_nDate) return true;

  000b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000b7	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  000bc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c1	3b 01		 cmp	 eax, DWORD PTR [rcx]
  000c3	7d 07		 jge	 SHORT $LN9@isCompare
  000c5	b0 01		 mov	 al, 1
  000c7	e9 28 01 00 00	 jmp	 $LN1@isCompare
$LN9@isCompare:

; 152  : 		if (pCompare->getDate() > m_nDate) return false;

  000cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000d1	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000db	3b 01		 cmp	 eax, DWORD PTR [rcx]
  000dd	7e 07		 jle	 SHORT $LN10@isCompare
  000df	32 c0		 xor	 al, al
  000e1	e9 0e 01 00 00	 jmp	 $LN1@isCompare
$LN10@isCompare:

; 153  : 		if (pCompare->getTime() < m_nTime) return true; return false;

  000e6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  000eb	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  000f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000f5	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  000f8	7d 07		 jge	 SHORT $LN11@isCompare
  000fa	b0 01		 mov	 al, 1
  000fc	e9 f3 00 00 00	 jmp	 $LN1@isCompare
$LN11@isCompare:
  00101	32 c0		 xor	 al, al
  00103	e9 ec 00 00 00	 jmp	 $LN1@isCompare
$LN12@isCompare:

; 154  : 	case eOperator_LT:
; 155  : 		if (pCompare->getDate() > m_nDate) return true;

  00108	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  0010d	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00112	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00117	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00119	7e 07		 jle	 SHORT $LN13@isCompare
  0011b	b0 01		 mov	 al, 1
  0011d	e9 d2 00 00 00	 jmp	 $LN1@isCompare
$LN13@isCompare:

; 156  : 		if (pCompare->getDate() < m_nDate) return false;

  00122	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00127	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  0012c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00131	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00133	7d 07		 jge	 SHORT $LN14@isCompare
  00135	32 c0		 xor	 al, al
  00137	e9 b8 00 00 00	 jmp	 $LN1@isCompare
$LN14@isCompare:

; 157  : 		if (pCompare->getTime() > m_nTime) return true; return false;

  0013c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00141	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0014b	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  0014e	7e 07		 jle	 SHORT $LN15@isCompare
  00150	b0 01		 mov	 al, 1
  00152	e9 9d 00 00 00	 jmp	 $LN1@isCompare
$LN15@isCompare:
  00157	32 c0		 xor	 al, al
  00159	e9 96 00 00 00	 jmp	 $LN1@isCompare
$LN16@isCompare:

; 158  : 	case eOperator_GE:
; 159  : 		if (pCompare->getDate() < m_nDate) return true;

  0015e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00163	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  00168	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0016d	3b 01		 cmp	 eax, DWORD PTR [rcx]
  0016f	7d 04		 jge	 SHORT $LN17@isCompare
  00171	b0 01		 mov	 al, 1
  00173	eb 7f		 jmp	 SHORT $LN1@isCompare
$LN17@isCompare:

; 160  : 		if (pCompare->getDate() > m_nDate) return false;

  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  0017a	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  0017f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00184	3b 01		 cmp	 eax, DWORD PTR [rcx]
  00186	7e 04		 jle	 SHORT $LN18@isCompare
  00188	32 c0		 xor	 al, al
  0018a	eb 68		 jmp	 SHORT $LN1@isCompare
$LN18@isCompare:

; 161  : 		if (pCompare->getTime() <= m_nTime) return true; return false;

  0018c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  00191	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  00196	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0019b	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  0019e	7f 04		 jg	 SHORT $LN19@isCompare
  001a0	b0 01		 mov	 al, 1
  001a2	eb 50		 jmp	 SHORT $LN1@isCompare
$LN19@isCompare:
  001a4	32 c0		 xor	 al, al
  001a6	eb 4c		 jmp	 SHORT $LN1@isCompare
$LN20@isCompare:

; 162  : 	case eOperator_LE:
; 163  : 		if (pCompare->getDate() > m_nDate) return true;

  001a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001ad	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  001b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001b7	3b 01		 cmp	 eax, DWORD PTR [rcx]
  001b9	7e 04		 jle	 SHORT $LN21@isCompare
  001bb	b0 01		 mov	 al, 1
  001bd	eb 35		 jmp	 SHORT $LN1@isCompare
$LN21@isCompare:

; 164  : 		if (pCompare->getDate() < m_nDate) return false;

  001bf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001c4	e8 00 00 00 00	 call	 ?getDate@CFileTime@@QEAAHXZ ; CFileTime::getDate
  001c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001ce	3b 01		 cmp	 eax, DWORD PTR [rcx]
  001d0	7d 04		 jge	 SHORT $LN22@isCompare
  001d2	32 c0		 xor	 al, al
  001d4	eb 1e		 jmp	 SHORT $LN1@isCompare
$LN22@isCompare:

; 165  : 		if (pCompare->getTime() >= m_nTime) return true; return false;

  001d6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pCompare$[rsp]
  001db	e8 00 00 00 00	 call	 ?getTime@CFileTime@@QEAAHXZ ; CFileTime::getTime
  001e0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001e5	3b 41 04	 cmp	 eax, DWORD PTR [rcx+4]
  001e8	7c 04		 jl	 SHORT $LN23@isCompare
  001ea	b0 01		 mov	 al, 1
  001ec	eb 06		 jmp	 SHORT $LN1@isCompare
$LN23@isCompare:
  001ee	32 c0		 xor	 al, al
  001f0	eb 02		 jmp	 SHORT $LN1@isCompare
$LN2@isCompare:

; 166  : 	}
; 167  : 	return false;

  001f2	32 c0		 xor	 al, al
$LN1@isCompare:

; 168  : }

  001f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001f8	c3		 ret	 0
  001f9	0f 1f 00	 npad	 3
$LN25@isCompare:
  001fc	00 00 00 00	 DD	 $LN4@isCompare
  00200	00 00 00 00	 DD	 $LN6@isCompare
  00204	00 00 00 00	 DD	 $LN8@isCompare
  00208	00 00 00 00	 DD	 $LN12@isCompare
  0020c	00 00 00 00	 DD	 $LN16@isCompare
  00210	00 00 00 00	 DD	 $LN20@isCompare
?isCompare@CFileTime@@QEAA_NPEAV1@W4E_OPERATOR@@@Z ENDP	; CFileTime::isCompare
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z
_TEXT	SEGMENT
sysTm$ = 48
szDate$ = 64
__$ArrayPad$ = 80
this$ = 112
pftWrite$ = 120
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z PROC	; CFileTime::setFileTime, COMDAT

; 84   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 85   : 	TCHAR szDate[16];
; 86   : 
; 87   : 	SYSTEMTIME	sysTm;
; 88   : 	FileTimeToSystemTime(pftWrite, &sysTm);

  0001d	48 8d 54 24 30	 lea	 rdx, QWORD PTR sysTm$[rsp]
  00022	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pftWrite$[rsp]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FileTimeToSystemTime

; 89   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  0002d	0f b7 44 24 36	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  00032	0f b7 4c 24 32	 movzx	 ecx, WORD PTR sysTm$[rsp+2]
  00037	0f b7 54 24 30	 movzx	 edx, WORD PTR sysTm$[rsp]
  0003c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00040	44 8b c9	 mov	 r9d, ecx
  00043	44 8b c2	 mov	 r8d, edx
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81209
  0004d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szDate$[rsp]
  00052	e8 00 00 00 00	 call	 sprintf

; 90   : 	m_nDate = atoi(szDate);

  00057	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szDate$[rsp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00062	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00067	89 01		 mov	 DWORD PTR [rcx], eax

; 91   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  00069	0f b7 44 24 3c	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  0006e	0f b7 4c 24 3a	 movzx	 ecx, WORD PTR sysTm$[rsp+10]
  00073	0f b7 54 24 38	 movzx	 edx, WORD PTR sysTm$[rsp+8]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	44 8b c9	 mov	 r9d, ecx
  0007f	44 8b c2	 mov	 r8d, edx
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81210
  00089	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szDate$[rsp]
  0008e	e8 00 00 00 00	 call	 sprintf

; 92   : 	m_nTime = atoi(szDate);

  00093	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szDate$[rsp]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0009e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000a3	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 93   : 	return 1;

  000a6	b8 01 00 00 00	 mov	 eax, 1

; 94   : }

  000ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b0	48 33 cc	 xor	 rcx, rsp
  000b3	e8 00 00 00 00	 call	 __security_check_cookie
  000b8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000bc	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEAU_FILETIME@@@Z ENDP	; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QEAAHPEA_J@Z
_TEXT	SEGMENT
gm_timeInfo$ = 48
sMtm$ = 56
szDate$ = 96
__$ArrayPad$ = 112
this$ = 160
fileTime$ = 168
?setFileTime@CFileTime@@QEAAHPEA_J@Z PROC		; CFileTime::setFileTime, COMDAT

; 118  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 119  : 	struct	tm *gm_timeInfo, sMtm;
; 120  : 	TCHAR szDate[16];
; 121  : #ifndef WIN32
; 122  : 	gm_timeInfo = gmtime_r(&fileTime, gm_timeInfo);
; 123  : #else
; 124  : 	gm_timeInfo = gmtime(fileTime);

  00022	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fileTime$[rsp]
  0002a	e8 00 00 00 00	 call	 gmtime
  0002f	48 89 44 24 30	 mov	 QWORD PTR gm_timeInfo$[rsp], rax

; 125  : 	memcpy(&sMtm, gm_timeInfo, sizeof(sMtm));

  00034	48 8d 44 24 38	 lea	 rax, QWORD PTR sMtm$[rsp]
  00039	48 8b f8	 mov	 rdi, rax
  0003c	48 8b 74 24 30	 mov	 rsi, QWORD PTR gm_timeInfo$[rsp]
  00041	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00046	f3 a4		 rep movsb

; 126  : #endif
; 127  : 	sMtm.tm_year += 1900;

  00048	8b 44 24 4c	 mov	 eax, DWORD PTR sMtm$[rsp+20]
  0004c	05 6c 07 00 00	 add	 eax, 1900		; 0000076cH
  00051	89 44 24 4c	 mov	 DWORD PTR sMtm$[rsp+20], eax

; 128  : 	sMtm.tm_mon += 1;

  00055	8b 44 24 48	 mov	 eax, DWORD PTR sMtm$[rsp+16]
  00059	ff c0		 inc	 eax
  0005b	89 44 24 48	 mov	 DWORD PTR sMtm$[rsp+16], eax

; 129  : 
; 130  : 	_stprintf(szDate, "%04d%02d%02d", sMtm.tm_year, sMtm.tm_mon, sMtm.tm_mday);

  0005f	8b 44 24 44	 mov	 eax, DWORD PTR sMtm$[rsp+12]
  00063	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00067	44 8b 4c 24 48	 mov	 r9d, DWORD PTR sMtm$[rsp+16]
  0006c	44 8b 44 24 4c	 mov	 r8d, DWORD PTR sMtm$[rsp+20]
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81231
  00078	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szDate$[rsp]
  0007d	e8 00 00 00 00	 call	 sprintf

; 131  : 	m_nDate = atoi(szDate);

  00082	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szDate$[rsp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0008d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00095	89 01		 mov	 DWORD PTR [rcx], eax

; 132  : 	_stprintf(szDate, "%02d%02d%02d", sMtm.tm_hour, sMtm.tm_min, sMtm.tm_sec);

  00097	8b 44 24 38	 mov	 eax, DWORD PTR sMtm$[rsp]
  0009b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009f	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR sMtm$[rsp+4]
  000a4	44 8b 44 24 40	 mov	 r8d, DWORD PTR sMtm$[rsp+8]
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81232
  000b0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szDate$[rsp]
  000b5	e8 00 00 00 00	 call	 sprintf

; 133  : 	m_nTime = atoi(szDate);

  000ba	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szDate$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000c5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cd	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 134  : 	printf("gm time and date : %s\n", asctime(gm_timeInfo));

  000d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gm_timeInfo$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_asctime
  000db	48 8b d0	 mov	 rdx, rax
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG81233
  000e5	e8 00 00 00 00	 call	 printf

; 135  : 
; 136  : 	return 1;

  000ea	b8 01 00 00 00	 mov	 eax, 1

; 137  : }

  000ef	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f4	48 33 cc	 xor	 rcx, rsp
  000f7	e8 00 00 00 00	 call	 __security_check_cookie
  000fc	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00103	5f		 pop	 rdi
  00104	5e		 pop	 rsi
  00105	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEA_J@Z ENDP		; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?setFileTime@CFileTime@@QEAAHPEAD@Z
_TEXT	SEGMENT
hFile$ = 64
ltm$ = 72
sysTm$ = 80
ftWrite$ = 96
m_tm$ = 104
szDate$ = 144
__$ArrayPad$ = 160
this$ = 192
pFilePath$ = 200
?setFileTime@CFileTime@@QEAAHPEAD@Z PROC		; CFileTime::setFileTime, COMDAT

; 51   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 52   : 	struct	tm	m_tm, *ltm = &m_tm;

  00023	48 8d 44 24 68	 lea	 rax, QWORD PTR m_tm$[rsp]
  00028	48 89 44 24 48	 mov	 QWORD PTR ltm$[rsp], rax

; 53   : 	TCHAR szDate[16];
; 54   : 	FILETIME ftWrite;
; 55   : 	HANDLE hFile = CreateFile(pFilePath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

  0002d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00036	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR [rsp+40], 128	; 00000080H
  0003e	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00046	45 33 c9	 xor	 r9d, r9d
  00049	41 b8 01 00 00
	00		 mov	 r8d, 1
  0004f	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00054	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pFilePath$[rsp]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  00062	48 89 44 24 40	 mov	 QWORD PTR hFile$[rsp], rax

; 56   : 	if (hFile == INVALID_HANDLE_VALUE) {

  00067	48 83 7c 24 40
	ff		 cmp	 QWORD PTR hFile$[rsp], -1
  0006d	75 0a		 jne	 SHORT $LN2@setFileTim

; 57   : 		return -1;

  0006f	b8 ff ff ff ff	 mov	 eax, -1
  00074	e9 ce 00 00 00	 jmp	 $LN1@setFileTim
$LN2@setFileTim:

; 58   : 	}
; 59   : 
; 60   : 	if (!GetFileTime(hFile, NULL, NULL, &ftWrite)) {

  00079	4c 8d 4c 24 60	 lea	 r9, QWORD PTR ftWrite$[rsp]
  0007e	45 33 c0	 xor	 r8d, r8d
  00081	33 d2		 xor	 edx, edx
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hFile$[rsp]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileTime
  0008e	85 c0		 test	 eax, eax
  00090	75 0a		 jne	 SHORT $LN3@setFileTim

; 61   : 		return -2;

  00092	b8 fe ff ff ff	 mov	 eax, -2
  00097	e9 ab 00 00 00	 jmp	 $LN1@setFileTim
$LN3@setFileTim:

; 62   : 	}
; 63   : 
; 64   : 	//SYSTEMTIME	sysTm, localTime;
; 65   : 	SYSTEMTIME	sysTm;
; 66   : 	FileTimeToSystemTime(&ftWrite, &sysTm);  // UTC SystemTime

  0009c	48 8d 54 24 50	 lea	 rdx, QWORD PTR sysTm$[rsp]
  000a1	48 8d 4c 24 60	 lea	 rcx, QWORD PTR ftWrite$[rsp]
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FileTimeToSystemTime

; 67   : 	//SystemTimeToTzSpecificLocalTime(NULL, &sysTm, &localTime);	// KTC LocalTime
; 68   : 
; 69   : 	//_stprintf(szDate, "%04d%02d%02d", localTime.wYear, localTime.wMonth, localTime.wDay);
; 70   : 	//m_nDate = atoi(szDate);
; 71   : 	//_stprintf(szDate, "%02d%02d%02d", localTime.wHour, localTime.wMinute, localTime.wSecond);
; 72   : 	//m_nTime = atoi(szDate);
; 73   : 
; 74   : 	_stprintf(szDate, "%04d%02d%02d", sysTm.wYear, sysTm.wMonth, sysTm.wDay);

  000ac	0f b7 44 24 56	 movzx	 eax, WORD PTR sysTm$[rsp+6]
  000b1	0f b7 4c 24 52	 movzx	 ecx, WORD PTR sysTm$[rsp+2]
  000b6	0f b7 54 24 50	 movzx	 edx, WORD PTR sysTm$[rsp]
  000bb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bf	44 8b c9	 mov	 r9d, ecx
  000c2	44 8b c2	 mov	 r8d, edx
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81201
  000cc	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  000d4	e8 00 00 00 00	 call	 sprintf

; 75   : 	m_nDate = atoi(szDate);

  000d9	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000e7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	89 01		 mov	 DWORD PTR [rcx], eax

; 76   : 	_stprintf(szDate, "%02d%02d%02d", sysTm.wHour, sysTm.wMinute, sysTm.wSecond);

  000f1	0f b7 44 24 5c	 movzx	 eax, WORD PTR sysTm$[rsp+12]
  000f6	0f b7 4c 24 5a	 movzx	 ecx, WORD PTR sysTm$[rsp+10]
  000fb	0f b7 54 24 58	 movzx	 edx, WORD PTR sysTm$[rsp+8]
  00100	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00104	44 8b c9	 mov	 r9d, ecx
  00107	44 8b c2	 mov	 r8d, edx
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG81202
  00111	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00119	e8 00 00 00 00	 call	 sprintf

; 77   : 	m_nTime = atoi(szDate);

  0011e	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szDate$[rsp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0012c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00134	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 78   : 
; 79   : 	CloseHandle(hFile);

  00137	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hFile$[rsp]
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 80   : 	return 1;

  00142	b8 01 00 00 00	 mov	 eax, 1
$LN1@setFileTim:

; 81   : }

  00147	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014f	48 33 cc	 xor	 rcx, rsp
  00152	e8 00 00 00 00	 call	 __security_check_cookie
  00157	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0015e	c3		 ret	 0
?setFileTime@CFileTime@@QEAAHPEAD@Z ENDP		; CFileTime::setFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??1CFileTime@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1CFileTime@@QEAA@XZ PROC				; CFileTime::~CFileTime, COMDAT

; 140  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 141  : }

  00005	c3		 ret	 0
??1CFileTime@@QEAA@XZ ENDP				; CFileTime::~CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ??0CFileTime@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CFileTime@@QEAA@XZ PROC				; CFileTime::CFileTime, COMDAT

; 47   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 48   : }

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0CFileTime@@QEAA@XZ ENDP				; CFileTime::CFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z
_TEXT	SEGMENT
myFileTime$ = 32
ft$ = 40
__$ArrayPad$ = 48
cur$ = 80
bMicro$ = 88
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z PROC		; Misc::getFileTime, COMDAT

; 441  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 442  : 	FILETIME ft;
; 443  : 	union
; 444  : 	{
; 445  : 		FILETIME asFileTime;
; 446  : 		u_int64 asInt64;
; 447  : 	} myFileTime;
; 448  : 	GetSystemTimeAsFileTime(&ft);

  0001c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR ft$[rsp]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTimeAsFileTime

; 449  : 	myFileTime.asFileTime = ft;

  00027	48 8b 44 24 28	 mov	 rax, QWORD PTR ft$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR myFileTime$[rsp], rax

; 450  : 	//unsigned long long tt = ft.dwHighDateTime;
; 451  : 	//tt <<= 32;
; 452  : 	//tt |= ft.dwLowDateTime;
; 453  : 	myFileTime.asInt64 -= DELTA_EPOCH_IN_MICROSECS;

  00031	48 b8 00 40 86
	48 96 5e 29 00	 mov	 rax, 11644473600000000	; 00295e9648864000H
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR myFileTime$[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 89 44 24 20	 mov	 QWORD PTR myFileTime$[rsp], rax

; 454  : 	cur->tv_sec = time(NULL);

  0004b	33 c9		 xor	 ecx, ecx
  0004d	e8 00 00 00 00	 call	 time
  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur$[rsp]
  00057	48 89 01	 mov	 QWORD PTR [rcx], rax

; 455  : 	if (bMicro) {

  0005a	0f b6 44 24 58	 movzx	 eax, BYTE PTR bMicro$[rsp]
  0005f	85 c0		 test	 eax, eax
  00061	74 30		 je	 SHORT $LN2@getFileTim

; 456  : 		myFileTime.asInt64 /= 10; // microtime

  00063	33 d2		 xor	 edx, edx
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR myFileTime$[rsp]
  0006a	b9 0a 00 00 00	 mov	 ecx, 10
  0006f	48 f7 f1	 div	 rcx
  00072	48 89 44 24 20	 mov	 QWORD PTR myFileTime$[rsp], rax

; 457  : 		cur->tv_nsec = myFileTime.asInt64%MICROSEC_PER_SEC;

  00077	33 d2		 xor	 edx, edx
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR myFileTime$[rsp]
  0007e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00083	48 f7 f1	 div	 rcx
  00086	48 8b c2	 mov	 rax, rdx
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur$[rsp]
  0008e	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00091	eb 1a		 jmp	 SHORT $LN3@getFileTim
$LN2@getFileTim:

; 458  : 	}
; 459  : 	else cur->tv_nsec = myFileTime.asInt64%10000000L; //(100 nano)

  00093	33 d2		 xor	 edx, edx
  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR myFileTime$[rsp]
  0009a	b9 80 96 98 00	 mov	 ecx, 10000000		; 00989680H
  0009f	48 f7 f1	 div	 rcx
  000a2	48 8b c2	 mov	 rax, rdx
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur$[rsp]
  000aa	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN3@getFileTim:

; 460  : }

  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b2	48 33 cc	 xor	 rcx, rsp
  000b5	e8 00 00 00 00	 call	 __security_check_cookie
  000ba	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000be	c3		 ret	 0
?getFileTime@Misc@@SAXPEAUtimespec@@_N@Z ENDP		; Misc::getFileTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?getmillisec@Misc@@SAXPEAUtimespec@@@Z
_TEXT	SEGMENT
sysTm$ = 32
__$ArrayPad$ = 48
cur$ = 80
?getmillisec@Misc@@SAXPEAUtimespec@@@Z PROC		; Misc::getmillisec, COMDAT

; 421  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 422  : #ifndef WIN32
; 423  : 	clock_gettime(CLOCK_REALTIME, cur);
; 424  : 	cur->tv_nsec = cur->tv_nsec%MILLISEC_PER_SEC;
; 425  : #else
; 426  : 	SYSTEMTIME	sysTm;
; 427  : 	GetSystemTime(&sysTm);

  00018	48 8d 4c 24 20	 lea	 rcx, QWORD PTR sysTm$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemTime

; 428  : 	cur->tv_sec = time(NULL);

  00023	33 c9		 xor	 ecx, ecx
  00025	e8 00 00 00 00	 call	 time
  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur$[rsp]
  0002f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 429  : 	cur->tv_nsec = sysTm.wMilliseconds;

  00032	0f b7 44 24 2e	 movzx	 eax, WORD PTR sysTm$[rsp+14]
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur$[rsp]
  0003c	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 430  : #endif
; 431  : }

  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00044	48 33 cc	 xor	 rcx, rsp
  00047	e8 00 00 00 00	 call	 __security_check_cookie
  0004c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00050	c3		 ret	 0
?getmillisec@Misc@@SAXPEAUtimespec@@@Z ENDP		; Misc::getmillisec
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z
_TEXT	SEGMENT
start$ = 8
stop$ = 16
result$ = 24
unit$ = 32
?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z PROC	; Misc::timespec_diff, COMDAT

; 408  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 409  : 	if ((stop->tv_nsec - start->tv_nsec) < 0) {

  00014	48 8b 44 24 10	 mov	 rax, QWORD PTR stop$[rsp]
  00019	48 8b 4c 24 08	 mov	 rcx, QWORD PTR start$[rsp]
  0001e	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00021	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00024	2b c1		 sub	 eax, ecx
  00026	85 c0		 test	 eax, eax
  00028	7d 3e		 jge	 SHORT $LN2@timespec_d

; 410  : 		result->tv_sec = stop->tv_sec - start->tv_sec - 1;

  0002a	48 8b 44 24 10	 mov	 rax, QWORD PTR stop$[rsp]
  0002f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR start$[rsp]
  00034	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 2b c1	 sub	 rax, rcx
  0003d	48 ff c8	 dec	 rax
  00040	48 8b 4c 24 18	 mov	 rcx, QWORD PTR result$[rsp]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax

; 411  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec + unit;

  00048	48 8b 44 24 10	 mov	 rax, QWORD PTR stop$[rsp]
  0004d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR start$[rsp]
  00052	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00055	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00058	2b c1		 sub	 eax, ecx
  0005a	03 44 24 20	 add	 eax, DWORD PTR unit$[rsp]
  0005e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR result$[rsp]
  00063	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 412  : 	}
; 413  : 	else {

  00066	eb 35		 jmp	 SHORT $LN3@timespec_d
$LN2@timespec_d:

; 414  : 		result->tv_sec = stop->tv_sec - start->tv_sec;

  00068	48 8b 44 24 10	 mov	 rax, QWORD PTR stop$[rsp]
  0006d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR start$[rsp]
  00072	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 2b c1	 sub	 rax, rcx
  0007b	48 8b 4c 24 18	 mov	 rcx, QWORD PTR result$[rsp]
  00080	48 89 01	 mov	 QWORD PTR [rcx], rax

; 415  : 		result->tv_nsec = stop->tv_nsec - start->tv_nsec;

  00083	48 8b 44 24 10	 mov	 rax, QWORD PTR stop$[rsp]
  00088	48 8b 4c 24 08	 mov	 rcx, QWORD PTR start$[rsp]
  0008d	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00090	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00093	2b c1		 sub	 eax, ecx
  00095	48 8b 4c 24 18	 mov	 rcx, QWORD PTR result$[rsp]
  0009a	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN3@timespec_d:

; 416  : 	}
; 417  : }

  0009d	c3		 ret	 0
?timespec_diff@Misc@@SAXPEAUtimespec@@00J@Z ENDP	; Misc::timespec_diff
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?u_Sleep@Misc@@SAXH@Z
_TEXT	SEGMENT
iuSec$ = 48
?u_Sleep@Misc@@SAXH@Z PROC				; Misc::u_Sleep, COMDAT

; 399  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 400  : #ifndef WIN32
; 401  : 	usleep(iuSec);
; 402  : #else
; 403  : 	Sleep(iuSec/1000);

  00008	8b 44 24 30	 mov	 eax, DWORD PTR iuSec$[rsp]
  0000c	99		 cdq
  0000d	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00012	f7 f9		 idiv	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 404  : #endif
; 405  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
?u_Sleep@Misc@@SAXH@Z ENDP				; Misc::u_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comdatetime.cpp
;	COMDAT ?m_Sleep@Misc@@SAXH@Z
_TEXT	SEGMENT
iMiliSec$ = 48
?m_Sleep@Misc@@SAXH@Z PROC				; Misc::m_Sleep, COMDAT

; 390  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 391  : #ifndef WIN32
; 392  : 	usleep(iMiliSec * 1000);
; 393  : #else
; 394  : 	Sleep(iMiliSec);

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR iMiliSec$[rsp]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 395  : #endif
; 396  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
?m_Sleep@Misc@@SAXH@Z ENDP				; Misc::m_Sleep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT localtime_s
_TEXT	SEGMENT
_Tm$ = 48
_Time$ = 56
localtime_s PROC					; COMDAT

; 572  :             {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 573  :                 return _localtime64_s(_Tm, _Time);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Time$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Tm$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64_s

; 574  :             }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
localtime_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 48
time	PROC						; COMDAT

; 534  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 535  :             return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 536  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT gmtime
_TEXT	SEGMENT
_Time$ = 48
gmtime	PROC						; COMDAT

; 497  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 498  :             #pragma warning(push)
; 499  :             #pragma warning(disable: 4996)
; 500  :             return _gmtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64

; 501  :             #pragma warning(pop)
; 502  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
__$ArrayPad$ = 48
_Buffer$ = 80
_Format$ = 88
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  00027	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0002c	48 8d 44 24 60	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00031	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00036	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Format$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00048	e8 00 00 00 00	 call	 _vsprintf_l
  0004d	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00051	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

  0005a	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1788 : }

  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00063	48 33 cc	 xor	 rcx, rsp
  00066	e8 00 00 00 00	 call	 __security_check_cookie
  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1391 : }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
__$ArrayPad$ = 48
_Format$ = 80
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  00027	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0002c	48 8d 44 24 58	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00031	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00041	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Format$[rsp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 _vfprintf_l
  00056	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

  0005a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

  00063	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 957  : }

  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0006c	48 33 cc	 xor	 rcx, rsp
  0006f	e8 00 00 00 00	 call	 __security_check_cookie
  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
