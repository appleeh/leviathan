; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?SortEx@@YAXPEAUSTSortData@@H@Z			; SortEx
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SortEx@@YAXPEAUSTSortData@@H@Z DD imagerel $LN23
	DD	imagerel $LN23+1447
	DD	imagerel $unwind$?SortEx@@YAXPEAUSTSortData@@H@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SortEx@@YAXPEAUSTSortData@@H@Z DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comqsort.cpp
;	COMDAT ?SortEx@@YAXPEAUSTSortData@@H@Z
_TEXT	SEGMENT
nSize$ = 0
nMin$ = 4
right$ = 8
left$ = 12
nMax$ = 16
j$ = 20
i$ = 24
loopcnt$ = 28
stVal1$ = 32
stVal2$ = 48
__$ArrayPad$ = 64
arr$ = 112
nCount$ = 120
?SortEx@@YAXPEAUSTSortData@@H@Z PROC			; SortEx, COMDAT

; 5    : {

$LN23:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6    : 	int loopcnt = nCount >> 1, left, right = nCount - 1;

  0001e	8b 44 24 78	 mov	 eax, DWORD PTR nCount$[rsp]
  00022	d1 f8		 sar	 eax, 1
  00024	89 44 24 1c	 mov	 DWORD PTR loopcnt$[rsp], eax
  00028	8b 44 24 78	 mov	 eax, DWORD PTR nCount$[rsp]
  0002c	ff c8		 dec	 eax
  0002e	89 44 24 08	 mov	 DWORD PTR right$[rsp], eax

; 7    : 	int nMin, nMax;
; 8    : 	int i, j, nSize = sizeof(STSortData);

  00032	c7 04 24 10 00
	00 00		 mov	 DWORD PTR nSize$[rsp], 16

; 9    : 	STSortData stVal1, stVal2;
; 10   : 
; 11   : 	for (i = 0; i < loopcnt; i++)

  00039	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00041	eb 0a		 jmp	 SHORT $LN4@SortEx
$LN2@SortEx:
  00043	8b 44 24 18	 mov	 eax, DWORD PTR i$[rsp]
  00047	ff c0		 inc	 eax
  00049	89 44 24 18	 mov	 DWORD PTR i$[rsp], eax
$LN4@SortEx:
  0004d	8b 44 24 1c	 mov	 eax, DWORD PTR loopcnt$[rsp]
  00051	39 44 24 18	 cmp	 DWORD PTR i$[rsp], eax
  00055	0f 8d 38 05 00
	00		 jge	 $LN3@SortEx

; 12   : 	{
; 13   : 		left = i;

  0005b	8b 44 24 18	 mov	 eax, DWORD PTR i$[rsp]
  0005f	89 44 24 0c	 mov	 DWORD PTR left$[rsp], eax

; 14   : 		//------------------------------------
; 15   : 		nMin = left; nMax = left;

  00063	8b 44 24 0c	 mov	 eax, DWORD PTR left$[rsp]
  00067	89 44 24 04	 mov	 DWORD PTR nMin$[rsp], eax
  0006b	8b 44 24 0c	 mov	 eax, DWORD PTR left$[rsp]
  0006f	89 44 24 10	 mov	 DWORD PTR nMax$[rsp], eax

; 16   : 		for (j = left + 1; j <= right; j++) {

  00073	8b 44 24 0c	 mov	 eax, DWORD PTR left$[rsp]
  00077	ff c0		 inc	 eax
  00079	89 44 24 14	 mov	 DWORD PTR j$[rsp], eax
  0007d	eb 0a		 jmp	 SHORT $LN7@SortEx
$LN5@SortEx:
  0007f	8b 44 24 14	 mov	 eax, DWORD PTR j$[rsp]
  00083	ff c0		 inc	 eax
  00085	89 44 24 14	 mov	 DWORD PTR j$[rsp], eax
$LN7@SortEx:
  00089	8b 44 24 08	 mov	 eax, DWORD PTR right$[rsp]
  0008d	39 44 24 14	 cmp	 DWORD PTR j$[rsp], eax
  00091	7f 5e		 jg	 SHORT $LN6@SortEx

; 17   : 			if (arr[nMin].address > arr[j].address)nMin = j;

  00093	48 63 44 24 04	 movsxd	 rax, DWORD PTR nMin$[rsp]
  00098	48 6b c0 10	 imul	 rax, rax, 16
  0009c	48 63 4c 24 14	 movsxd	 rcx, DWORD PTR j$[rsp]
  000a1	48 6b c9 10	 imul	 rcx, rcx, 16
  000a5	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  000aa	4c 8b 44 24 70	 mov	 r8, QWORD PTR arr$[rsp]
  000af	41 8b 0c 08	 mov	 ecx, DWORD PTR [r8+rcx]
  000b3	39 0c 02	 cmp	 DWORD PTR [rdx+rax], ecx
  000b6	76 0a		 jbe	 SHORT $LN8@SortEx
  000b8	8b 44 24 14	 mov	 eax, DWORD PTR j$[rsp]
  000bc	89 44 24 04	 mov	 DWORD PTR nMin$[rsp], eax
  000c0	eb 2d		 jmp	 SHORT $LN9@SortEx
$LN8@SortEx:

; 18   : 			else if (arr[nMax].address < arr[j].address)nMax = j;

  000c2	48 63 44 24 10	 movsxd	 rax, DWORD PTR nMax$[rsp]
  000c7	48 6b c0 10	 imul	 rax, rax, 16
  000cb	48 63 4c 24 14	 movsxd	 rcx, DWORD PTR j$[rsp]
  000d0	48 6b c9 10	 imul	 rcx, rcx, 16
  000d4	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  000d9	4c 8b 44 24 70	 mov	 r8, QWORD PTR arr$[rsp]
  000de	41 8b 0c 08	 mov	 ecx, DWORD PTR [r8+rcx]
  000e2	39 0c 02	 cmp	 DWORD PTR [rdx+rax], ecx
  000e5	73 08		 jae	 SHORT $LN10@SortEx
  000e7	8b 44 24 14	 mov	 eax, DWORD PTR j$[rsp]
  000eb	89 44 24 10	 mov	 DWORD PTR nMax$[rsp], eax
$LN10@SortEx:
$LN9@SortEx:

; 19   : 		}

  000ef	eb 8e		 jmp	 SHORT $LN5@SortEx
$LN6@SortEx:

; 20   : 		if (nMin == nMax) return;

  000f1	8b 44 24 10	 mov	 eax, DWORD PTR nMax$[rsp]
  000f5	39 44 24 04	 cmp	 DWORD PTR nMin$[rsp], eax
  000f9	75 05		 jne	 SHORT $LN11@SortEx
  000fb	e9 93 04 00 00	 jmp	 $LN1@SortEx
$LN11@SortEx:

; 21   : 
; 22   : 		if (left == nMax) {

  00100	8b 44 24 10	 mov	 eax, DWORD PTR nMax$[rsp]
  00104	39 44 24 0c	 cmp	 DWORD PTR left$[rsp], eax
  00108	0f 85 4a 01 00
	00		 jne	 $LN12@SortEx

; 23   : 			memcpy(&stVal2, &arr[nMax], nSize);

  0010e	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00112	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00117	48 6b c9 10	 imul	 rcx, rcx, 16
  0011b	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00120	48 03 d1	 add	 rdx, rcx
  00123	48 8b ca	 mov	 rcx, rdx
  00126	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  0012b	48 8b fa	 mov	 rdi, rdx
  0012e	48 8b f1	 mov	 rsi, rcx
  00131	48 8b c8	 mov	 rcx, rax
  00134	f3 a4		 rep movsb

; 24   : 			if (right == nMin) {

  00136	8b 44 24 04	 mov	 eax, DWORD PTR nMin$[rsp]
  0013a	39 44 24 08	 cmp	 DWORD PTR right$[rsp], eax
  0013e	75 64		 jne	 SHORT $LN14@SortEx

; 25   : 				memcpy(&arr[left], &arr[nMin], nSize);

  00140	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00144	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00149	48 6b c9 10	 imul	 rcx, rcx, 16
  0014d	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00152	48 03 d1	 add	 rdx, rcx
  00155	48 8b ca	 mov	 rcx, rdx
  00158	48 63 54 24 0c	 movsxd	 rdx, DWORD PTR left$[rsp]
  0015d	48 6b d2 10	 imul	 rdx, rdx, 16
  00161	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  00166	48 03 fa	 add	 rdi, rdx
  00169	48 8b d7	 mov	 rdx, rdi
  0016c	48 8b fa	 mov	 rdi, rdx
  0016f	48 8b f1	 mov	 rsi, rcx
  00172	48 8b c8	 mov	 rcx, rax
  00175	f3 a4		 rep movsb

; 26   : 				memcpy(&arr[right], &stVal2, nSize);

  00177	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0017b	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR right$[rsp]
  00180	48 6b c9 10	 imul	 rcx, rcx, 16
  00184	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00189	48 03 d1	 add	 rdx, rcx
  0018c	48 8b ca	 mov	 rcx, rdx
  0018f	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  00194	48 8b f9	 mov	 rdi, rcx
  00197	48 8b f2	 mov	 rsi, rdx
  0019a	48 8b c8	 mov	 rcx, rax
  0019d	f3 a4		 rep movsb

; 27   : 			}
; 28   : 			else {

  0019f	e9 af 00 00 00	 jmp	 $LN15@SortEx
$LN14@SortEx:

; 29   : 				memcpy(&stVal1, &arr[right], nSize);

  001a4	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  001a8	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR right$[rsp]
  001ad	48 6b c9 10	 imul	 rcx, rcx, 16
  001b1	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  001b6	48 03 d1	 add	 rdx, rcx
  001b9	48 8b ca	 mov	 rcx, rdx
  001bc	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  001c1	48 8b fa	 mov	 rdi, rdx
  001c4	48 8b f1	 mov	 rsi, rcx
  001c7	48 8b c8	 mov	 rcx, rax
  001ca	f3 a4		 rep movsb

; 30   : 				memcpy(&arr[left], &arr[nMin], nSize);

  001cc	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  001d0	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  001d5	48 6b c9 10	 imul	 rcx, rcx, 16
  001d9	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  001de	48 03 d1	 add	 rdx, rcx
  001e1	48 8b ca	 mov	 rcx, rdx
  001e4	48 63 54 24 0c	 movsxd	 rdx, DWORD PTR left$[rsp]
  001e9	48 6b d2 10	 imul	 rdx, rdx, 16
  001ed	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  001f2	48 03 fa	 add	 rdi, rdx
  001f5	48 8b d7	 mov	 rdx, rdi
  001f8	48 8b fa	 mov	 rdi, rdx
  001fb	48 8b f1	 mov	 rsi, rcx
  001fe	48 8b c8	 mov	 rcx, rax
  00201	f3 a4		 rep movsb

; 31   : 				memcpy(&arr[right], &stVal2, nSize);

  00203	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00207	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR right$[rsp]
  0020c	48 6b c9 10	 imul	 rcx, rcx, 16
  00210	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00215	48 03 d1	 add	 rdx, rcx
  00218	48 8b ca	 mov	 rcx, rdx
  0021b	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  00220	48 8b f9	 mov	 rdi, rcx
  00223	48 8b f2	 mov	 rsi, rdx
  00226	48 8b c8	 mov	 rcx, rax
  00229	f3 a4		 rep movsb

; 32   : 				memcpy(&arr[nMin], &stVal1, nSize);

  0022b	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0022f	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00234	48 6b c9 10	 imul	 rcx, rcx, 16
  00238	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  0023d	48 03 d1	 add	 rdx, rcx
  00240	48 8b ca	 mov	 rcx, rdx
  00243	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00248	48 8b f9	 mov	 rdi, rcx
  0024b	48 8b f2	 mov	 rsi, rdx
  0024e	48 8b c8	 mov	 rcx, rax
  00251	f3 a4		 rep movsb
$LN15@SortEx:

; 33   : 			}

  00253	e9 2c 03 00 00	 jmp	 $LN13@SortEx
$LN12@SortEx:

; 34   : 		}
; 35   : 		else if (left == nMin) {

  00258	8b 44 24 04	 mov	 eax, DWORD PTR nMin$[rsp]
  0025c	39 44 24 0c	 cmp	 DWORD PTR left$[rsp], eax
  00260	0f 85 8c 00 00
	00		 jne	 $LN16@SortEx

; 36   : 			memcpy(&stVal1, &arr[right], nSize);

  00266	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0026a	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR right$[rsp]
  0026f	48 6b c9 10	 imul	 rcx, rcx, 16
  00273	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00278	48 03 d1	 add	 rdx, rcx
  0027b	48 8b ca	 mov	 rcx, rdx
  0027e	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00283	48 8b fa	 mov	 rdi, rdx
  00286	48 8b f1	 mov	 rsi, rcx
  00289	48 8b c8	 mov	 rcx, rax
  0028c	f3 a4		 rep movsb

; 37   : 			memcpy(&arr[right], &arr[nMax], nSize);

  0028e	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00292	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00297	48 6b c9 10	 imul	 rcx, rcx, 16
  0029b	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  002a0	48 03 d1	 add	 rdx, rcx
  002a3	48 8b ca	 mov	 rcx, rdx
  002a6	48 63 54 24 08	 movsxd	 rdx, DWORD PTR right$[rsp]
  002ab	48 6b d2 10	 imul	 rdx, rdx, 16
  002af	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  002b4	48 03 fa	 add	 rdi, rdx
  002b7	48 8b d7	 mov	 rdx, rdi
  002ba	48 8b fa	 mov	 rdi, rdx
  002bd	48 8b f1	 mov	 rsi, rcx
  002c0	48 8b c8	 mov	 rcx, rax
  002c3	f3 a4		 rep movsb

; 38   : 			memcpy(&arr[nMax], &stVal1, nSize);

  002c5	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  002c9	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  002ce	48 6b c9 10	 imul	 rcx, rcx, 16
  002d2	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  002d7	48 03 d1	 add	 rdx, rcx
  002da	48 8b ca	 mov	 rcx, rdx
  002dd	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  002e2	48 8b f9	 mov	 rdi, rcx
  002e5	48 8b f2	 mov	 rsi, rdx
  002e8	48 8b c8	 mov	 rcx, rax
  002eb	f3 a4		 rep movsb
  002ed	e9 92 02 00 00	 jmp	 $LN17@SortEx
$LN16@SortEx:

; 39   : 		}
; 40   : 		else if (right == nMin) {

  002f2	8b 44 24 04	 mov	 eax, DWORD PTR nMin$[rsp]
  002f6	39 44 24 08	 cmp	 DWORD PTR right$[rsp], eax
  002fa	0f 85 dc 00 00
	00		 jne	 $LN18@SortEx

; 41   : 			memcpy(&stVal1, &arr[left], nSize);

  00300	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00304	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR left$[rsp]
  00309	48 6b c9 10	 imul	 rcx, rcx, 16
  0030d	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00312	48 03 d1	 add	 rdx, rcx
  00315	48 8b ca	 mov	 rcx, rdx
  00318	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  0031d	48 8b fa	 mov	 rdi, rdx
  00320	48 8b f1	 mov	 rsi, rcx
  00323	48 8b c8	 mov	 rcx, rax
  00326	f3 a4		 rep movsb

; 42   : 			memcpy(&stVal2, &arr[nMin], nSize);

  00328	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0032c	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00331	48 6b c9 10	 imul	 rcx, rcx, 16
  00335	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  0033a	48 03 d1	 add	 rdx, rcx
  0033d	48 8b ca	 mov	 rcx, rdx
  00340	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  00345	48 8b fa	 mov	 rdi, rdx
  00348	48 8b f1	 mov	 rsi, rcx
  0034b	48 8b c8	 mov	 rcx, rax
  0034e	f3 a4		 rep movsb

; 43   : 			memcpy(&arr[right], &arr[nMax], nSize);

  00350	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00354	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00359	48 6b c9 10	 imul	 rcx, rcx, 16
  0035d	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00362	48 03 d1	 add	 rdx, rcx
  00365	48 8b ca	 mov	 rcx, rdx
  00368	48 63 54 24 08	 movsxd	 rdx, DWORD PTR right$[rsp]
  0036d	48 6b d2 10	 imul	 rdx, rdx, 16
  00371	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  00376	48 03 fa	 add	 rdi, rdx
  00379	48 8b d7	 mov	 rdx, rdi
  0037c	48 8b fa	 mov	 rdi, rdx
  0037f	48 8b f1	 mov	 rsi, rcx
  00382	48 8b c8	 mov	 rcx, rax
  00385	f3 a4		 rep movsb

; 44   : 			memcpy(&arr[left], &stVal2, nSize);

  00387	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0038b	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR left$[rsp]
  00390	48 6b c9 10	 imul	 rcx, rcx, 16
  00394	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00399	48 03 d1	 add	 rdx, rcx
  0039c	48 8b ca	 mov	 rcx, rdx
  0039f	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  003a4	48 8b f9	 mov	 rdi, rcx
  003a7	48 8b f2	 mov	 rsi, rdx
  003aa	48 8b c8	 mov	 rcx, rax
  003ad	f3 a4		 rep movsb

; 45   : 			memcpy(&arr[nMax], &stVal1, nSize);

  003af	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  003b3	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  003b8	48 6b c9 10	 imul	 rcx, rcx, 16
  003bc	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  003c1	48 03 d1	 add	 rdx, rcx
  003c4	48 8b ca	 mov	 rcx, rdx
  003c7	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  003cc	48 8b f9	 mov	 rdi, rcx
  003cf	48 8b f2	 mov	 rsi, rdx
  003d2	48 8b c8	 mov	 rcx, rax
  003d5	f3 a4		 rep movsb
  003d7	e9 a8 01 00 00	 jmp	 $LN19@SortEx
$LN18@SortEx:

; 46   : 		}
; 47   : 		else if (right == nMax) {

  003dc	8b 44 24 10	 mov	 eax, DWORD PTR nMax$[rsp]
  003e0	39 44 24 08	 cmp	 DWORD PTR right$[rsp], eax
  003e4	0f 85 8c 00 00
	00		 jne	 $LN20@SortEx

; 48   : 			memcpy(&stVal1, &arr[left], nSize);

  003ea	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  003ee	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR left$[rsp]
  003f3	48 6b c9 10	 imul	 rcx, rcx, 16
  003f7	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  003fc	48 03 d1	 add	 rdx, rcx
  003ff	48 8b ca	 mov	 rcx, rdx
  00402	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00407	48 8b fa	 mov	 rdi, rdx
  0040a	48 8b f1	 mov	 rsi, rcx
  0040d	48 8b c8	 mov	 rcx, rax
  00410	f3 a4		 rep movsb

; 49   : 			memcpy(&arr[left], &arr[nMin], nSize);

  00412	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00416	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  0041b	48 6b c9 10	 imul	 rcx, rcx, 16
  0041f	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00424	48 03 d1	 add	 rdx, rcx
  00427	48 8b ca	 mov	 rcx, rdx
  0042a	48 63 54 24 0c	 movsxd	 rdx, DWORD PTR left$[rsp]
  0042f	48 6b d2 10	 imul	 rdx, rdx, 16
  00433	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  00438	48 03 fa	 add	 rdi, rdx
  0043b	48 8b d7	 mov	 rdx, rdi
  0043e	48 8b fa	 mov	 rdi, rdx
  00441	48 8b f1	 mov	 rsi, rcx
  00444	48 8b c8	 mov	 rcx, rax
  00447	f3 a4		 rep movsb

; 50   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00449	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0044d	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00452	48 6b c9 10	 imul	 rcx, rcx, 16
  00456	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  0045b	48 03 d1	 add	 rdx, rcx
  0045e	48 8b ca	 mov	 rcx, rdx
  00461	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00466	48 8b f9	 mov	 rdi, rcx
  00469	48 8b f2	 mov	 rsi, rdx
  0046c	48 8b c8	 mov	 rcx, rax
  0046f	f3 a4		 rep movsb

; 51   : 		}
; 52   : 		else {

  00471	e9 0e 01 00 00	 jmp	 $LN21@SortEx
$LN20@SortEx:

; 53   : 			memcpy(&stVal1, &arr[left], nSize);

  00476	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  0047a	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR left$[rsp]
  0047f	48 6b c9 10	 imul	 rcx, rcx, 16
  00483	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00488	48 03 d1	 add	 rdx, rcx
  0048b	48 8b ca	 mov	 rcx, rdx
  0048e	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00493	48 8b fa	 mov	 rdi, rdx
  00496	48 8b f1	 mov	 rsi, rcx
  00499	48 8b c8	 mov	 rcx, rax
  0049c	f3 a4		 rep movsb

; 54   : 			memcpy(&stVal2, &arr[right], nSize);

  0049e	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  004a2	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR right$[rsp]
  004a7	48 6b c9 10	 imul	 rcx, rcx, 16
  004ab	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  004b0	48 03 d1	 add	 rdx, rcx
  004b3	48 8b ca	 mov	 rcx, rdx
  004b6	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  004bb	48 8b fa	 mov	 rdi, rdx
  004be	48 8b f1	 mov	 rsi, rcx
  004c1	48 8b c8	 mov	 rcx, rax
  004c4	f3 a4		 rep movsb

; 55   : 			memcpy(&arr[right], &arr[nMax], nSize);

  004c6	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  004ca	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  004cf	48 6b c9 10	 imul	 rcx, rcx, 16
  004d3	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  004d8	48 03 d1	 add	 rdx, rcx
  004db	48 8b ca	 mov	 rcx, rdx
  004de	48 63 54 24 08	 movsxd	 rdx, DWORD PTR right$[rsp]
  004e3	48 6b d2 10	 imul	 rdx, rdx, 16
  004e7	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  004ec	48 03 fa	 add	 rdi, rdx
  004ef	48 8b d7	 mov	 rdx, rdi
  004f2	48 8b fa	 mov	 rdi, rdx
  004f5	48 8b f1	 mov	 rsi, rcx
  004f8	48 8b c8	 mov	 rcx, rax
  004fb	f3 a4		 rep movsb

; 56   : 			memcpy(&arr[left], &arr[nMin], nSize);

  004fd	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00501	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  00506	48 6b c9 10	 imul	 rcx, rcx, 16
  0050a	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  0050f	48 03 d1	 add	 rdx, rcx
  00512	48 8b ca	 mov	 rcx, rdx
  00515	48 63 54 24 0c	 movsxd	 rdx, DWORD PTR left$[rsp]
  0051a	48 6b d2 10	 imul	 rdx, rdx, 16
  0051e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR arr$[rsp]
  00523	48 03 fa	 add	 rdi, rdx
  00526	48 8b d7	 mov	 rdx, rdi
  00529	48 8b fa	 mov	 rdi, rdx
  0052c	48 8b f1	 mov	 rsi, rcx
  0052f	48 8b c8	 mov	 rcx, rax
  00532	f3 a4		 rep movsb

; 57   : 			memcpy(&arr[nMin], &stVal1, nSize);

  00534	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00538	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR nMin$[rsp]
  0053d	48 6b c9 10	 imul	 rcx, rcx, 16
  00541	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  00546	48 03 d1	 add	 rdx, rcx
  00549	48 8b ca	 mov	 rcx, rdx
  0054c	48 8d 54 24 20	 lea	 rdx, QWORD PTR stVal1$[rsp]
  00551	48 8b f9	 mov	 rdi, rcx
  00554	48 8b f2	 mov	 rsi, rdx
  00557	48 8b c8	 mov	 rcx, rax
  0055a	f3 a4		 rep movsb

; 58   : 			memcpy(&arr[nMax], &stVal2, nSize);

  0055c	48 63 04 24	 movsxd	 rax, DWORD PTR nSize$[rsp]
  00560	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR nMax$[rsp]
  00565	48 6b c9 10	 imul	 rcx, rcx, 16
  00569	48 8b 54 24 70	 mov	 rdx, QWORD PTR arr$[rsp]
  0056e	48 03 d1	 add	 rdx, rcx
  00571	48 8b ca	 mov	 rcx, rdx
  00574	48 8d 54 24 30	 lea	 rdx, QWORD PTR stVal2$[rsp]
  00579	48 8b f9	 mov	 rdi, rcx
  0057c	48 8b f2	 mov	 rsi, rdx
  0057f	48 8b c8	 mov	 rcx, rax
  00582	f3 a4		 rep movsb
$LN21@SortEx:
$LN19@SortEx:
$LN17@SortEx:
$LN13@SortEx:

; 59   : 		}
; 60   : 
; 61   : 		//-------------------------------------
; 62   : 		right--;

  00584	8b 44 24 08	 mov	 eax, DWORD PTR right$[rsp]
  00588	ff c8		 dec	 eax
  0058a	89 44 24 08	 mov	 DWORD PTR right$[rsp], eax

; 63   : 	}

  0058e	e9 b0 fa ff ff	 jmp	 $LN2@SortEx
$LN3@SortEx:
$LN1@SortEx:

; 64   : }

  00593	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00598	48 33 cc	 xor	 rcx, rsp
  0059b	e8 00 00 00 00	 call	 __security_check_cookie
  005a0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  005a4	5f		 pop	 rdi
  005a5	5e		 pop	 rsi
  005a6	c3		 ret	 0
?SortEx@@YAXPEAUSTSortData@@H@Z ENDP			; SortEx
_TEXT	ENDS
END
