; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?g_pWorkDir@@3PEADEA				; g_pWorkDir
PUBLIC	?g_pWorkDir2@@3PEADEA				; g_pWorkDir2
PUBLIC	?g_pSystem@@3PEADEA				; g_pSystem
PUBLIC	?g_pProcessName@@3PEADEA			; g_pProcessName
PUBLIC	?g_pProcessConfig@@3PEADEA			; g_pProcessConfig
_BSS	SEGMENT
?g_pWorkDir@@3PEADEA DQ 01H DUP (?)			; g_pWorkDir
?g_pWorkDir2@@3PEADEA DQ 01H DUP (?)			; g_pWorkDir2
?g_pSystem@@3PEADEA DQ 01H DUP (?)			; g_pSystem
?g_pProcessName@@3PEADEA DQ 01H DUP (?)			; g_pProcessName
?g_pProcessConfig@@3PEADEA DQ 01H DUP (?)		; g_pProcessConfig
_BSS	ENDS
CONST	SEGMENT
$SG42121 DB	'SOLUTION_HOME', 00H
	ORG $+2
$SG42127 DB	'.ini', 00H
	ORG $+3
$SG42128 DB	'.ini', 00H
	ORG $+3
$SG42176 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42179 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42182 DB	'%ssystem.ini', 00H
	ORG $+3
$SG42184 DB	'g_pSystem is NULL', 0aH, 00H
CONST	ENDS
PUBLIC	_tcsncpy
PUBLIC	_tcsrchr
PUBLIC	?_tcsrchr@@YAPEADPEADI@Z			; _tcsrchr
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	?FullName@CEnv@@SAHPEBDPEAPEAD@Z		; CEnv::FullName
PUBLIC	?setWorkingDir@CEnv@@SA_NPEAD@Z			; CEnv::setWorkingDir
PUBLIC	?setWorkingDir2@CEnv@@SA_NH@Z			; CEnv::setWorkingDir2
PUBLIC	?initWorkingPath@CEnv@@SA_NXZ			; CEnv::initWorkingPath
PUBLIC	?initSystem@CEnv@@SAHPEAD@Z			; CEnv::initSystem
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__imp__mbsnbcpy:PROC
EXTRN	__imp__mbsrchr:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_getenv:PROC
EXTRN	??_U@YAPEAX_KAEBUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	__imp_GetCurrentProcess:PROC
EXTRN	GetModuleFileNameExA:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsncpy DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$_tcsncpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsrchr DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$_tcsrchr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_tcsrchr@@YAPEADPEADI@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_tcsrchr@@YAPEADPEADI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FullName@CEnv@@SAHPEBDPEAPEAD@Z DD imagerel $LN6
	DD	imagerel $LN6+213
	DD	imagerel $unwind$?FullName@CEnv@@SAHPEBDPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setWorkingDir@CEnv@@SA_NPEAD@Z DD imagerel $LN11
	DD	imagerel $LN11+322
	DD	imagerel $unwind$?setWorkingDir@CEnv@@SA_NPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setWorkingDir2@CEnv@@SA_NH@Z DD imagerel $LN12
	DD	imagerel $LN12+465
	DD	imagerel $unwind$?setWorkingDir2@CEnv@@SA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initWorkingPath@CEnv@@SA_NXZ DD imagerel $LN17
	DD	imagerel $LN17+927
	DD	imagerel $unwind$?initWorkingPath@CEnv@@SA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initSystem@CEnv@@SAHPEAD@Z DD imagerel $LN12
	DD	imagerel $LN12+365
	DD	imagerel $unwind$?initSystem@CEnv@@SAHPEAD@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initSystem@CEnv@@SAHPEAD@Z DD 021e19H
	DD	01d010cH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initWorkingPath@CEnv@@SA_NXZ DD 041c19H
	DD	02b010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setWorkingDir2@CEnv@@SA_NH@Z DD 020b01H
	DD	011010bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setWorkingDir@CEnv@@SA_NPEAD@Z DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FullName@CEnv@@SAHPEBDPEAPEAD@Z DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 012719H
	DD	08218H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 012719H
	DD	08218H
	DD	imagerel __GSHandlerCheck
	DD	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_tcsrchr@@YAPEADPEADI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsrchr DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsncpy DD 011301H
	DD	04213H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?initSystem@CEnv@@SAHPEAD@Z
_TEXT	SEGMENT
tv128 = 32
nLen$ = 36
tv94 = 40
tv93 = 48
$T1 = 56
tv95 = 64
szConfig$ = 80
__$ArrayPad$ = 208
pDir$ = 240
?initSystem@CEnv@@SAHPEAD@Z PROC			; CEnv::initSystem, COMDAT

; 152  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 153  : 	if (g_pSystem) return 1;

  0001e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pSystem@@3PEADEA, 0 ; g_pSystem
  00026	74 0a		 je	 SHORT $LN2@initSystem
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	e9 23 01 00 00	 jmp	 $LN1@initSystem
$LN2@initSystem:

; 154  : 
; 155  : 	int nLen;
; 156  : 	TCHAR szConfig[128];
; 157  : 	if (pDir) {

  00032	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR pDir$[rsp], 0
  0003b	74 1f		 je	 SHORT $LN3@initSystem

; 158  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), pDir);

  0003d	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR pDir$[rsp]
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42176
  0004c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR szConfig$[rsp]
  00051	e8 00 00 00 00	 call	 sprintf
  00056	89 44 24 24	 mov	 DWORD PTR nLen$[rsp], eax
  0005a	eb 59		 jmp	 SHORT $LN4@initSystem
$LN3@initSystem:

; 159  : 	}
; 160  : 	else if (g_pWorkDir) {

  0005c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00064	74 1e		 je	 SHORT $LN5@initSystem

; 161  : 		nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  00066	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42179
  00074	48 8d 4c 24 50	 lea	 rcx, QWORD PTR szConfig$[rsp]
  00079	e8 00 00 00 00	 call	 sprintf
  0007e	89 44 24 24	 mov	 DWORD PTR nLen$[rsp], eax

; 162  : 	}
; 163  : 	else {

  00082	eb 31		 jmp	 SHORT $LN6@initSystem
$LN5@initSystem:

; 164  : 		if (CEnv::initWorkingPath()) {

  00084	e8 00 00 00 00	 call	 ?initWorkingPath@CEnv@@SA_NXZ ; CEnv::initWorkingPath
  00089	0f b6 c0	 movzx	 eax, al
  0008c	85 c0		 test	 eax, eax
  0008e	74 1e		 je	 SHORT $LN7@initSystem

; 165  : 			nLen = _stprintf(szConfig, _T("%ssystem.ini"), g_pWorkDir);

  00090	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42182
  0009e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR szConfig$[rsp]
  000a3	e8 00 00 00 00	 call	 sprintf
  000a8	89 44 24 24	 mov	 DWORD PTR nLen$[rsp], eax
  000ac	eb 07		 jmp	 SHORT $LN8@initSystem
$LN7@initSystem:

; 166  : 		}
; 167  : 		else return 0;

  000ae	33 c0		 xor	 eax, eax
  000b0	e9 a0 00 00 00	 jmp	 $LN1@initSystem
$LN8@initSystem:
$LN6@initSystem:
$LN4@initSystem:

; 168  : 	}
; 169  : 	g_pSystem = new (std::nothrow) TCHAR[nLen + 1];

  000b5	8b 44 24 24	 mov	 eax, DWORD PTR nLen$[rsp]
  000b9	ff c0		 inc	 eax
  000bb	48 98		 cdqe
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000cc	48 89 44 24 38	 mov	 QWORD PTR $T1[rsp], rax
  000d1	48 8b 44 24 38	 mov	 rax, QWORD PTR $T1[rsp]
  000d6	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pSystem@@3PEADEA, rax ; g_pSystem

; 170  : 	if (!g_pSystem) {

  000dd	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pSystem@@3PEADEA, 0 ; g_pSystem
  000e5	75 10		 jne	 SHORT $LN9@initSystem

; 171  : 		printf("g_pSystem is NULL\n");

  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG42184
  000ee	e8 00 00 00 00	 call	 printf

; 172  : 		return 0;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 5e		 jmp	 SHORT $LN1@initSystem
$LN9@initSystem:

; 173  : 	}
; 174  : 	_tcscpy(g_pSystem, szConfig);

  000f7	48 8d 44 24 50	 lea	 rax, QWORD PTR szConfig$[rsp]
  000fc	48 89 44 24 30	 mov	 QWORD PTR tv93[rsp], rax
  00101	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pSystem@@3PEADEA ; g_pSystem
  00108	48 89 44 24 28	 mov	 QWORD PTR tv94[rsp], rax
  0010d	48 8b 44 24 28	 mov	 rax, QWORD PTR tv94[rsp]
  00112	48 89 44 24 40	 mov	 QWORD PTR tv95[rsp], rax
$LN11@initSystem:
  00117	48 8b 44 24 30	 mov	 rax, QWORD PTR tv93[rsp]
  0011c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0011f	88 44 24 20	 mov	 BYTE PTR tv128[rsp], al
  00123	48 8b 44 24 28	 mov	 rax, QWORD PTR tv94[rsp]
  00128	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv128[rsp]
  0012d	88 08		 mov	 BYTE PTR [rax], cl
  0012f	48 8b 44 24 30	 mov	 rax, QWORD PTR tv93[rsp]
  00134	48 ff c0	 inc	 rax
  00137	48 89 44 24 30	 mov	 QWORD PTR tv93[rsp], rax
  0013c	48 8b 44 24 28	 mov	 rax, QWORD PTR tv94[rsp]
  00141	48 ff c0	 inc	 rax
  00144	48 89 44 24 28	 mov	 QWORD PTR tv94[rsp], rax
  00149	80 7c 24 20 00	 cmp	 BYTE PTR tv128[rsp], 0
  0014e	75 c7		 jne	 SHORT $LN11@initSystem

; 175  : 
; 176  : 	return 1;

  00150	b8 01 00 00 00	 mov	 eax, 1
$LN1@initSystem:

; 177  : }

  00155	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015d	48 33 cc	 xor	 rcx, rsp
  00160	e8 00 00 00 00	 call	 __security_check_cookie
  00165	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0016c	c3		 ret	 0
?initSystem@CEnv@@SAHPEAD@Z ENDP			; CEnv::initSystem
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?initWorkingPath@CEnv@@SA_NXZ
_TEXT	SEGMENT
tv89 = 32
tv159 = 33
nLen$ = 40
pPos$ = 48
tv204 = 56
tv87 = 64
tv191 = 72
tv157 = 80
pDot$ = 88
tv86 = 96
tv156 = 104
nLen2$ = 112
tv203 = 120
$T1 = 128
tv190 = 136
$T2 = 144
$T3 = 152
pRear$4 = 160
tv88 = 168
tv158 = 176
szBuf$ = 192
__$ArrayPad$ = 320
?initWorkingPath@CEnv@@SA_NXZ PROC			; CEnv::initWorkingPath, COMDAT

; 37   : {

$LN17:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 38   : 	if (g_pWorkDir) return true;

  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00024	74 07		 je	 SHORT $LN2@initWorkin
  00026	b0 01		 mov	 al, 1
  00028	e9 58 03 00 00	 jmp	 $LN1@initWorkin
$LN2@initWorkin:

; 39   : 
; 40   : 	// setting working path
; 41   : 
; 42   : 	TCHAR szBuf[128];
; 43   : 	size_t nLen = 0, nLen2=0;

  0002d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR nLen$[rsp], 0
  00036	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR nLen2$[rsp], 0

; 44   : 	TCHAR *pPos = _tgetenv(SOLUTION_HOME);

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG42121
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getenv
  0004c	48 89 44 24 30	 mov	 QWORD PTR pPos$[rsp], rax

; 45   : 	TCHAR *pDot;
; 46   : 	if (pPos) {

  00051	48 83 7c 24 30
	00		 cmp	 QWORD PTR pPos$[rsp], 0
  00057	74 37		 je	 SHORT $LN3@initWorkin

; 47   : 		nLen = _tcslen(pPos);

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR pPos$[rsp]
  0005e	48 89 44 24 78	 mov	 QWORD PTR tv203[rsp], rax
  00063	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR tv204[rsp], -1
$LL16@initWorkin:
  0006c	48 ff 44 24 38	 inc	 QWORD PTR tv204[rsp]
  00071	48 8b 44 24 78	 mov	 rax, QWORD PTR tv203[rsp]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv204[rsp]
  0007b	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0007f	75 eb		 jne	 SHORT $LL16@initWorkin
  00081	48 8b 44 24 38	 mov	 rax, QWORD PTR tv204[rsp]
  00086	48 89 44 24 28	 mov	 QWORD PTR nLen$[rsp], rax

; 48   : 	}
; 49   : 	else {

  0008b	e9 47 02 00 00	 jmp	 $LN4@initWorkin
$LN3@initWorkin:

; 50   : 
; 51   : #ifdef WIN32
; 52   : 		nLen = GetModuleFileNameEx(GetCurrentProcess(), NULL, szBuf, 128);

  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcess
  00096	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  0009c	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR szBuf$[rsp]
  000a4	33 d2		 xor	 edx, edx
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	e8 00 00 00 00	 call	 GetModuleFileNameExA
  000ae	8b c0		 mov	 eax, eax
  000b0	48 89 44 24 28	 mov	 QWORD PTR nLen$[rsp], rax

; 53   : 		//HANDLE process_handle = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION,FALSE,GetCurrentProcessId());
; 54   : 		//DWORD BufSize;
; 55   : 		//if (process_handle) {
; 56   : 		//	if (QueryFullProcessImageName(process_handle, 0, szBuf, &BufSize)) {
; 57   : 		//		nLen = BufSize;
; 58   : 		//	}
; 59   : 		//	else {
; 60   : 		//		//gs_cLogger.DebugLog(LEVEL_ERROR, "QueryFullProcessImageName is FAIL!");
; 61   : 		//	}
; 62   : 		//	CloseHandle(process_handle);			
; 63   : 		//}
; 64   : 
; 65   : #else
; 66   : 		if (argv0) {
; 67   : 			if (realpath(argv0, szBuf))	nLen = strlen(szBuf);
; 68   : 			else gs_cLogger.DebugLog(LEVEL_ERROR, "realpath [%s]", argv0);
; 69   : 		}
; 70   : 		else {
; 71   : 			nLen = GetProcessFullName(szBuf);
; 72   : 		}
; 73   : #endif
; 74   : 		if (nLen) {

  000b5	48 83 7c 24 28
	00		 cmp	 QWORD PTR nLen$[rsp], 0
  000bb	0f 84 16 02 00
	00		 je	 $LN5@initWorkin

; 75   : 			g_pProcessConfig = new (std::nothrow) TCHAR[nLen + 8];

  000c1	48 8b 44 24 28	 mov	 rax, QWORD PTR nLen$[rsp]
  000c6	48 83 c0 08	 add	 rax, 8
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000d9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  000e1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  000e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pProcessConfig@@3PEADEA, rax ; g_pProcessConfig

; 76   : 			_tcscpy(g_pProcessConfig, szBuf);

  000f0	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR szBuf$[rsp]
  000f8	48 89 44 24 60	 mov	 QWORD PTR tv86[rsp], rax
  000fd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  00104	48 89 44 24 40	 mov	 QWORD PTR tv87[rsp], rax
  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR tv87[rsp]
  0010e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv88[rsp], rax
$LN13@initWorkin:
  00116	48 8b 44 24 60	 mov	 rax, QWORD PTR tv86[rsp]
  0011b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0011e	88 44 24 20	 mov	 BYTE PTR tv89[rsp], al
  00122	48 8b 44 24 40	 mov	 rax, QWORD PTR tv87[rsp]
  00127	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv89[rsp]
  0012c	88 08		 mov	 BYTE PTR [rax], cl
  0012e	48 8b 44 24 60	 mov	 rax, QWORD PTR tv86[rsp]
  00133	48 ff c0	 inc	 rax
  00136	48 89 44 24 60	 mov	 QWORD PTR tv86[rsp], rax
  0013b	48 8b 44 24 40	 mov	 rax, QWORD PTR tv87[rsp]
  00140	48 ff c0	 inc	 rax
  00143	48 89 44 24 40	 mov	 QWORD PTR tv87[rsp], rax
  00148	80 7c 24 20 00	 cmp	 BYTE PTR tv89[rsp], 0
  0014d	75 c7		 jne	 SHORT $LN13@initWorkin

; 77   : 			pDot = _tcsrchr(g_pProcessConfig, '.');

  0014f	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00154	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  0015b	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  00160	48 89 44 24 58	 mov	 QWORD PTR pDot$[rsp], rax

; 78   : 			if(pDot) _tcscpy(pDot, _T(".ini"));

  00165	48 83 7c 24 58
	00		 cmp	 QWORD PTR pDot$[rsp], 0
  0016b	74 18		 je	 SHORT $LN6@initWorkin
  0016d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG42127
  00174	48 8b 7c 24 58	 mov	 rdi, QWORD PTR pDot$[rsp]
  00179	48 8b f0	 mov	 rsi, rax
  0017c	b9 05 00 00 00	 mov	 ecx, 5
  00181	f3 a4		 rep movsb
  00183	eb 21		 jmp	 SHORT $LN7@initWorkin
$LN6@initWorkin:

; 79   : 			else _stprintf(g_pProcessConfig+nLen, _T(".ini"));

  00185	48 8b 44 24 28	 mov	 rax, QWORD PTR nLen$[rsp]
  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessConfig@@3PEADEA ; g_pProcessConfig
  00191	48 03 c8	 add	 rcx, rax
  00194	48 8b c1	 mov	 rax, rcx
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG42128
  0019e	48 8b c8	 mov	 rcx, rax
  001a1	e8 00 00 00 00	 call	 sprintf
$LN7@initWorkin:

; 80   : 
; 81   : 			pPos = _tcsrchr(szBuf, g_s);

  001a6	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  001ab	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR szBuf$[rsp]
  001b3	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  001b8	48 89 44 24 30	 mov	 QWORD PTR pPos$[rsp], rax

; 82   : 			nLen = pPos - szBuf + 1;

  001bd	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR szBuf$[rsp]
  001c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pPos$[rsp]
  001ca	48 2b c8	 sub	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 ff c0	 inc	 rax
  001d3	48 89 44 24 28	 mov	 QWORD PTR nLen$[rsp], rax

; 83   : 			pPos++;

  001d8	48 8b 44 24 30	 mov	 rax, QWORD PTR pPos$[rsp]
  001dd	48 ff c0	 inc	 rax
  001e0	48 89 44 24 30	 mov	 QWORD PTR pPos$[rsp], rax

; 84   : 			nLen2 = _tcslen(pPos);

  001e5	48 8b 44 24 30	 mov	 rax, QWORD PTR pPos$[rsp]
  001ea	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  001f2	48 c7 44 24 48
	ff ff ff ff	 mov	 QWORD PTR tv191[rsp], -1
$LL15@initWorkin:
  001fb	48 ff 44 24 48	 inc	 QWORD PTR tv191[rsp]
  00200	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv190[rsp]
  00208	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv191[rsp]
  0020d	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00211	75 e8		 jne	 SHORT $LL15@initWorkin
  00213	48 8b 44 24 48	 mov	 rax, QWORD PTR tv191[rsp]
  00218	48 89 44 24 70	 mov	 QWORD PTR nLen2$[rsp], rax

; 85   : 			g_pProcessName = new (std::nothrow) TCHAR[nLen2 + 1];

  0021d	48 8b 44 24 70	 mov	 rax, QWORD PTR nLen2$[rsp]
  00222	48 ff c0	 inc	 rax
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0022c	48 8b c8	 mov	 rcx, rax
  0022f	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  00234	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  0023c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  00244	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pProcessName@@3PEADEA, rax ; g_pProcessName

; 86   : 			if (g_pProcessName) _tcscpy(g_pProcessName, pPos);

  0024b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pProcessName@@3PEADEA, 0 ; g_pProcessName
  00253	74 5c		 je	 SHORT $LN8@initWorkin
  00255	48 8b 44 24 30	 mov	 rax, QWORD PTR pPos$[rsp]
  0025a	48 89 44 24 68	 mov	 QWORD PTR tv156[rsp], rax
  0025f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pProcessName@@3PEADEA ; g_pProcessName
  00266	48 89 44 24 50	 mov	 QWORD PTR tv157[rsp], rax
  0026b	48 8b 44 24 50	 mov	 rax, QWORD PTR tv157[rsp]
  00270	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv158[rsp], rax
$LN14@initWorkin:
  00278	48 8b 44 24 68	 mov	 rax, QWORD PTR tv156[rsp]
  0027d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00280	88 44 24 21	 mov	 BYTE PTR tv159[rsp], al
  00284	48 8b 44 24 50	 mov	 rax, QWORD PTR tv157[rsp]
  00289	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv159[rsp]
  0028e	88 08		 mov	 BYTE PTR [rax], cl
  00290	48 8b 44 24 68	 mov	 rax, QWORD PTR tv156[rsp]
  00295	48 ff c0	 inc	 rax
  00298	48 89 44 24 68	 mov	 QWORD PTR tv156[rsp], rax
  0029d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv157[rsp]
  002a2	48 ff c0	 inc	 rax
  002a5	48 89 44 24 50	 mov	 QWORD PTR tv157[rsp], rax
  002aa	80 7c 24 21 00	 cmp	 BYTE PTR tv159[rsp], 0
  002af	75 c7		 jne	 SHORT $LN14@initWorkin
$LN8@initWorkin:

; 87   : 			pDot = _tcsrchr(g_pProcessName, '.');

  002b1	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  002b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pProcessName@@3PEADEA ; g_pProcessName
  002bd	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  002c2	48 89 44 24 58	 mov	 QWORD PTR pDot$[rsp], rax

; 88   : 			if (pPos) *pDot = 0;

  002c7	48 83 7c 24 30
	00		 cmp	 QWORD PTR pPos$[rsp], 0
  002cd	74 08		 je	 SHORT $LN9@initWorkin
  002cf	48 8b 44 24 58	 mov	 rax, QWORD PTR pDot$[rsp]
  002d4	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN9@initWorkin:
$LN5@initWorkin:
$LN4@initWorkin:

; 89   : 		}
; 90   : 	}
; 91   : 
; 92   : 	if (nLen) {

  002d7	48 83 7c 24 28
	00		 cmp	 QWORD PTR nLen$[rsp], 0
  002dd	0f 84 a0 00 00
	00		 je	 $LN10@initWorkin

; 93   : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen];

  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  002ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nLen$[rsp]
  002ef	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  002f4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  002fc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  00304	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, rax ; g_pWorkDir

; 94   : 		if (!g_pWorkDir) {

  0030b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00313	75 04		 jne	 SHORT $LN11@initWorkin

; 95   : 			//gs_cLogger.Log_Debug(LOG_ERROR, "new g_pWorkDir");
; 96   : 			return false;

  00315	32 c0		 xor	 al, al
  00317	eb 6c		 jmp	 SHORT $LN1@initWorkin
$LN11@initWorkin:

; 97   : 		}
; 98   : 		TCHAR *pRear = _tcsrchr((TCHAR *)szBuf, g_s);

  00319	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0031e	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR szBuf$[rsp]
  00326	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0032b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pRear$4[rsp], rax

; 99   : 		nLen = pRear - szBuf + 1;

  00333	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR szBuf$[rsp]
  0033b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pRear$4[rsp]
  00343	48 2b c8	 sub	 rcx, rax
  00346	48 8b c1	 mov	 rax, rcx
  00349	48 ff c0	 inc	 rax
  0034c	48 89 44 24 28	 mov	 QWORD PTR nLen$[rsp], rax

; 100  : 		_tcsncpy(g_pWorkDir, szBuf, nLen);

  00351	4c 8b 44 24 28	 mov	 r8, QWORD PTR nLen$[rsp]
  00356	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR szBuf$[rsp]
  0035e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00365	e8 00 00 00 00	 call	 _tcsncpy

; 101  : 		g_pWorkDir[nLen] = 0;

  0036a	48 8b 44 24 28	 mov	 rax, QWORD PTR nLen$[rsp]
  0036f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00376	48 03 c8	 add	 rcx, rax
  00379	48 8b c1	 mov	 rax, rcx
  0037c	c6 00 00	 mov	 BYTE PTR [rax], 0

; 102  : 		return true;

  0037f	b0 01		 mov	 al, 1
  00381	eb 02		 jmp	 SHORT $LN1@initWorkin
$LN10@initWorkin:

; 103  : 	}
; 104  : 	
; 105  : 	return false;

  00383	32 c0		 xor	 al, al
$LN1@initWorkin:

; 106  : }

  00385	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0038d	48 33 cc	 xor	 rcx, rsp
  00390	e8 00 00 00 00	 call	 __security_check_cookie
  00395	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  0039c	5f		 pop	 rdi
  0039d	5e		 pop	 rsi
  0039e	c3		 ret	 0
?initWorkingPath@CEnv@@SA_NXZ ENDP			; CEnv::initWorkingPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?setWorkingDir2@CEnv@@SA_NH@Z
_TEXT	SEGMENT
tv84 = 32
i$ = 36
tv140 = 40
tv82 = 48
pRear$ = 56
nLen$ = 64
tv81 = 72
$T1 = 80
tv139 = 88
tv73 = 96
$T2 = 104
tv83 = 112
upCount$ = 144
?setWorkingDir2@CEnv@@SA_NH@Z PROC			; CEnv::setWorkingDir2, COMDAT

; 128  : {

$LN12:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 129  : 	if (!g_pWorkDir) {

  0000b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00013	75 07		 jne	 SHORT $LN5@setWorking

; 130  : 		return false;

  00015	32 c0		 xor	 al, al
  00017	e9 ad 01 00 00	 jmp	 $LN1@setWorking
$LN5@setWorking:

; 131  : 	}
; 132  : 	size_t	nLen = (int)_tcslen(g_pWorkDir);

  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00023	48 89 44 24 58	 mov	 QWORD PTR tv139[rsp], rax
  00028	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv140[rsp], -1
$LL11@setWorking:
  00031	48 ff 44 24 28	 inc	 QWORD PTR tv140[rsp]
  00036	48 8b 44 24 58	 mov	 rax, QWORD PTR tv139[rsp]
  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv140[rsp]
  00040	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00044	75 eb		 jne	 SHORT $LL11@setWorking
  00046	48 8b 44 24 28	 mov	 rax, QWORD PTR tv140[rsp]
  0004b	48 98		 cdqe
  0004d	48 89 44 24 40	 mov	 QWORD PTR nLen$[rsp], rax

; 133  : 	TCHAR *pRear = g_pWorkDir;

  00052	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00059	48 89 44 24 38	 mov	 QWORD PTR pRear$[rsp], rax

; 134  : 	if (g_pWorkDir2) delete g_pWorkDir2;

  0005e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir2@@3PEADEA, 0 ; g_pWorkDir2
  00066	74 45		 je	 SHORT $LN6@setWorking
  00068	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  0006f	48 89 44 24 50	 mov	 QWORD PTR $T1[rsp], rax
  00074	ba 01 00 00 00	 mov	 edx, 1
  00079	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T1[rsp]
  0007e	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00083	48 83 7c 24 50
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00089	75 0b		 jne	 SHORT $LN8@setWorking
  0008b	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00094	eb 17		 jmp	 SHORT $LN9@setWorking
$LN8@setWorking:
  00096	48 c7 05 00 00
	00 00 23 81 00
	00		 mov	 QWORD PTR ?g_pWorkDir2@@3PEADEA, 33059 ; g_pWorkDir2, 00008123H
  000a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  000a8	48 89 44 24 60	 mov	 QWORD PTR tv73[rsp], rax
$LN9@setWorking:
$LN6@setWorking:

; 135  : 	g_pWorkDir2 = new TCHAR[nLen + 1];

  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR nLen$[rsp]
  000b2	48 ff c0	 inc	 rax
  000b5	48 8b c8	 mov	 rcx, rax
  000b8	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  000bd	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  000c2	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  000c7	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir2@@3PEADEA, rax ; g_pWorkDir2

; 136  : 	_tcscpy(g_pWorkDir2, g_pWorkDir);

  000ce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000d5	48 89 44 24 48	 mov	 QWORD PTR tv81[rsp], rax
  000da	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  000e1	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
  000e6	48 8b 44 24 30	 mov	 rax, QWORD PTR tv82[rsp]
  000eb	48 89 44 24 70	 mov	 QWORD PTR tv83[rsp], rax
$LN10@setWorking:
  000f0	48 8b 44 24 48	 mov	 rax, QWORD PTR tv81[rsp]
  000f5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000f8	88 44 24 20	 mov	 BYTE PTR tv84[rsp], al
  000fc	48 8b 44 24 30	 mov	 rax, QWORD PTR tv82[rsp]
  00101	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv84[rsp]
  00106	88 08		 mov	 BYTE PTR [rax], cl
  00108	48 8b 44 24 48	 mov	 rax, QWORD PTR tv81[rsp]
  0010d	48 ff c0	 inc	 rax
  00110	48 89 44 24 48	 mov	 QWORD PTR tv81[rsp], rax
  00115	48 8b 44 24 30	 mov	 rax, QWORD PTR tv82[rsp]
  0011a	48 ff c0	 inc	 rax
  0011d	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
  00122	80 7c 24 20 00	 cmp	 BYTE PTR tv84[rsp], 0
  00127	75 c7		 jne	 SHORT $LN10@setWorking

; 137  : 
; 138  : 	int i;
; 139  : 	for (i = 0; i < upCount; i++) 

  00129	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00131	eb 0a		 jmp	 SHORT $LN4@setWorking
$LN2@setWorking:
  00133	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00137	ff c0		 inc	 eax
  00139	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@setWorking:
  0013d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR upCount$[rsp]
  00144	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00148	7d 20		 jge	 SHORT $LN3@setWorking

; 140  : 	{
; 141  : 		pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  0014a	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0014f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00156	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0015b	48 89 44 24 38	 mov	 QWORD PTR pRear$[rsp], rax

; 142  : 		*pRear = 0;

  00160	48 8b 44 24 38	 mov	 rax, QWORD PTR pRear$[rsp]
  00165	c6 00 00	 mov	 BYTE PTR [rax], 0

; 143  : 	}

  00168	eb c9		 jmp	 SHORT $LN2@setWorking
$LN3@setWorking:

; 144  : 	pRear = _tcsrchr((TCHAR *)g_pWorkDir2, g_s);

  0016a	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0016f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00176	e8 00 00 00 00	 call	 ?_tcsrchr@@YAPEADPEADI@Z ; _tcsrchr
  0017b	48 89 44 24 38	 mov	 QWORD PTR pRear$[rsp], rax

; 145  : 	nLen = pRear - g_pWorkDir2 + 1;

  00180	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  00187	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pRear$[rsp]
  0018c	48 2b c8	 sub	 rcx, rax
  0018f	48 8b c1	 mov	 rax, rcx
  00192	48 ff c0	 inc	 rax
  00195	48 89 44 24 40	 mov	 QWORD PTR nLen$[rsp], rax

; 146  : 
; 147  : 	_tcsncpy(g_pWorkDir2, g_pWorkDir, nLen); g_pWorkDir2[nLen] = 0;

  0019a	4c 8b 44 24 40	 mov	 r8, QWORD PTR nLen$[rsp]
  0019f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  001a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  001ad	e8 00 00 00 00	 call	 _tcsncpy
  001b2	48 8b 44 24 40	 mov	 rax, QWORD PTR nLen$[rsp]
  001b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?g_pWorkDir2@@3PEADEA ; g_pWorkDir2
  001be	48 03 c8	 add	 rcx, rax
  001c1	48 8b c1	 mov	 rax, rcx
  001c4	c6 00 00	 mov	 BYTE PTR [rax], 0

; 148  : 	return true;

  001c7	b0 01		 mov	 al, 1
$LN1@setWorking:

; 149  : }

  001c9	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001d0	c3		 ret	 0
?setWorkingDir2@CEnv@@SA_NH@Z ENDP			; CEnv::setWorkingDir2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?setWorkingDir@CEnv@@SA_NPEAD@Z
_TEXT	SEGMENT
tv86 = 32
tv93 = 40
tv84 = 48
tv83 = 56
$T1 = 64
nLen$2 = 72
tv92 = 80
tv73 = 88
$T3 = 96
tv85 = 104
pPullPath$ = 128
?setWorkingDir@CEnv@@SA_NPEAD@Z PROC			; CEnv::setWorkingDir, COMDAT

; 110  : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 111  : 	if (pPullPath) {

  00009	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR pPullPath$[rsp], 0
  00012	0f 84 23 01 00
	00		 je	 $LN2@setWorking

; 112  : 		size_t	nLen = (int)_tcslen(pPullPath);

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pPullPath$[rsp]
  00020	48 89 44 24 50	 mov	 QWORD PTR tv92[rsp], rax
  00025	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv93[rsp], -1
$LL10@setWorking:
  0002e	48 ff 44 24 28	 inc	 QWORD PTR tv93[rsp]
  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR tv92[rsp]
  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv93[rsp]
  0003d	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00041	75 eb		 jne	 SHORT $LL10@setWorking
  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR tv93[rsp]
  00048	48 98		 cdqe
  0004a	48 89 44 24 48	 mov	 QWORD PTR nLen$2[rsp], rax

; 113  : 		if (!nLen) return false;

  0004f	48 83 7c 24 48
	00		 cmp	 QWORD PTR nLen$2[rsp], 0
  00055	75 07		 jne	 SHORT $LN3@setWorking
  00057	32 c0		 xor	 al, al
  00059	e9 df 00 00 00	 jmp	 $LN1@setWorking
$LN3@setWorking:

; 114  : 		if (g_pWorkDir) {

  0005e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  00066	74 40		 je	 SHORT $LN4@setWorking

; 115  : 			delete[] g_pWorkDir;

  00068	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  0006f	48 89 44 24 40	 mov	 QWORD PTR $T1[rsp], rax
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR $T1[rsp]
  00079	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  0007e	48 83 7c 24 40
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00084	75 0b		 jne	 SHORT $LN7@setWorking
  00086	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  0008f	eb 17		 jmp	 SHORT $LN8@setWorking
$LN7@setWorking:
  00091	48 c7 05 00 00
	00 00 23 81 00
	00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, 33059 ; g_pWorkDir, 00008123H
  0009c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000a3	48 89 44 24 58	 mov	 QWORD PTR tv73[rsp], rax
$LN8@setWorking:
$LN4@setWorking:

; 116  : 		}
; 117  : 		g_pWorkDir = new (std::nothrow) TCHAR[nLen + 2];

  000a8	48 8b 44 24 48	 mov	 rax, QWORD PTR nLen$2[rsp]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  000c0	48 89 44 24 60	 mov	 QWORD PTR $T3[rsp], rax
  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR $T3[rsp]
  000ca	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?g_pWorkDir@@3PEADEA, rax ; g_pWorkDir

; 118  : 
; 119  : 		if (g_pWorkDir == NULL) return false;

  000d1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?g_pWorkDir@@3PEADEA, 0 ; g_pWorkDir
  000d9	75 04		 jne	 SHORT $LN5@setWorking
  000db	32 c0		 xor	 al, al
  000dd	eb 5e		 jmp	 SHORT $LN1@setWorking
$LN5@setWorking:

; 120  : 
; 121  : 		_tcscpy(g_pWorkDir, pPullPath);

  000df	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pPullPath$[rsp]
  000e7	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
  000ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000f3	48 89 44 24 30	 mov	 QWORD PTR tv84[rsp], rax
  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR tv84[rsp]
  000fd	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
$LN9@setWorking:
  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
  00107	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0010a	88 44 24 20	 mov	 BYTE PTR tv86[rsp], al
  0010e	48 8b 44 24 30	 mov	 rax, QWORD PTR tv84[rsp]
  00113	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv86[rsp]
  00118	88 08		 mov	 BYTE PTR [rax], cl
  0011a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
  0011f	48 ff c0	 inc	 rax
  00122	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
  00127	48 8b 44 24 30	 mov	 rax, QWORD PTR tv84[rsp]
  0012c	48 ff c0	 inc	 rax
  0012f	48 89 44 24 30	 mov	 QWORD PTR tv84[rsp], rax
  00134	80 7c 24 20 00	 cmp	 BYTE PTR tv86[rsp], 0
  00139	75 c7		 jne	 SHORT $LN9@setWorking
$LN2@setWorking:

; 122  : 	}
; 123  : 
; 124  : 	return true;

  0013b	b0 01		 mov	 al, 1
$LN1@setWorking:

; 125  : }

  0013d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00141	c3		 ret	 0
?setWorkingDir@CEnv@@SA_NPEAD@Z ENDP			; CEnv::setWorkingDir
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\comenv.cpp
;	COMDAT ?FullName@CEnv@@SAHPEBDPEAPEAD@Z
_TEXT	SEGMENT
nLen$ = 32
tv128 = 40
tv89 = 48
tv95 = 56
tv88 = 64
$T1 = 72
fName$ = 96
fPath$ = 104
?FullName@CEnv@@SAHPEBDPEAPEAD@Z PROC			; CEnv::FullName, COMDAT

; 22   : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 23   : 	*fPath = NULL;

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR fPath$[rsp]
  00013	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 24   : 	int	nLen;
; 25   : 
; 26   : 	nLen = (int)_tcslen(g_pWorkDir) + (int)_tcslen(fName) + 1;

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  00021	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
  00026	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv128[rsp], -1
$LL5@FullName:
  0002f	48 ff 44 24 28	 inc	 QWORD PTR tv128[rsp]
  00034	48 8b 44 24 38	 mov	 rax, QWORD PTR tv95[rsp]
  00039	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv128[rsp]
  0003e	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00042	75 eb		 jne	 SHORT $LL5@FullName
  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR tv128[rsp]
  00049	48 8b 4c 24 60	 mov	 rcx, QWORD PTR fName$[rsp]
  0004e	48 89 4c 24 40	 mov	 QWORD PTR tv88[rsp], rcx
  00053	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR tv89[rsp], -1
$LL4@FullName:
  0005c	48 ff 44 24 30	 inc	 QWORD PTR tv89[rsp]
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv88[rsp]
  00066	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv89[rsp]
  0006b	80 3c 11 00	 cmp	 BYTE PTR [rcx+rdx], 0
  0006f	75 eb		 jne	 SHORT $LL4@FullName
  00071	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv89[rsp]
  00076	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  0007a	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax

; 27   : 	*fPath = new (std::nothrow) TCHAR[nLen];

  0007e	48 63 44 24 20	 movsxd	 rax, DWORD PTR nLen$[rsp]
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nothrow@std@@3Unothrow_t@1@B ; std::nothrow
  0008a	48 8b c8	 mov	 rcx, rax
  0008d	e8 00 00 00 00	 call	 ??_U@YAPEAX_KAEBUnothrow_t@std@@@Z ; operator new[]
  00092	48 89 44 24 48	 mov	 QWORD PTR $T1[rsp], rax
  00097	48 8b 44 24 68	 mov	 rax, QWORD PTR fPath$[rsp]
  0009c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T1[rsp]
  000a1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 28   : 
; 29   : 	if (*fPath) {

  000a4	48 8b 44 24 68	 mov	 rax, QWORD PTR fPath$[rsp]
  000a9	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000ad	74 1d		 je	 SHORT $LN2@FullName

; 30   : 		nLen = _stprintf(*fPath, g_pWorkDir, fName);

  000af	4c 8b 44 24 60	 mov	 r8, QWORD PTR fName$[rsp]
  000b4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?g_pWorkDir@@3PEADEA ; g_pWorkDir
  000bb	48 8b 44 24 68	 mov	 rax, QWORD PTR fPath$[rsp]
  000c0	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000c3	e8 00 00 00 00	 call	 sprintf
  000c8	89 44 24 20	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@FullName:

; 31   : 	}
; 32   : 	return nLen;

  000cc	8b 44 24 20	 mov	 eax, DWORD PTR nLen$[rsp]

; 33   : }

  000d0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d4	c3		 ret	 0
?FullName@CEnv@@SAHPEBDPEAPEAD@Z ENDP			; CEnv::FullName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
__$ArrayPad$ = 48
_Buffer$ = 80
_Format$ = 88
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

  00027	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0002c	48 8d 44 24 60	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00031	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00036	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  0003b	45 33 c0	 xor	 r8d, r8d
  0003e	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Format$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00048	e8 00 00 00 00	 call	 _vsprintf_l
  0004d	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

  00051	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

  0005a	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1788 : }

  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00063	48 33 cc	 xor	 rcx, rsp
  00066	e8 00 00 00 00	 call	 __security_check_cookie
  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1386 :     int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1391 : }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
__$ArrayPad$ = 48
_Format$ = 80
printf	PROC						; COMDAT

; 950  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

  00027	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0002c	48 8d 44 24 58	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00031	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00041	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00046	45 33 c0	 xor	 r8d, r8d
  00049	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Format$[rsp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 _vfprintf_l
  00056	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

  0005a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

  00063	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 957  : }

  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0006c	48 33 cc	 xor	 rcx, rsp
  0006f	e8 00 00 00 00	 call	 __security_check_cookie
  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT ?_tcsrchr@@YAPEADPEADI@Z
_TEXT	SEGMENT
_S$ = 48
_C$ = 56
?_tcsrchr@@YAPEADPEADI@Z PROC				; _tcsrchr, COMDAT

; 2027 :         {return ((char *)_tcsrchr((const char *)_S, _C)); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	8b 54 24 38	 mov	 edx, DWORD PTR _C$[rsp]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _S$[rsp]
  00016	e8 00 00 00 00	 call	 _tcsrchr
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_tcsrchr@@YAPEADPEADI@Z ENDP				; _tcsrchr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsrchr
_TEXT	SEGMENT
_s1$ = 48
_c$ = 56
_tcsrchr PROC						; COMDAT

; 1569 : _Check_return_ __inline _CRPC _tcsrchr(_In_ _CPC _s1,_In_ _UI _c) {return (_CRPC)_mbsrchr((_CPUC)_s1,_c);}

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	8b 54 24 38	 mov	 edx, DWORD PTR _c$[rsp]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _s1$[rsp]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsrchr
  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
_tcsrchr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsncpy
_TEXT	SEGMENT
_Dst$ = 48
_Source$ = 56
_Count$ = 64
_tcsncpy PROC						; COMDAT

; 1542 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Source$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dst$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsnbcpy

; 1546 : #pragma warning(pop)
; 1547 : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
_tcsncpy ENDP
_TEXT	ENDS
END
