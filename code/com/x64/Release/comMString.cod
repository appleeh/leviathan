; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_tcsncpy
PUBLIC	?ISINCLUDE@@YA_NHH@Z				; ISINCLUDE
PUBLIC	?getIndex@@YAHH@Z				; getIndex
PUBLIC	?getSizeByIndex@@YAHH@Z				; getSizeByIndex
PUBLIC	?newBufByIndex@CMemManager@@QEAAPEADH@Z		; CMemManager::newBufByIndex
PUBLIC	??0CmString@@QEAA@XZ				; CmString::CmString
PUBLIC	??0CmString@@QEAA@PEBD@Z			; CmString::CmString
PUBLIC	??0CmString@@QEAA@H@Z				; CmString::CmString
PUBLIC	??0CmString@@QEAA@AEBV0@@Z			; CmString::CmString
PUBLIC	??0CmString@@QEAA@PEBV0@@Z			; CmString::CmString
PUBLIC	??1CmString@@QEAA@XZ				; CmString::~CmString
PUBLIC	?c_str@CmString@@QEBAPEBDXZ			; CmString::c_str
PUBLIC	?capacity_idx@CmString@@QEBAHXZ			; CmString::capacity_idx
PUBLIC	??8CmString@@QEAA_NPEBD@Z			; CmString::operator==
PUBLIC	??4CmString@@QEAAAEAV0@PEBD@Z			; CmString::operator=
PUBLIC	?append@CmString@@QEAAAEAV1@PEBD@Z		; CmString::append
PUBLIC	?replace@CmString@@QEAAAEAV1@HHPEBD@Z		; CmString::replace
PUBLIC	?reserve@CmString@@QEAAXH@Z			; CmString::reserve
PUBLIC	?find@CmString@@QEAAPEADPEBDH@Z			; CmString::find
PUBLIC	?find_next@CmString@@QEAAPEADPEBDH@Z		; CmString::find_next
PUBLIC	?compare@CmString@@QEAAHPEBD@Z			; CmString::compare
PUBLIC	?compare@CmString@@QEAAHHHPEBD@Z		; CmString::compare
PUBLIC	?__autoclassinit2@CmString@@QEAAX_K@Z		; CmString::__autoclassinit2
PUBLIC	??_GCmString@@QEAAPEAXI@Z			; CmString::`scalar deleting destructor'
PUBLIC	??0CStringList@@QEAA@XZ				; CStringList::CStringList
PUBLIC	??1CStringList@@QEAA@XZ				; CStringList::~CStringList
PUBLIC	?del@CStringList@@QEAA_NPEAVCmString@@@Z	; CStringList::del
PUBLIC	?del@CStringList@@QEAA_NH@Z			; CStringList::del
PUBLIC	?__alloc@CStringList@@AEAAHH@Z			; CStringList::__alloc
PUBLIC	?_DEL@CStringList@@AEAAXH@Z			; CStringList::_DEL
PUBLIC	?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z	; CStringList::__add
PUBLIC	?newIdx@CStringList@@AEAAHXZ			; CStringList::newIdx
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__mbsnbcpy:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	?delBufByIndex@CMemManager@@QEAAXPEADH@Z:PROC	; CMemManager::delBufByIndex
EXTRN	?__newBuf@CMemManager@@AEAAPEADH_K@Z:PROC	; CMemManager::__newBuf
EXTRN	__CxxFrameHandler3:PROC
EXTRN	?g_nSizeList@@3QBHB:BYTE			; g_nSizeList
EXTRN	?gs_pMMgr@@3PEAVCMemManager@@EA:QWORD		; gs_pMMgr
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tcsncpy DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$_tcsncpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getIndex@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?getIndex@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?newBufByIndex@CMemManager@@QEAAPEADH@Z DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?newBufByIndex@CMemManager@@QEAAPEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CmString@@QEAA@PEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+211
	DD	imagerel $unwind$??0CmString@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CmString@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??0CmString@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CmString@@QEAA@AEBV0@@Z DD imagerel $LN4
	DD	imagerel $LN4+165
	DD	imagerel $unwind$??0CmString@@QEAA@AEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0CmString@@QEAA@PEBV0@@Z DD imagerel $LN4
	DD	imagerel $LN4+165
	DD	imagerel $unwind$??0CmString@@QEAA@PEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CmString@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$??1CmString@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8CmString@@QEAA_NPEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+216
	DD	imagerel $unwind$??8CmString@@QEAA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4CmString@@QEAAAEAV0@PEBD@Z DD imagerel $LN11
	DD	imagerel $LN11+569
	DD	imagerel $unwind$??4CmString@@QEAAAEAV0@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@CmString@@QEAAAEAV1@PEBD@Z DD imagerel $LN10
	DD	imagerel $LN10+631
	DD	imagerel $unwind$?append@CmString@@QEAAAEAV1@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?replace@CmString@@QEAAAEAV1@HHPEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+512
	DD	imagerel $unwind$?replace@CmString@@QEAAAEAV1@HHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@CmString@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?reserve@CmString@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find@CmString@@QEAAPEADPEBDH@Z DD imagerel $LN10
	DD	imagerel $LN10+246
	DD	imagerel $unwind$?find@CmString@@QEAAPEADPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?find_next@CmString@@QEAAPEADPEBDH@Z DD imagerel $LN10
	DD	imagerel $LN10+228
	DD	imagerel $unwind$?find_next@CmString@@QEAAPEADPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@CmString@@QEAAHPEBD@Z DD imagerel $LN12
	DD	imagerel $LN12+272
	DD	imagerel $unwind$?compare@CmString@@QEAAHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@CmString@@QEAAHHHPEBD@Z DD imagerel $LN11
	DD	imagerel $LN11+227
	DD	imagerel $unwind$?compare@CmString@@QEAAHHHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@CmString@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?__autoclassinit2@CmString@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCmString@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_GCmString@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1CStringList@@QEAA@XZ DD imagerel $LN10
	DD	imagerel $LN10+223
	DD	imagerel $unwind$??1CStringList@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?del@CStringList@@QEAA_NPEAVCmString@@@Z DD imagerel $LN7
	DD	imagerel $LN7+99
	DD	imagerel $unwind$?del@CStringList@@QEAA_NPEAVCmString@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?del@CStringList@@QEAA_NH@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$?del@CStringList@@QEAA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__alloc@CStringList@@AEAAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+134
	DD	imagerel $unwind$?__alloc@CStringList@@AEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_DEL@CStringList@@AEAAXH@Z DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$?_DEL@CStringList@@AEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD imagerel $LN7
	DD	imagerel $LN7+196
	DD	imagerel $unwind$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA DD imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
	DD	imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?newIdx@CStringList@@AEAAHXZ DD imagerel $LN9
	DD	imagerel $LN9+184
	DD	imagerel $unwind$?newIdx@CStringList@@AEAAHXZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?newIdx@CStringList@@AEAAHXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	0ffffffffH
	DD	imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z+57
	DD	00H
	DD	imagerel ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z+121
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z DD 011c11H
	DD	0a213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_DEL@CStringList@@AEAAXH@Z DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__alloc@CStringList@@AEAAHH@Z DD 030f01H
	DD	0700b620fH
	DD	0600aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?del@CStringList@@QEAA_NH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?del@CStringList@@QEAA_NPEAVCmString@@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CStringList@@QEAA@XZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCmString@@QEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@CmString@@QEAAX_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@CmString@@QEAAHHHPEBD@Z DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@CmString@@QEAAHPEBD@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find_next@CmString@@QEAAPEADPEBDH@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?find@CmString@@QEAAPEADPEBDH@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@CmString@@QEAAXH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?replace@CmString@@QEAAAEAV1@HHPEBD@Z DD 021a01H
	DD	011011aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@CmString@@QEAAAEAV1@PEBD@Z DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4CmString@@QEAAAEAV0@PEBD@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8CmString@@QEAA_NPEBD@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1CmString@@QEAA@XZ DD imagerel ??1CmString@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1CmString@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1CmString@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1CmString@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1CmString@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CmString@@QEAA@PEBV0@@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CmString@@QEAA@AEBV0@@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CmString@@QEAA@H@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0CmString@@QEAA@PEBD@Z DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?newBufByIndex@CMemManager@@QEAAPEADH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getIndex@@YAHH@Z DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tcsncpy DD 011301H
	DD	04213H
xdata	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?newIdx@CStringList@@AEAAHXZ
_TEXT	SEGMENT
nIdx$ = 32
i$ = 36
this$ = 64
?newIdx@CStringList@@AEAAHXZ PROC			; CStringList::newIdx, COMDAT

; 252  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 253  : 	int nIdx = m_nLast, i;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00011	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 254  : 	for (i = 0; i < m_nListCnt; i++)

  00015	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0001d	eb 0a		 jmp	 SHORT $LN4@newIdx
$LN2@newIdx:
  0001f	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00023	ff c0		 inc	 eax
  00025	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@newIdx:
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	8b 00		 mov	 eax, DWORD PTR [rax]
  00030	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00034	7d 3c		 jge	 SHORT $LN3@newIdx

; 255  : 	{
; 256  : 		if (nIdx >= m_nListCnt) nIdx = 0;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	8b 00		 mov	 eax, DWORD PTR [rax]
  0003d	39 44 24 20	 cmp	 DWORD PTR nIdx$[rsp], eax
  00041	7c 08		 jl	 SHORT $LN5@newIdx
  00043	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR nIdx$[rsp], 0
$LN5@newIdx:

; 257  : 		if (!m_pList[nIdx]) {

  0004b	48 63 44 24 20	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00055	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00059	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0005e	75 06		 jne	 SHORT $LN6@newIdx

; 258  : 			return nIdx;

  00060	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
  00064	eb 4d		 jmp	 SHORT $LN1@newIdx
$LN6@newIdx:

; 259  : 		}
; 260  : 		nIdx++;

  00066	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 261  : 	}

  00070	eb ad		 jmp	 SHORT $LN2@newIdx
$LN3@newIdx:

; 262  : 	// realloc
; 263  : 	if (!__alloc(m_nListCnt + UNIT_ADD_SIZE)) {

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00077	8b 00		 mov	 eax, DWORD PTR [rax]
  00079	83 c0 20	 add	 eax, 32			; 00000020H
  0007c	8b d0		 mov	 edx, eax
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00083	e8 00 00 00 00	 call	 ?__alloc@CStringList@@AEAAHH@Z ; CStringList::__alloc
  00088	85 c0		 test	 eax, eax
  0008a	75 07		 jne	 SHORT $LN7@newIdx

; 264  : 		return -1;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	eb 20		 jmp	 SHORT $LN1@newIdx
$LN7@newIdx:

; 265  : 	}
; 266  : 	nIdx = m_nListCnt;

  00093	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00098	8b 00		 mov	 eax, DWORD PTR [rax]
  0009a	89 44 24 20	 mov	 DWORD PTR nIdx$[rsp], eax

; 267  : 	m_nListCnt += UNIT_ADD_SIZE;

  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000a3	8b 00		 mov	 eax, DWORD PTR [rax]
  000a5	83 c0 20	 add	 eax, 32			; 00000020H
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	89 01		 mov	 DWORD PTR [rcx], eax

; 268  : 	return nIdx;

  000af	8b 44 24 20	 mov	 eax, DWORD PTR nIdx$[rsp]
$LN1@newIdx:

; 269  : }

  000b3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b7	c3		 ret	 0
?newIdx@CStringList@@AEAAHXZ ENDP			; CStringList::newIdx
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z
_TEXT	SEGMENT
$T1 = 32
tv79 = 40
pNewString$ = 48
$T2 = 56
$T3 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z PROC	; CStringList::__add, COMDAT

; 242  : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 c7 44 24 40
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 243  : 	if (0 > nIdx) return NULL;

  0001c	83 7c 24 70 00	 cmp	 DWORD PTR nIdx$[rsp], 0
  00021	7d 07		 jge	 SHORT $LN2@add
  00023	33 c0		 xor	 eax, eax
  00025	e9 95 00 00 00	 jmp	 $LN1@add
$LN2@add:

; 244  : 	CmString *pNewString = new CmString(pString);

  0002a	b9 10 00 00 00	 mov	 ecx, 16
  0002f	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00034	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0003f	74 25		 je	 SHORT $LN4@add
  00041	ba 10 00 00 00	 mov	 edx, 16
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004b	e8 00 00 00 00	 call	 ?__autoclassinit2@CmString@@QEAAX_K@Z
  00050	48 8b 54 24 68	 mov	 rdx, QWORD PTR pString$[rsp]
  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0005a	e8 00 00 00 00	 call	 ??0CmString@@QEAA@PEBD@Z ; CmString::CmString
  0005f	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00064	eb 09		 jmp	 SHORT $LN5@add
$LN4@add:
  00066	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
$LN5@add:
  0006f	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  00074	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR $T2[rsp]
  0007e	48 89 44 24 30	 mov	 QWORD PTR pNewString$[rsp], rax

; 245  : 	m_pList[nIdx] = pNewString;

  00083	48 63 44 24 70	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00088	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0008d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00091	48 8b 54 24 30	 mov	 rdx, QWORD PTR pNewString$[rsp]
  00096	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 246  : 	m_nLast = nIdx + 1;

  0009a	8b 44 24 70	 mov	 eax, DWORD PTR nIdx$[rsp]
  0009e	ff c0		 inc	 eax
  000a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a5	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 247  : 	m_nUseCnt++;

  000a8	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000ad	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000b0	ff c0		 inc	 eax
  000b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000b7	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 248  : 	return pNewString;

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR pNewString$[rsp]
$LN1@add:

; 249  : }

  000bf	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c3	c3		 ret	 0
?__add@CStringList@@AEAAPEAVCmString@@PEADH@Z ENDP	; CStringList::__add
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
pNewString$ = 48
$T2 = 56
$T3 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA PROC ; `CStringList::__add'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA ENDP ; `CStringList::__add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
pNewString$ = 48
$T2 = 56
$T3 = 64
this$ = 96
pString$ = 104
nIdx$ = 112
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA PROC ; `CStringList::__add'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??__add@CStringList@@AEAAPEAVCmString@@PEADH@Z@4HA ENDP ; `CStringList::__add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?_DEL@CStringList@@AEAAXH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv77 = 48
this$ = 80
i$ = 88
?_DEL@CStringList@@AEAAXH@Z PROC			; CStringList::_DEL, COMDAT

; 104  : 	inline void _DEL(int i) { if (m_pList[i]) { delete m_pList[i];  m_pList[i] = 0; m_nDelIdx = i; m_nUseCnt--;	} }

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000d	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00017	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0001b	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00020	74 7c		 je	 SHORT $LN2@DEL
  00022	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00030	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00034	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00039	48 8b 44 24 28	 mov	 rax, QWORD PTR $T2[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00043	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00049	74 16		 je	 SHORT $LN4@DEL
  0004b	ba 01 00 00 00	 mov	 edx, 1
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00055	e8 00 00 00 00	 call	 ??_GCmString@@QEAAPEAXI@Z
  0005a	48 89 44 24 30	 mov	 QWORD PTR tv77[rsp], rax
  0005f	eb 09		 jmp	 SHORT $LN5@DEL
$LN4@DEL:
  00061	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv77[rsp], 0
$LN5@DEL:
  0006a	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00074	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00078	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00085	8b 4c 24 58	 mov	 ecx, DWORD PTR i$[rsp]
  00089	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00091	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00094	ff c8		 dec	 eax
  00096	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009b	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN2@DEL:
  0009e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a2	c3		 ret	 0
?_DEL@CStringList@@AEAAXH@Z ENDP			; CStringList::_DEL
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?__alloc@CStringList@@AEAAHH@Z
_TEXT	SEGMENT
pList$ = 32
this$ = 80
nMaxCount$ = 88
?__alloc@CStringList@@AEAAHH@Z PROC			; CStringList::__alloc, COMDAT

; 223  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 224  : 	CmString** pList = (CmString**)calloc(nMaxCount, sizeof(CmString*));

  0000f	48 63 44 24 58	 movsxd	 rax, DWORD PTR nMaxCount$[rsp]
  00014	ba 08 00 00 00	 mov	 edx, 8
  00019	48 8b c8	 mov	 rcx, rax
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00022	48 89 44 24 20	 mov	 QWORD PTR pList$[rsp], rax

; 225  : 	if (!pList) {

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR pList$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN2@alloc

; 226  : 		return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 4c		 jmp	 SHORT $LN1@alloc
$LN2@alloc:

; 227  : 	}
; 228  : 
; 229  : 	if (m_pList) {

  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0003d	74 2e		 je	 SHORT $LN3@alloc

; 230  : 		memcpy(pList, m_pList, m_nListCnt * sizeof(CmString*));

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00047	48 c1 e0 03	 shl	 rax, 3
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	48 8b 7c 24 20	 mov	 rdi, QWORD PTR pList$[rsp]
  00055	48 8b 71 10	 mov	 rsi, QWORD PTR [rcx+16]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	f3 a4		 rep movsb

; 231  : 		free(m_pList);

  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00063	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@alloc:

; 232  : 	}
; 233  : 	m_pList = pList;

  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pList$[rsp]
  00077	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 234  : 	return nMaxCount;

  0007b	8b 44 24 58	 mov	 eax, DWORD PTR nMaxCount$[rsp]
$LN1@alloc:

; 235  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	5f		 pop	 rdi
  00084	5e		 pop	 rsi
  00085	c3		 ret	 0
?__alloc@CStringList@@AEAAHH@Z ENDP			; CStringList::__alloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?del@CStringList@@QEAA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
?del@CStringList@@QEAA_NH@Z PROC			; CStringList::del, COMDAT

; 286  : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 287  : 	if (!ISINCLUDE(i, m_nListCnt)) {

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	8b 10		 mov	 edx, DWORD PTR [rax]
  00014	8b 4c 24 38	 mov	 ecx, DWORD PTR i$[rsp]
  00018	e8 00 00 00 00	 call	 ?ISINCLUDE@@YA_NHH@Z	; ISINCLUDE
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	75 04		 jne	 SHORT $LN2@del

; 288  : 		//gs_cLogger.DebugLog(LEVEL_ERROR, "i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 289  : 		return false;

  00024	32 c0		 xor	 al, al
  00026	eb 10		 jmp	 SHORT $LN1@del
$LN2@del:

; 290  : 	}
; 291  : 	_DEL(i);

  00028	8b 54 24 38	 mov	 edx, DWORD PTR i$[rsp]
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AEAAXH@Z ; CStringList::_DEL

; 292  : 	return true;

  00036	b0 01		 mov	 al, 1
$LN1@del:

; 293  : }

  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
?del@CStringList@@QEAA_NH@Z ENDP			; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?del@CStringList@@QEAA_NPEAVCmString@@@Z
_TEXT	SEGMENT
i$ = 32
this$ = 64
p$ = 72
?del@CStringList@@QEAA_NPEAVCmString@@@Z PROC		; CStringList::del, COMDAT

; 273  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 274  : 	int i;
; 275  : 	for (i = 0; i < m_nListCnt; i++) {

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00016	eb 0a		 jmp	 SHORT $LN4@del
$LN2@del:
  00018	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001c	ff c0		 inc	 eax
  0001e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@del:
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00027	8b 00		 mov	 eax, DWORD PTR [rax]
  00029	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0002d	7d 2d		 jge	 SHORT $LN3@del

; 276  : 		if (m_pList[i] == p) {

  0002f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00039	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0003d	48 8b 54 24 48	 mov	 rdx, QWORD PTR p$[rsp]
  00042	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  00046	75 12		 jne	 SHORT $LN5@del

; 277  : 			_DEL(i);

  00048	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00051	e8 00 00 00 00	 call	 ?_DEL@CStringList@@AEAAXH@Z ; CStringList::_DEL

; 278  : 			return true;

  00056	b0 01		 mov	 al, 1
  00058	eb 04		 jmp	 SHORT $LN1@del
$LN5@del:

; 279  : 		}
; 280  : 	}

  0005a	eb bc		 jmp	 SHORT $LN2@del
$LN3@del:

; 281  : 	//gs_cLogger.DebugLog(LEVEL_ERROR, " del FAIL! i[%d] m_nListCnt[%d]", i, m_nListCnt);
; 282  : 	return false;

  0005c	32 c0		 xor	 al, al
$LN1@del:

; 283  : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
?del@CStringList@@QEAA_NPEAVCmString@@@Z ENDP		; CStringList::del
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??1CStringList@@QEAA@XZ
_TEXT	SEGMENT
i$ = 32
$T1 = 40
$T2 = 48
tv82 = 56
this$ = 80
??1CStringList@@QEAA@XZ PROC				; CStringList::~CStringList, COMDAT

; 209  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 210  : 	if (!m_pList) return;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00013	75 05		 jne	 SHORT $LN5@CStringLis
  00015	e9 c0 00 00 00	 jmp	 $LN1@CStringLis
$LN5@CStringLis:

; 211  : 	int i;
; 212  : 	for (i = 0; i < m_nListCnt; i++) {

  0001a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00022	eb 0a		 jmp	 SHORT $LN4@CStringLis
$LN2@CStringLis:
  00024	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00028	ff c0		 inc	 eax
  0002a	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@CStringLis:
  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00033	8b 00		 mov	 eax, DWORD PTR [rax]
  00035	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00039	7d 78		 jge	 SHORT $LN3@CStringLis

; 213  : 		if (m_pList[i]) {

  0003b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00049	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0004e	74 5e		 je	 SHORT $LN6@CStringLis

; 214  : 			delete m_pList[i];

  00050	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005e	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00062	48 89 44 24 30	 mov	 QWORD PTR $T2[rsp], rax
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR $T2[rsp]
  0006c	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00071	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00077	74 16		 je	 SHORT $LN8@CStringLis
  00079	ba 01 00 00 00	 mov	 edx, 1
  0007e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp]
  00083	e8 00 00 00 00	 call	 ??_GCmString@@QEAAPEAXI@Z
  00088	48 89 44 24 38	 mov	 QWORD PTR tv82[rsp], rax
  0008d	eb 09		 jmp	 SHORT $LN9@CStringLis
$LN8@CStringLis:
  0008f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv82[rsp], 0
$LN9@CStringLis:

; 215  : 			m_pList[i] = NULL;

  00098	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0009d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000a2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a6	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN6@CStringLis:

; 216  : 		}
; 217  : 	}

  000ae	e9 71 ff ff ff	 jmp	 $LN2@CStringLis
$LN3@CStringLis:

; 218  : 	free(m_pList);

  000b3	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000b8	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 219  : 	m_pList = NULL;

  000c2	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000c7	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  : 	m_nListCnt = 0;

  000cf	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000d4	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@CStringLis:

; 221  : }

  000da	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000de	c3		 ret	 0
??1CStringList@@QEAA@XZ ENDP				; CStringList::~CStringList
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CStringList@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CStringList@@QEAA@XZ PROC				; CStringList::CStringList, COMDAT

; 204  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 205  : 	m_nListCnt = 0; m_nLast = 0; m_nDelIdx = 0; m_pList = NULL; m_nUseCnt = 0;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00010	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00015	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00021	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0
  00028	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002d	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0003a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 206  : }

  00041	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00046	c3		 ret	 0
??0CStringList@@QEAA@XZ ENDP				; CStringList::CStringList
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GCmString@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GCmString@@QEAAPEAXI@Z PROC				; CmString::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1CmString@@QEAA@XZ	; CmString::~CmString
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_GCmString@@QEAAPEAXI@Z ENDP				; CmString::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?__autoclassinit2@CmString@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 16
classSize$ = 24
?__autoclassinit2@CmString@@QEAAX_K@Z PROC		; CmString::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 8b 7c 24 10	 mov	 rdi, QWORD PTR this$[rsp]
  00010	33 c0		 xor	 eax, eax
  00012	48 8b 4c 24 18	 mov	 rcx, QWORD PTR classSize$[rsp]
  00017	f3 aa		 rep stosb
  00019	5f		 pop	 rdi
  0001a	c3		 ret	 0
?__autoclassinit2@CmString@@QEAAX_K@Z ENDP		; CmString::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?compare@CmString@@QEAAHHHPEBD@Z
_TEXT	SEGMENT
i$ = 0
idx$ = 4
nLen$ = 8
tv95 = 16
tv94 = 24
this$ = 48
index$ = 56
len$ = 64
str$ = 72
?compare@CmString@@QEAAHHHPEBD@Z PROC			; CmString::compare, COMDAT

; 189  : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 190  : 	int i, idx=index, nLen = (int)_tcslen(str);

  00017	8b 44 24 38	 mov	 eax, DWORD PTR index$[rsp]
  0001b	89 44 24 04	 mov	 DWORD PTR idx$[rsp], eax
  0001f	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00024	48 89 44 24 18	 mov	 QWORD PTR tv94[rsp], rax
  00029	48 c7 44 24 10
	ff ff ff ff	 mov	 QWORD PTR tv95[rsp], -1
$LL10@compare:
  00032	48 ff 44 24 10	 inc	 QWORD PTR tv95[rsp]
  00037	48 8b 44 24 18	 mov	 rax, QWORD PTR tv94[rsp]
  0003c	48 8b 4c 24 10	 mov	 rcx, QWORD PTR tv95[rsp]
  00041	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00045	75 eb		 jne	 SHORT $LL10@compare
  00047	48 8b 44 24 10	 mov	 rax, QWORD PTR tv95[rsp]
  0004c	89 44 24 08	 mov	 DWORD PTR nLen$[rsp], eax

; 191  : 	if (nLen < len)  len = nLen;

  00050	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00054	39 44 24 08	 cmp	 DWORD PTR nLen$[rsp], eax
  00058	7d 08		 jge	 SHORT $LN5@compare
  0005a	8b 44 24 08	 mov	 eax, DWORD PTR nLen$[rsp]
  0005e	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
$LN5@compare:

; 192  : 
; 193  : 	for (i = 0; i < len; i++) {

  00062	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00069	eb 08		 jmp	 SHORT $LN4@compare
$LN2@compare:
  0006b	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0006e	ff c0		 inc	 eax
  00070	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@compare:
  00073	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00077	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  0007a	7d 60		 jge	 SHORT $LN3@compare

; 194  : 		if (m_pValue[idx] != str[i]) {

  0007c	48 63 44 24 04	 movsxd	 rax, DWORD PTR idx$[rsp]
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00086	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00089	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0008d	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  00096	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  0009a	3b c1		 cmp	 eax, ecx
  0009c	74 32		 je	 SHORT $LN6@compare

; 195  : 			if (m_pValue[idx] > str[i]) return 1;

  0009e	48 63 44 24 04	 movsxd	 rax, DWORD PTR idx$[rsp]
  000a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  000a8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ab	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000af	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  000b3	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  000b8	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  000bc	3b c1		 cmp	 eax, ecx
  000be	7e 09		 jle	 SHORT $LN7@compare
  000c0	b8 01 00 00 00	 mov	 eax, 1
  000c5	eb 17		 jmp	 SHORT $LN1@compare
  000c7	eb 07		 jmp	 SHORT $LN8@compare
$LN7@compare:

; 196  : 			else return -1;

  000c9	b8 ff ff ff ff	 mov	 eax, -1
  000ce	eb 0e		 jmp	 SHORT $LN1@compare
$LN8@compare:
$LN6@compare:

; 197  : 		}
; 198  : 		idx++;

  000d0	8b 44 24 04	 mov	 eax, DWORD PTR idx$[rsp]
  000d4	ff c0		 inc	 eax
  000d6	89 44 24 04	 mov	 DWORD PTR idx$[rsp], eax

; 199  : 	}

  000da	eb 8f		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 200  : 	return 0;

  000dc	33 c0		 xor	 eax, eax
$LN1@compare:

; 201  : }

  000de	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e2	c3		 ret	 0
?compare@CmString@@QEAAHHHPEBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?compare@CmString@@QEAAHPEBD@Z
_TEXT	SEGMENT
i$ = 0
tv131 = 8
tv92 = 16
nLen$ = 24
orignLen$ = 32
tv130 = 40
tv91 = 48
this$ = 80
str$ = 88
?compare@CmString@@QEAAHPEBD@Z PROC			; CmString::compare, COMDAT

; 175  : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 176  : 	size_t nLen = _tcslen(str),i, orignLen = _tcslen(m_pValue);

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR tv130[rsp], rax
  00018	48 c7 44 24 08
	ff ff ff ff	 mov	 QWORD PTR tv131[rsp], -1
$LL11@compare:
  00021	48 ff 44 24 08	 inc	 QWORD PTR tv131[rsp]
  00026	48 8b 44 24 28	 mov	 rax, QWORD PTR tv130[rsp]
  0002b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv131[rsp]
  00030	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00034	75 eb		 jne	 SHORT $LL11@compare
  00036	48 8b 44 24 08	 mov	 rax, QWORD PTR tv131[rsp]
  0003b	48 89 44 24 18	 mov	 QWORD PTR nLen$[rsp], rax
  00040	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
  0004d	48 c7 44 24 10
	ff ff ff ff	 mov	 QWORD PTR tv92[rsp], -1
$LL10@compare:
  00056	48 ff 44 24 10	 inc	 QWORD PTR tv92[rsp]
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR tv91[rsp]
  00060	48 8b 4c 24 10	 mov	 rcx, QWORD PTR tv92[rsp]
  00065	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00069	75 eb		 jne	 SHORT $LL10@compare
  0006b	48 8b 44 24 10	 mov	 rax, QWORD PTR tv92[rsp]
  00070	48 89 44 24 20	 mov	 QWORD PTR orignLen$[rsp], rax

; 177  : 	if (nLen > orignLen)  nLen = orignLen;

  00075	48 8b 44 24 20	 mov	 rax, QWORD PTR orignLen$[rsp]
  0007a	48 39 44 24 18	 cmp	 QWORD PTR nLen$[rsp], rax
  0007f	76 0a		 jbe	 SHORT $LN5@compare
  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR orignLen$[rsp]
  00086	48 89 44 24 18	 mov	 QWORD PTR nLen$[rsp], rax
$LN5@compare:

; 178  : 
; 179  : 	for (i = 0; i < nLen; i++) {

  0008b	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00093	eb 0b		 jmp	 SHORT $LN4@compare
$LN2@compare:
  00095	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN4@compare:
  000a0	48 8b 44 24 18	 mov	 rax, QWORD PTR nLen$[rsp]
  000a5	48 39 04 24	 cmp	 QWORD PTR i$[rsp], rax
  000a9	73 5e		 jae	 SHORT $LN3@compare

; 180  : 		if (m_pValue[i] != str[i]) {

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b3	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000b7	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  000bb	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000bf	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000c4	48 03 d1	 add	 rdx, rcx
  000c7	48 8b ca	 mov	 rcx, rdx
  000ca	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000cd	3b c1		 cmp	 eax, ecx
  000cf	74 36		 je	 SHORT $LN6@compare

; 181  : 			if (m_pValue[i] > str[i]) return 1;

  000d1	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000d6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d9	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000dd	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  000e1	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000e5	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000ea	48 03 d1	 add	 rdx, rcx
  000ed	48 8b ca	 mov	 rcx, rdx
  000f0	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000f3	3b c1		 cmp	 eax, ecx
  000f5	7e 09		 jle	 SHORT $LN7@compare
  000f7	b8 01 00 00 00	 mov	 eax, 1
  000fc	eb 0d		 jmp	 SHORT $LN1@compare
  000fe	eb 07		 jmp	 SHORT $LN8@compare
$LN7@compare:

; 182  : 			else return -1;

  00100	b8 ff ff ff ff	 mov	 eax, -1
  00105	eb 04		 jmp	 SHORT $LN1@compare
$LN8@compare:
$LN6@compare:

; 183  : 		}
; 184  : 	}

  00107	eb 8c		 jmp	 SHORT $LN2@compare
$LN3@compare:

; 185  : 	return 0;

  00109	33 c0		 xor	 eax, eax
$LN1@compare:

; 186  : }

  0010b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010f	c3		 ret	 0
?compare@CmString@@QEAAHPEBD@Z ENDP			; CmString::compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?find_next@CmString@@QEAAPEADPEBDH@Z
_TEXT	SEGMENT
nIdx$ = 0
tv80 = 4
tv79 = 8
nLen$ = 12
pPos$ = 16
tv89 = 24
tv88 = 32
this$ = 64
str$ = 72
index$ = 80
?find_next@CmString@@QEAAPEADPEBDH@Z PROC		; CmString::find_next, COMDAT

; 132  : {

$LN10:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 133  : 	TCHAR *pPos = m_pValue+index;

  00013	48 63 44 24 50	 movsxd	 rax, DWORD PTR index$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	48 03 01	 add	 rax, QWORD PTR [rcx]
  00020	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 134  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  00025	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nIdx$[rsp], 0
  0002c	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR tv88[rsp], rax
  00036	48 c7 44 24 18
	ff ff ff ff	 mov	 QWORD PTR tv89[rsp], -1
$LL9@find_next:
  0003f	48 ff 44 24 18	 inc	 QWORD PTR tv89[rsp]
  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR tv88[rsp]
  00049	48 8b 4c 24 18	 mov	 rcx, QWORD PTR tv89[rsp]
  0004e	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00052	75 eb		 jne	 SHORT $LL9@find_next
  00054	48 8b 44 24 18	 mov	 rax, QWORD PTR tv89[rsp]
  00059	89 44 24 0c	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@find_next:

; 135  : 	while (*pPos) {

  0005d	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  00062	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00065	85 c0		 test	 eax, eax
  00067	74 74		 je	 SHORT $LN3@find_next
$LN4@find_next:

; 136  : 		while (*pPos == str[nIdx++]) {

  00069	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  0006e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00071	89 44 24 08	 mov	 DWORD PTR tv79[rsp], eax
  00075	48 63 04 24	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00079	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0007e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00082	89 44 24 04	 mov	 DWORD PTR tv80[rsp], eax
  00086	8b 04 24	 mov	 eax, DWORD PTR nIdx$[rsp]
  00089	ff c0		 inc	 eax
  0008b	89 04 24	 mov	 DWORD PTR nIdx$[rsp], eax
  0008e	8b 44 24 04	 mov	 eax, DWORD PTR tv80[rsp]
  00092	39 44 24 08	 cmp	 DWORD PTR tv79[rsp], eax
  00096	75 2f		 jne	 SHORT $LN5@find_next

; 137  : 			pPos++;

  00098	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  0009d	48 ff c0	 inc	 rax
  000a0	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 138  : 			if (nIdx >= nLen) return pPos;

  000a5	8b 44 24 0c	 mov	 eax, DWORD PTR nLen$[rsp]
  000a9	39 04 24	 cmp	 DWORD PTR nIdx$[rsp], eax
  000ac	7c 07		 jl	 SHORT $LN6@find_next
  000ae	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000b3	eb 2a		 jmp	 SHORT $LN1@find_next
$LN6@find_next:

; 139  : 			if (!*pPos) return NULL;

  000b5	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000ba	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bd	85 c0		 test	 eax, eax
  000bf	75 04		 jne	 SHORT $LN7@find_next
  000c1	33 c0		 xor	 eax, eax
  000c3	eb 1a		 jmp	 SHORT $LN1@find_next
$LN7@find_next:

; 140  : 		}

  000c5	eb a2		 jmp	 SHORT $LN4@find_next
$LN5@find_next:

; 141  : 		nIdx = 0;

  000c7	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nIdx$[rsp], 0

; 142  : 		pPos++;

  000ce	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000d3	48 ff c0	 inc	 rax
  000d6	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 143  : 	}

  000db	eb 80		 jmp	 SHORT $LN2@find_next
$LN3@find_next:

; 144  : 
; 145  : 	return NULL;

  000dd	33 c0		 xor	 eax, eax
$LN1@find_next:

; 146  : }

  000df	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e3	c3		 ret	 0
?find_next@CmString@@QEAAPEADPEBDH@Z ENDP		; CmString::find_next
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?find@CmString@@QEAAPEADPEBDH@Z
_TEXT	SEGMENT
nIdx$ = 0
nLen$ = 4
tv80 = 8
tv79 = 12
pPos$ = 16
tv91 = 24
tv90 = 32
this$ = 64
str$ = 72
index$ = 80
?find@CmString@@QEAAPEADPEBDH@Z PROC			; CmString::find, COMDAT

; 149  : {

$LN10:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 150  : 	TCHAR *pPos = m_pValue + index;

  00013	48 63 44 24 50	 movsxd	 rax, DWORD PTR index$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	48 03 01	 add	 rax, QWORD PTR [rcx]
  00020	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 151  : 	int nIdx = 0, nLen = (int)_tcslen(str);

  00025	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nIdx$[rsp], 0
  0002c	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR tv90[rsp], rax
  00036	48 c7 44 24 18
	ff ff ff ff	 mov	 QWORD PTR tv91[rsp], -1
$LL9@find:
  0003f	48 ff 44 24 18	 inc	 QWORD PTR tv91[rsp]
  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR tv90[rsp]
  00049	48 8b 4c 24 18	 mov	 rcx, QWORD PTR tv91[rsp]
  0004e	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00052	75 eb		 jne	 SHORT $LL9@find
  00054	48 8b 44 24 18	 mov	 rax, QWORD PTR tv91[rsp]
  00059	89 44 24 04	 mov	 DWORD PTR nLen$[rsp], eax
$LN2@find:

; 152  : 	while (*pPos) {

  0005d	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  00062	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00065	85 c0		 test	 eax, eax
  00067	0f 84 82 00 00
	00		 je	 $LN3@find
$LN4@find:

; 153  : 		while (*pPos == str[nIdx++]) {

  0006d	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  00072	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00075	89 44 24 0c	 mov	 DWORD PTR tv79[rsp], eax
  00079	48 63 04 24	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  0007d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00082	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00086	89 44 24 08	 mov	 DWORD PTR tv80[rsp], eax
  0008a	8b 04 24	 mov	 eax, DWORD PTR nIdx$[rsp]
  0008d	ff c0		 inc	 eax
  0008f	89 04 24	 mov	 DWORD PTR nIdx$[rsp], eax
  00092	8b 44 24 08	 mov	 eax, DWORD PTR tv80[rsp]
  00096	39 44 24 0c	 cmp	 DWORD PTR tv79[rsp], eax
  0009a	75 3a		 jne	 SHORT $LN5@find

; 154  : 			pPos++;

  0009c	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000a1	48 ff c0	 inc	 rax
  000a4	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 155  : 			if (nIdx >= nLen) return pPos-nLen;

  000a9	8b 44 24 04	 mov	 eax, DWORD PTR nLen$[rsp]
  000ad	39 04 24	 cmp	 DWORD PTR nIdx$[rsp], eax
  000b0	7c 12		 jl	 SHORT $LN6@find
  000b2	48 63 44 24 04	 movsxd	 rax, DWORD PTR nLen$[rsp]
  000b7	48 8b 4c 24 10	 mov	 rcx, QWORD PTR pPos$[rsp]
  000bc	48 2b c8	 sub	 rcx, rax
  000bf	48 8b c1	 mov	 rax, rcx
  000c2	eb 2d		 jmp	 SHORT $LN1@find
$LN6@find:

; 156  : 			if (!*pPos) return NULL;

  000c4	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000c9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000cc	85 c0		 test	 eax, eax
  000ce	75 04		 jne	 SHORT $LN7@find
  000d0	33 c0		 xor	 eax, eax
  000d2	eb 1d		 jmp	 SHORT $LN1@find
$LN7@find:

; 157  : 		}

  000d4	eb 97		 jmp	 SHORT $LN4@find
$LN5@find:

; 158  : 		nIdx = 0;

  000d6	c7 04 24 00 00
	00 00		 mov	 DWORD PTR nIdx$[rsp], 0

; 159  : 		pPos++;

  000dd	48 8b 44 24 10	 mov	 rax, QWORD PTR pPos$[rsp]
  000e2	48 ff c0	 inc	 rax
  000e5	48 89 44 24 10	 mov	 QWORD PTR pPos$[rsp], rax

; 160  : 	}

  000ea	e9 6e ff ff ff	 jmp	 $LN2@find
$LN3@find:

; 161  : 
; 162  : 	return NULL;

  000ef	33 c0		 xor	 eax, eax
$LN1@find:

; 163  : }

  000f1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f5	c3		 ret	 0
?find@CmString@@QEAAPEADPEBDH@Z ENDP			; CmString::find
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?reserve@CmString@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
?reserve@CmString@@QEAAXH@Z PROC			; CmString::reserve, COMDAT

; 118  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 119  : 	if (getSizeByIndex(m_nSftIdx) > n) {

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00015	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0001a	3b 44 24 38	 cmp	 eax, DWORD PTR n$[rsp]
  0001e	7e 04		 jle	 SHORT $LN2@reserve

; 120  : 		return;

  00020	eb 61		 jmp	 SHORT $LN1@reserve

; 121  : 	}
; 122  : 	else {

  00022	eb 5f		 jmp	 SHORT $LN3@reserve
$LN2@reserve:

; 123  : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0003c	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 124  : 		m_nSftIdx = getIndex(n);

  00041	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  00045	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 125  : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00057	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00061	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 126  : 		m_pValue[0] = 0;

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	48 6b c0 00	 imul	 rax, rax, 0
  00077	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007f	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
$LN3@reserve:
$LN1@reserve:

; 127  : 	}
; 128  : }

  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	c3		 ret	 0
?reserve@CmString@@QEAAXH@Z ENDP			; CmString::reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?replace@CmString@@QEAAAEAV1@HHPEBD@Z
_TEXT	SEGMENT
tv136 = 32
newIdx$ = 36
tv160 = 40
tv153 = 48
tv134 = 56
newBuf$ = 64
nLen$ = 72
nOLen$ = 76
oSize$ = 80
size$ = 84
tv129 = 88
tv159 = 96
tv152 = 104
tv135 = 112
this$ = 144
index$ = 152
len$ = 160
str$ = 168
?replace@CmString@@QEAAAEAV1@HHPEBD@Z PROC		; CmString::replace, COMDAT

; 99   : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 100  : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  0001a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00022	48 89 44 24 60	 mov	 QWORD PTR tv159[rsp], rax
  00027	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv160[rsp], -1
$LL6@replace:
  00030	48 ff 44 24 28	 inc	 QWORD PTR tv160[rsp]
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR tv159[rsp]
  0003a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv160[rsp]
  0003f	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00043	75 eb		 jne	 SHORT $LL6@replace
  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR tv160[rsp]
  0004a	89 44 24 48	 mov	 DWORD PTR nLen$[rsp], eax
  0004e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 89 44 24 68	 mov	 QWORD PTR tv152[rsp], rax
  0005e	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR tv153[rsp], -1
$LL5@replace:
  00067	48 ff 44 24 30	 inc	 QWORD PTR tv153[rsp]
  0006c	48 8b 44 24 68	 mov	 rax, QWORD PTR tv152[rsp]
  00071	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv153[rsp]
  00076	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0007a	75 eb		 jne	 SHORT $LL5@replace
  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR tv153[rsp]
  00081	89 44 24 4c	 mov	 DWORD PTR nOLen$[rsp], eax

; 101  : 	int size = nLen * g_nChSize, oSize = nOLen * g_nChSize;

  00085	8b 44 24 48	 mov	 eax, DWORD PTR nLen$[rsp]
  00089	89 44 24 54	 mov	 DWORD PTR size$[rsp], eax
  0008d	8b 44 24 4c	 mov	 eax, DWORD PTR nOLen$[rsp]
  00091	89 44 24 50	 mov	 DWORD PTR oSize$[rsp], eax

; 102  : 
; 103  : 	int newIdx = getIndex(size + oSize - len + 1);

  00095	8b 44 24 50	 mov	 eax, DWORD PTR oSize$[rsp]
  00099	8b 4c 24 54	 mov	 ecx, DWORD PTR size$[rsp]
  0009d	03 c8		 add	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	2b 84 24 a0 00
	00 00		 sub	 eax, DWORD PTR len$[rsp]
  000a8	ff c0		 inc	 eax
  000aa	8b c8		 mov	 ecx, eax
  000ac	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  000b1	89 44 24 24	 mov	 DWORD PTR newIdx$[rsp], eax

; 104  : 	TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  000b5	8b 54 24 24	 mov	 edx, DWORD PTR newIdx$[rsp]
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  000c0	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  000c5	48 89 44 24 40	 mov	 QWORD PTR newBuf$[rsp], rax

; 105  : 
; 106  : 	if (index) _tcsncpy(newBuf, m_pValue, index);

  000ca	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR index$[rsp], 0
  000d2	74 20		 je	 SHORT $LN2@replace
  000d4	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR index$[rsp]
  000dc	4c 8b c0	 mov	 r8, rax
  000df	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e7	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newBuf$[rsp]
  000ef	e8 00 00 00 00	 call	 _tcsncpy
$LN2@replace:

; 107  : 	_tcsncpy(newBuf + index, str, len);

  000f4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  000fc	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR index$[rsp]
  00104	48 8b 54 24 40	 mov	 rdx, QWORD PTR newBuf$[rsp]
  00109	48 03 d1	 add	 rdx, rcx
  0010c	48 8b ca	 mov	 rcx, rdx
  0010f	4c 8b c0	 mov	 r8, rax
  00112	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR str$[rsp]
  0011a	e8 00 00 00 00	 call	 _tcsncpy

; 108  : 	_tcscpy(newBuf + index + len, m_pValue + index + len);

  0011f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR index$[rsp]
  00127	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00132	48 03 c8	 add	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  00140	48 03 c1	 add	 rax, rcx
  00143	48 89 44 24 58	 mov	 QWORD PTR tv129[rsp], rax
  00148	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR index$[rsp]
  00150	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newBuf$[rsp]
  00155	48 03 c8	 add	 rcx, rax
  00158	48 8b c1	 mov	 rax, rcx
  0015b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  00163	48 03 c1	 add	 rax, rcx
  00166	48 89 44 24 38	 mov	 QWORD PTR tv134[rsp], rax
  0016b	48 8b 44 24 38	 mov	 rax, QWORD PTR tv134[rsp]
  00170	48 89 44 24 70	 mov	 QWORD PTR tv135[rsp], rax
$LN4@replace:
  00175	48 8b 44 24 58	 mov	 rax, QWORD PTR tv129[rsp]
  0017a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0017d	88 44 24 20	 mov	 BYTE PTR tv136[rsp], al
  00181	48 8b 44 24 38	 mov	 rax, QWORD PTR tv134[rsp]
  00186	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv136[rsp]
  0018b	88 08		 mov	 BYTE PTR [rax], cl
  0018d	48 8b 44 24 58	 mov	 rax, QWORD PTR tv129[rsp]
  00192	48 ff c0	 inc	 rax
  00195	48 89 44 24 58	 mov	 QWORD PTR tv129[rsp], rax
  0019a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv134[rsp]
  0019f	48 ff c0	 inc	 rax
  001a2	48 89 44 24 38	 mov	 QWORD PTR tv134[rsp], rax
  001a7	80 7c 24 20 00	 cmp	 BYTE PTR tv136[rsp], 0
  001ac	75 c7		 jne	 SHORT $LN4@replace

; 109  : 
; 110  : 	gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  001ae	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001b6	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  001ba	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001c2	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  001cc	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 111  : 	m_pValue = newBuf;

  001d1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newBuf$[rsp]
  001de	48 89 08	 mov	 QWORD PTR [rax], rcx

; 112  : 	m_nSftIdx = newIdx;

  001e1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001e9	8b 4c 24 24	 mov	 ecx, DWORD PTR newIdx$[rsp]
  001ed	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 113  : 	return *this;

  001f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]

; 114  : }

  001f8	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001ff	c3		 ret	 0
?replace@CmString@@QEAAAEAV1@HHPEBD@Z ENDP		; CmString::replace
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ?append@CmString@@QEAAAEAV1@PEBD@Z
_TEXT	SEGMENT
tv84 = 32
tv132 = 33
tv142 = 34
nOLen$ = 36
size$ = 40
oSize$ = 44
newIdx$1 = 48
tv168 = 56
tv161 = 64
tv82 = 72
tv130 = 80
tv140 = 88
nLen$ = 96
tv78 = 104
tv129 = 112
tv137 = 120
newBuf$2 = 128
tv167 = 136
tv160 = 144
tv83 = 152
tv131 = 160
tv141 = 168
this$ = 192
str$ = 200
?append@CmString@@QEAAAEAV1@PEBD@Z PROC			; CmString::append, COMDAT

; 75   : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 76   : 	int nLen = (int)_tcslen(str), nOLen = (int)_tcslen(m_pValue);

  00011	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00019	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv167[rsp], rax
  00021	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR tv168[rsp], -1
$LL9@append:
  0002a	48 ff 44 24 38	 inc	 QWORD PTR tv168[rsp]
  0002f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv167[rsp]
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv168[rsp]
  0003c	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00040	75 e8		 jne	 SHORT $LL9@append
  00042	48 8b 44 24 38	 mov	 rax, QWORD PTR tv168[rsp]
  00047	89 44 24 60	 mov	 DWORD PTR nLen$[rsp], eax
  0004b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv160[rsp], rax
  0005e	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR tv161[rsp], -1
$LL8@append:
  00067	48 ff 44 24 40	 inc	 QWORD PTR tv161[rsp]
  0006c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv160[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv161[rsp]
  00079	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0007d	75 e8		 jne	 SHORT $LL8@append
  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv161[rsp]
  00084	89 44 24 24	 mov	 DWORD PTR nOLen$[rsp], eax

; 77   : 	int size = nLen * g_nChSize , oSize = nOLen * g_nChSize;

  00088	8b 44 24 60	 mov	 eax, DWORD PTR nLen$[rsp]
  0008c	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax
  00090	8b 44 24 24	 mov	 eax, DWORD PTR nOLen$[rsp]
  00094	89 44 24 2c	 mov	 DWORD PTR oSize$[rsp], eax

; 78   : 
; 79   : 	if (getSizeByIndex(m_nSftIdx) > size + oSize + 1) {

  00098	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a0	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000a3	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  000a8	8b 4c 24 28	 mov	 ecx, DWORD PTR size$[rsp]
  000ac	8b 54 24 2c	 mov	 edx, DWORD PTR oSize$[rsp]
  000b0	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  000b4	3b c1		 cmp	 eax, ecx
  000b6	7e 6d		 jle	 SHORT $LN2@append

; 80   : 		_tcscpy(m_pValue + nOLen, str);

  000b8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  000c0	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  000c5	48 63 44 24 24	 movsxd	 rax, DWORD PTR nOLen$[rsp]
  000ca	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d2	48 03 01	 add	 rax, QWORD PTR [rcx]
  000d5	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR tv82[rsp]
  000df	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv83[rsp], rax
$LN5@append:
  000e7	48 8b 44 24 68	 mov	 rax, QWORD PTR tv78[rsp]
  000ec	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000ef	88 44 24 20	 mov	 BYTE PTR tv84[rsp], al
  000f3	48 8b 44 24 48	 mov	 rax, QWORD PTR tv82[rsp]
  000f8	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv84[rsp]
  000fd	88 08		 mov	 BYTE PTR [rax], cl
  000ff	48 8b 44 24 68	 mov	 rax, QWORD PTR tv78[rsp]
  00104	48 ff c0	 inc	 rax
  00107	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  0010c	48 8b 44 24 48	 mov	 rax, QWORD PTR tv82[rsp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
  00119	80 7c 24 20 00	 cmp	 BYTE PTR tv84[rsp], 0
  0011e	75 c7		 jne	 SHORT $LN5@append

; 81   : 	}
; 82   : 	else {

  00120	e9 42 01 00 00	 jmp	 $LN3@append
$LN2@append:

; 83   : 		int newIdx = getIndex(size + oSize + 1);

  00125	8b 44 24 28	 mov	 eax, DWORD PTR size$[rsp]
  00129	8b 4c 24 2c	 mov	 ecx, DWORD PTR oSize$[rsp]
  0012d	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00131	8b c8		 mov	 ecx, eax
  00133	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00138	89 44 24 30	 mov	 DWORD PTR newIdx$1[rsp], eax

; 84   : 		TCHAR *newBuf = gs_pMMgr->newBufByIndex(newIdx);

  0013c	8b 54 24 30	 mov	 edx, DWORD PTR newIdx$1[rsp]
  00140	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00147	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  0014c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR newBuf$2[rsp], rax

; 85   : 		_tcscpy(newBuf, m_pValue);

  00154	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0015c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015f	48 89 44 24 70	 mov	 QWORD PTR tv129[rsp], rax
  00164	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newBuf$2[rsp]
  0016c	48 89 44 24 50	 mov	 QWORD PTR tv130[rsp], rax
  00171	48 8b 44 24 50	 mov	 rax, QWORD PTR tv130[rsp]
  00176	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
$LN6@append:
  0017e	48 8b 44 24 70	 mov	 rax, QWORD PTR tv129[rsp]
  00183	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00186	88 44 24 21	 mov	 BYTE PTR tv132[rsp], al
  0018a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv130[rsp]
  0018f	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv132[rsp]
  00194	88 08		 mov	 BYTE PTR [rax], cl
  00196	48 8b 44 24 70	 mov	 rax, QWORD PTR tv129[rsp]
  0019b	48 ff c0	 inc	 rax
  0019e	48 89 44 24 70	 mov	 QWORD PTR tv129[rsp], rax
  001a3	48 8b 44 24 50	 mov	 rax, QWORD PTR tv130[rsp]
  001a8	48 ff c0	 inc	 rax
  001ab	48 89 44 24 50	 mov	 QWORD PTR tv130[rsp], rax
  001b0	80 7c 24 21 00	 cmp	 BYTE PTR tv132[rsp], 0
  001b5	75 c7		 jne	 SHORT $LN6@append

; 86   : 		_tcscpy(newBuf + nOLen, str);

  001b7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  001bf	48 89 44 24 78	 mov	 QWORD PTR tv137[rsp], rax
  001c4	48 63 44 24 24	 movsxd	 rax, DWORD PTR nOLen$[rsp]
  001c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newBuf$2[rsp]
  001d1	48 03 c8	 add	 rcx, rax
  001d4	48 8b c1	 mov	 rax, rcx
  001d7	48 89 44 24 58	 mov	 QWORD PTR tv140[rsp], rax
  001dc	48 8b 44 24 58	 mov	 rax, QWORD PTR tv140[rsp]
  001e1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
$LN7@append:
  001e9	48 8b 44 24 78	 mov	 rax, QWORD PTR tv137[rsp]
  001ee	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001f1	88 44 24 22	 mov	 BYTE PTR tv142[rsp], al
  001f5	48 8b 44 24 58	 mov	 rax, QWORD PTR tv140[rsp]
  001fa	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR tv142[rsp]
  001ff	88 08		 mov	 BYTE PTR [rax], cl
  00201	48 8b 44 24 78	 mov	 rax, QWORD PTR tv137[rsp]
  00206	48 ff c0	 inc	 rax
  00209	48 89 44 24 78	 mov	 QWORD PTR tv137[rsp], rax
  0020e	48 8b 44 24 58	 mov	 rax, QWORD PTR tv140[rsp]
  00213	48 ff c0	 inc	 rax
  00216	48 89 44 24 58	 mov	 QWORD PTR tv140[rsp], rax
  0021b	80 7c 24 22 00	 cmp	 BYTE PTR tv142[rsp], 0
  00220	75 c7		 jne	 SHORT $LN7@append

; 87   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  00222	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0022a	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  0022e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00236	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00239	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00240	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 88   : 		m_pValue = newBuf;

  00245	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0024d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newBuf$2[rsp]
  00255	48 89 08	 mov	 QWORD PTR [rax], rcx

; 89   : 		m_nSftIdx = newIdx;

  00258	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00260	8b 4c 24 30	 mov	 ecx, DWORD PTR newIdx$1[rsp]
  00264	89 48 08	 mov	 DWORD PTR [rax+8], ecx
$LN3@append:

; 90   : 
; 91   : 	}
; 92   : 
; 93   : 	return *this;

  00267	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]

; 94   : }

  0026f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00276	c3		 ret	 0
?append@CmString@@QEAAAEAV1@PEBD@Z ENDP			; CmString::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??4CmString@@QEAAAEAV0@PEBD@Z
_TEXT	SEGMENT
tv79 = 32
tv133 = 33
tv150 = 34
size$ = 36
tv164 = 40
tv77 = 48
tv131 = 56
tv148 = 64
tv75 = 72
tv129 = 80
tv146 = 88
tv163 = 96
tv78 = 104
tv132 = 112
tv149 = 120
this$ = 144
str$ = 152
??4CmString@@QEAAAEAV0@PEBD@Z PROC			; CmString::operator=, COMDAT

; 52   : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 53   : 	int size = STRING_SIZE(str);

  00011	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00019	48 89 44 24 60	 mov	 QWORD PTR tv163[rsp], rax
  0001e	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv164[rsp], -1
$LL10@operator:
  00027	48 ff 44 24 28	 inc	 QWORD PTR tv164[rsp]
  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR tv163[rsp]
  00031	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv164[rsp]
  00036	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  0003a	75 eb		 jne	 SHORT $LL10@operator
  0003c	48 8b 44 24 28	 mov	 rax, QWORD PTR tv164[rsp]
  00041	48 ff c0	 inc	 rax
  00044	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax

; 54   : 
; 55   : 	if (m_nSftIdx) {

  00048	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00050	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00054	0f 84 39 01 00
	00		 je	 $LN2@operator

; 56   : 		if (getSizeByIndex(m_nSftIdx) > size) {

  0005a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00065	e8 00 00 00 00	 call	 ?getSizeByIndex@@YAHH@Z	; getSizeByIndex
  0006a	3b 44 24 24	 cmp	 eax, DWORD PTR size$[rsp]
  0006e	7e 65		 jle	 SHORT $LN4@operator

; 57   : 			_tcscpy(m_pValue, str);

  00070	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00078	48 89 44 24 48	 mov	 QWORD PTR tv75[rsp], rax
  0007d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00085	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00088	48 89 44 24 30	 mov	 QWORD PTR tv77[rsp], rax
  0008d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv77[rsp]
  00092	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
$LN7@operator:
  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR tv75[rsp]
  0009c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009f	88 44 24 20	 mov	 BYTE PTR tv79[rsp], al
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR tv77[rsp]
  000a8	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv79[rsp]
  000ad	88 08		 mov	 BYTE PTR [rax], cl
  000af	48 8b 44 24 48	 mov	 rax, QWORD PTR tv75[rsp]
  000b4	48 ff c0	 inc	 rax
  000b7	48 89 44 24 48	 mov	 QWORD PTR tv75[rsp], rax
  000bc	48 8b 44 24 30	 mov	 rax, QWORD PTR tv77[rsp]
  000c1	48 ff c0	 inc	 rax
  000c4	48 89 44 24 30	 mov	 QWORD PTR tv77[rsp], rax
  000c9	80 7c 24 20 00	 cmp	 BYTE PTR tv79[rsp], 0
  000ce	75 c7		 jne	 SHORT $LN7@operator

; 58   : 		}
; 59   : 		else {

  000d0	e9 b9 00 00 00	 jmp	 $LN5@operator
$LN4@operator:

; 60   : 			gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  000d5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000dd	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  000e1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  000f3	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex

; 61   : 			m_nSftIdx = getIndex(size);

  000f8	8b 4c 24 24	 mov	 ecx, DWORD PTR size$[rsp]
  000fc	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00101	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00109	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 62   : 			m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0010c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00114	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00117	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0011e	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00123	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   : 			_tcscpy(m_pValue, str);

  0012e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00136	48 89 44 24 50	 mov	 QWORD PTR tv129[rsp], rax
  0013b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00143	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00146	48 89 44 24 38	 mov	 QWORD PTR tv131[rsp], rax
  0014b	48 8b 44 24 38	 mov	 rax, QWORD PTR tv131[rsp]
  00150	48 89 44 24 70	 mov	 QWORD PTR tv132[rsp], rax
$LN8@operator:
  00155	48 8b 44 24 50	 mov	 rax, QWORD PTR tv129[rsp]
  0015a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0015d	88 44 24 21	 mov	 BYTE PTR tv133[rsp], al
  00161	48 8b 44 24 38	 mov	 rax, QWORD PTR tv131[rsp]
  00166	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv133[rsp]
  0016b	88 08		 mov	 BYTE PTR [rax], cl
  0016d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv129[rsp]
  00172	48 ff c0	 inc	 rax
  00175	48 89 44 24 50	 mov	 QWORD PTR tv129[rsp], rax
  0017a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv131[rsp]
  0017f	48 ff c0	 inc	 rax
  00182	48 89 44 24 38	 mov	 QWORD PTR tv131[rsp], rax
  00187	80 7c 24 21 00	 cmp	 BYTE PTR tv133[rsp], 0
  0018c	75 c7		 jne	 SHORT $LN8@operator
$LN5@operator:

; 64   : 		}
; 65   : 	}
; 66   : 	else {

  0018e	e9 96 00 00 00	 jmp	 $LN3@operator
$LN2@operator:

; 67   : 		m_nSftIdx = getIndex(size);

  00193	8b 4c 24 24	 mov	 ecx, DWORD PTR size$[rsp]
  00197	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0019c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001a4	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 68   : 		m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  001a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001af	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  001b9	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  001be	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001c6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 69   : 		_tcscpy(m_pValue, str);

  001c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  001d1	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
  001d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e1	48 89 44 24 40	 mov	 QWORD PTR tv148[rsp], rax
  001e6	48 8b 44 24 40	 mov	 rax, QWORD PTR tv148[rsp]
  001eb	48 89 44 24 78	 mov	 QWORD PTR tv149[rsp], rax
$LN9@operator:
  001f0	48 8b 44 24 58	 mov	 rax, QWORD PTR tv146[rsp]
  001f5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001f8	88 44 24 22	 mov	 BYTE PTR tv150[rsp], al
  001fc	48 8b 44 24 40	 mov	 rax, QWORD PTR tv148[rsp]
  00201	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR tv150[rsp]
  00206	88 08		 mov	 BYTE PTR [rax], cl
  00208	48 8b 44 24 58	 mov	 rax, QWORD PTR tv146[rsp]
  0020d	48 ff c0	 inc	 rax
  00210	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
  00215	48 8b 44 24 40	 mov	 rax, QWORD PTR tv148[rsp]
  0021a	48 ff c0	 inc	 rax
  0021d	48 89 44 24 40	 mov	 QWORD PTR tv148[rsp], rax
  00222	80 7c 24 22 00	 cmp	 BYTE PTR tv150[rsp], 0
  00227	75 c7		 jne	 SHORT $LN9@operator
$LN3@operator:

; 70   : 	}	
; 71   : 	return *this;

  00229	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]

; 72   : }

  00231	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00238	c3		 ret	 0
??4CmString@@QEAAAEAV0@PEBD@Z ENDP			; CmString::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??8CmString@@QEAA_NPEBD@Z
_TEXT	SEGMENT
i$ = 0
tv90 = 8
tv83 = 16
nLen$ = 24
tv89 = 32
tv82 = 40
orignLen$ = 48
this$ = 80
str$ = 88
??8CmString@@QEAA_NPEBD@Z PROC				; CmString::operator==, COMDAT

; 165  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 166  : 	size_t nLen = _tcslen(str), i, orignLen = _tcslen(m_pValue);

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR tv89[rsp], rax
  00018	48 c7 44 24 08
	ff ff ff ff	 mov	 QWORD PTR tv90[rsp], -1
$LL9@operator:
  00021	48 ff 44 24 08	 inc	 QWORD PTR tv90[rsp]
  00026	48 8b 44 24 20	 mov	 rax, QWORD PTR tv89[rsp]
  0002b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv90[rsp]
  00030	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00034	75 eb		 jne	 SHORT $LL9@operator
  00036	48 8b 44 24 08	 mov	 rax, QWORD PTR tv90[rsp]
  0003b	48 89 44 24 18	 mov	 QWORD PTR nLen$[rsp], rax
  00040	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	48 89 44 24 28	 mov	 QWORD PTR tv82[rsp], rax
  0004d	48 c7 44 24 10
	ff ff ff ff	 mov	 QWORD PTR tv83[rsp], -1
$LL8@operator:
  00056	48 ff 44 24 10	 inc	 QWORD PTR tv83[rsp]
  0005b	48 8b 44 24 28	 mov	 rax, QWORD PTR tv82[rsp]
  00060	48 8b 4c 24 10	 mov	 rcx, QWORD PTR tv83[rsp]
  00065	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00069	75 eb		 jne	 SHORT $LL8@operator
  0006b	48 8b 44 24 10	 mov	 rax, QWORD PTR tv83[rsp]
  00070	48 89 44 24 30	 mov	 QWORD PTR orignLen$[rsp], rax

; 167  : 	if (nLen != orignLen) return false;

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR orignLen$[rsp]
  0007a	48 39 44 24 18	 cmp	 QWORD PTR nLen$[rsp], rax
  0007f	74 04		 je	 SHORT $LN5@operator
  00081	32 c0		 xor	 al, al
  00083	eb 4e		 jmp	 SHORT $LN1@operator
$LN5@operator:

; 168  : 	for (i = 0; i < nLen; i++) {

  00085	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0008d	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0008f	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00093	48 ff c0	 inc	 rax
  00096	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN4@operator:
  0009a	48 8b 44 24 18	 mov	 rax, QWORD PTR nLen$[rsp]
  0009f	48 39 04 24	 cmp	 QWORD PTR i$[rsp], rax
  000a3	73 2c		 jae	 SHORT $LN3@operator

; 169  : 		if (m_pValue[i] != str[i]) return false;

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000b1	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  000b5	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000b9	48 8b 54 24 58	 mov	 rdx, QWORD PTR str$[rsp]
  000be	48 03 d1	 add	 rdx, rcx
  000c1	48 8b ca	 mov	 rcx, rdx
  000c4	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000c7	3b c1		 cmp	 eax, ecx
  000c9	74 04		 je	 SHORT $LN6@operator
  000cb	32 c0		 xor	 al, al
  000cd	eb 04		 jmp	 SHORT $LN1@operator
$LN6@operator:

; 170  : 	}

  000cf	eb be		 jmp	 SHORT $LN2@operator
$LN3@operator:

; 171  : 	return true;

  000d1	b0 01		 mov	 al, 1
$LN1@operator:

; 172  : }

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
??8CmString@@QEAA_NPEBD@Z ENDP				; CmString::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?capacity_idx@CmString@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?capacity_idx@CmString@@QEBAHXZ PROC			; CmString::capacity_idx, COMDAT

; 37   : 	inline int capacity_idx() const {return m_nSftIdx;}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0000d	c3		 ret	 0
?capacity_idx@CmString@@QEBAHXZ ENDP			; CmString::capacity_idx
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\commstring.h
;	COMDAT ?c_str@CmString@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?c_str@CmString@@QEBAPEBDXZ PROC			; CmString::c_str, COMDAT

; 35   : 	inline const TCHAR* c_str() const { return m_pValue; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000d	c3		 ret	 0
?c_str@CmString@@QEBAPEBDXZ ENDP			; CmString::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??1CmString@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1CmString@@QEAA@XZ PROC				; CmString::~CmString, COMDAT

; 41   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 42   : 	if (m_pValue) {

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0001b	74 36		 je	 SHORT $LN2@CmString

; 43   : 		gs_pMMgr->delBufByIndex(m_pValue, m_nSftIdx);

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00035	e8 00 00 00 00	 call	 ?delBufByIndex@CMemManager@@QEAAXPEADH@Z ; CMemManager::delBufByIndex
  0003a	90		 npad	 1

; 44   : 		m_pValue = NULL;

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 45   : 		m_nSftIdx = 0;

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
$LN2@CmString:

; 46   : 	}
; 47   : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
??1CmString@@QEAA@XZ ENDP				; CmString::~CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QEAA@PEBV0@@Z
_TEXT	SEGMENT
tv79 = 32
tv77 = 40
tv75 = 48
tv78 = 56
this$ = 80
str$ = 88
??0CmString@@QEAA@PEBV0@@Z PROC				; CmString::CmString, COMDAT

; 34   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 35   : 	m_nSftIdx = str->capacity_idx();

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QEBAHXZ ; CmString::capacity_idx
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 36   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00025	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0002f	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 37   : 	_tcscpy(m_pValue, str->c_str());

  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00041	e8 00 00 00 00	 call	 ?c_str@CmString@@QEBAPEBDXZ ; CmString::c_str
  00046	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  0005d	48 89 44 24 38	 mov	 QWORD PTR tv78[rsp], rax
$LN3@CmString:
  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  00067	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006a	88 44 24 20	 mov	 BYTE PTR tv79[rsp], al
  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  00073	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv79[rsp]
  00078	88 08		 mov	 BYTE PTR [rax], cl
  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  0007f	48 ff c0	 inc	 rax
  00082	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00094	80 7c 24 20 00	 cmp	 BYTE PTR tv79[rsp], 0
  00099	75 c7		 jne	 SHORT $LN3@CmString

; 38   : }

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
??0CmString@@QEAA@PEBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QEAA@AEBV0@@Z
_TEXT	SEGMENT
tv79 = 32
tv77 = 40
tv75 = 48
tv78 = 56
this$ = 80
str$ = 88
??0CmString@@QEAA@AEBV0@@Z PROC				; CmString::CmString, COMDAT

; 27   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 28   : 	m_nSftIdx = str.capacity_idx();

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity_idx@CmString@@QEBAHXZ ; CmString::capacity_idx
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 29   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00025	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0002f	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 30   : 	_tcscpy(m_pValue, str.c_str());

  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00041	e8 00 00 00 00	 call	 ?c_str@CmString@@QEBAPEBDXZ ; CmString::c_str
  00046	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  0005d	48 89 44 24 38	 mov	 QWORD PTR tv78[rsp], rax
$LN3@CmString:
  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  00067	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006a	88 44 24 20	 mov	 BYTE PTR tv79[rsp], al
  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  00073	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv79[rsp]
  00078	88 08		 mov	 BYTE PTR [rax], cl
  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  0007f	48 ff c0	 inc	 rax
  00082	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR tv77[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00094	80 7c 24 20 00	 cmp	 BYTE PTR tv79[rsp], 0
  00099	75 c7		 jne	 SHORT $LN3@CmString

; 31   : }

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
??0CmString@@QEAA@AEBV0@@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 48
size$ = 56
??0CmString@@QEAA@H@Z PROC				; CmString::CmString, COMDAT

; 20   : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 21   : 	m_nSftIdx = getIndex(size);

  0000d	8b 4c 24 38	 mov	 ecx, DWORD PTR size$[rsp]
  00011	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 22   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  0002d	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	48 89 01	 mov	 QWORD PTR [rcx], rax

; 23   : 	m_pValue[0] = 0;

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	48 6b c0 00	 imul	 rax, rax, 0
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00048	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004b	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 24   : }

  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
??0CmString@@QEAA@H@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QEAA@PEBD@Z
_TEXT	SEGMENT
tv81 = 32
size$ = 36
tv90 = 40
tv79 = 48
tv77 = 56
tv89 = 64
tv80 = 72
this$ = 96
str$ = 104
??0CmString@@QEAA@PEBD@Z PROC				; CmString::CmString, COMDAT

; 12   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 13   : 	int size = STRING_SIZE(str);

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
  00013	48 89 44 24 40	 mov	 QWORD PTR tv89[rsp], rax
  00018	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR tv90[rsp], -1
$LL4@CmString:
  00021	48 ff 44 24 28	 inc	 QWORD PTR tv90[rsp]
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR tv89[rsp]
  0002b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv90[rsp]
  00030	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00034	75 eb		 jne	 SHORT $LL4@CmString
  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR tv90[rsp]
  0003b	48 ff c0	 inc	 rax
  0003e	89 44 24 24	 mov	 DWORD PTR size$[rsp], eax

; 14   : 	m_nSftIdx = getIndex(size);

  00042	8b 4c 24 24	 mov	 ecx, DWORD PTR size$[rsp]
  00046	e8 00 00 00 00	 call	 ?getIndex@@YAHH@Z	; getIndex
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00050	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 15   : 	m_pValue = gs_pMMgr->newBufByIndex(m_nSftIdx);

  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00058	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?gs_pMMgr@@3PEAVCMemManager@@EA ; gs_pMMgr
  00062	e8 00 00 00 00	 call	 ?newBufByIndex@CMemManager@@QEAAPEADH@Z ; CMemManager::newBufByIndex
  00067	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 16   : 	_tcscpy(m_pValue, str);

  0006f	48 8b 44 24 68	 mov	 rax, QWORD PTR str$[rsp]
  00074	48 89 44 24 38	 mov	 QWORD PTR tv77[rsp], rax
  00079	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	48 89 44 24 30	 mov	 QWORD PTR tv79[rsp], rax
  00086	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  0008b	48 89 44 24 48	 mov	 QWORD PTR tv80[rsp], rax
$LN3@CmString:
  00090	48 8b 44 24 38	 mov	 rax, QWORD PTR tv77[rsp]
  00095	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00098	88 44 24 20	 mov	 BYTE PTR tv81[rsp], al
  0009c	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  000a1	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tv81[rsp]
  000a6	88 08		 mov	 BYTE PTR [rax], cl
  000a8	48 8b 44 24 38	 mov	 rax, QWORD PTR tv77[rsp]
  000ad	48 ff c0	 inc	 rax
  000b0	48 89 44 24 38	 mov	 QWORD PTR tv77[rsp], rax
  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  000ba	48 ff c0	 inc	 rax
  000bd	48 89 44 24 30	 mov	 QWORD PTR tv79[rsp], rax
  000c2	80 7c 24 20 00	 cmp	 BYTE PTR tv81[rsp], 0
  000c7	75 c7		 jne	 SHORT $LN3@CmString

; 17   : }

  000c9	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000ce	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d2	c3		 ret	 0
??0CmString@@QEAA@PEBD@Z ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\src\commstring.cpp
;	COMDAT ??0CmString@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CmString@@QEAA@XZ PROC				; CmString::CmString, COMDAT

; 6    : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 7    : 	m_nSftIdx = 0;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 8    : 	m_pValue = NULL;

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 9    : }

  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00022	c3		 ret	 0
??0CmString@@QEAA@XZ ENDP				; CmString::CmString
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\commemmanager.h
;	COMDAT ?newBufByIndex@CMemManager@@QEAAPEADH@Z
_TEXT	SEGMENT
this$ = 48
nIdx$ = 56
?newBufByIndex@CMemManager@@QEAAPEADH@Z PROC		; CMemManager::newBufByIndex, COMDAT

; 36   : 	inline char *newBufByIndex(int nIdx) { return __newBuf(nIdx); }

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	45 33 c0	 xor	 r8d, r8d
  00010	8b 54 24 38	 mov	 edx, DWORD PTR nIdx$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ?__newBuf@CMemManager@@AEAAPEADH_K@Z ; CMemManager::__newBuf
  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
?newBufByIndex@CMemManager@@QEAAPEADH@Z ENDP		; CMemManager::newBufByIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getSizeByIndex@@YAHH@Z
_TEXT	SEGMENT
nIdx$ = 8
?getSizeByIndex@@YAHH@Z PROC				; getSizeByIndex, COMDAT

; 52   : inline int getSizeByIndex(int nIdx) { return g_nSizeList[nIdx]; }

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 63 44 24 08	 movsxd	 rax, DWORD PTR nIdx$[rsp]
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?g_nSizeList@@3QBHB ; g_nSizeList
  00010	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00013	c3		 ret	 0
?getSizeByIndex@@YAHH@Z ENDP				; getSizeByIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\combufpool.h
;	COMDAT ?getIndex@@YAHH@Z
_TEXT	SEGMENT
tv73 = 0
m$ = 4
tv80 = 8
$S1$ = 16
s$ = 48
?getIndex@@YAHH@Z PROC					; getIndex, COMDAT

; 51   : inline int getIndex(int s) { int m; union { double x; int b[2]; }; x = s; m = (b[1] >> 20) - 1023; return m + ((s&(s - (1 << m))) ? 1 : 0); }

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00008	f2 0f 2a 44 24
	30		 cvtsi2sd xmm0, DWORD PTR s$[rsp]
  0000e	f2 0f 11 44 24
	10		 movsd	 QWORD PTR $S1$[rsp], xmm0
  00014	b8 04 00 00 00	 mov	 eax, 4
  00019	48 6b c0 01	 imul	 rax, rax, 1
  0001d	8b 44 04 10	 mov	 eax, DWORD PTR $S1$[rsp+rax]
  00021	c1 f8 14	 sar	 eax, 20
  00024	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  00029	89 44 24 04	 mov	 DWORD PTR m$[rsp], eax
  0002d	8b 44 24 04	 mov	 eax, DWORD PTR m$[rsp]
  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	89 4c 24 08	 mov	 DWORD PTR tv80[rsp], ecx
  0003a	0f b6 c8	 movzx	 ecx, al
  0003d	8b 44 24 08	 mov	 eax, DWORD PTR tv80[rsp]
  00041	d3 e0		 shl	 eax, cl
  00043	8b 4c 24 30	 mov	 ecx, DWORD PTR s$[rsp]
  00047	2b c8		 sub	 ecx, eax
  00049	8b c1		 mov	 eax, ecx
  0004b	8b 4c 24 30	 mov	 ecx, DWORD PTR s$[rsp]
  0004f	23 c8		 and	 ecx, eax
  00051	8b c1		 mov	 eax, ecx
  00053	85 c0		 test	 eax, eax
  00055	74 09		 je	 SHORT $LN3@getIndex
  00057	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  0005e	eb 07		 jmp	 SHORT $LN4@getIndex
$LN3@getIndex:
  00060	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@getIndex:
  00067	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  0006a	8b 4c 24 04	 mov	 ecx, DWORD PTR m$[rsp]
  0006e	03 c8		 add	 ecx, eax
  00070	8b c1		 mov	 eax, ecx
  00072	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00076	c3		 ret	 0
?getIndex@@YAHH@Z ENDP					; getIndex
_TEXT	ENDS
; Function compile flags: /Odtp
; File e:\infinia-library-3.0\com\include\comtypes.h
;	COMDAT ?ISINCLUDE@@YA_NHH@Z
_TEXT	SEGMENT
i$ = 8
max$ = 16
?ISINCLUDE@@YA_NHH@Z PROC				; ISINCLUDE, COMDAT

; 322  : inline bool ISINCLUDE(int i, int max) { if (0 <= i && i < max) return true; return false; }

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	83 7c 24 08 00	 cmp	 DWORD PTR i$[rsp], 0
  0000d	7c 0e		 jl	 SHORT $LN2@ISINCLUDE
  0000f	8b 44 24 10	 mov	 eax, DWORD PTR max$[rsp]
  00013	39 44 24 08	 cmp	 DWORD PTR i$[rsp], eax
  00017	7d 04		 jge	 SHORT $LN2@ISINCLUDE
  00019	b0 01		 mov	 al, 1
  0001b	eb 02		 jmp	 SHORT $LN1@ISINCLUDE
$LN2@ISINCLUDE:
  0001d	32 c0		 xor	 al, al
$LN1@ISINCLUDE:
  0001f	c3		 ret	 0
?ISINCLUDE@@YA_NHH@Z ENDP				; ISINCLUDE
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\tchar.h
;	COMDAT _tcsncpy
_TEXT	SEGMENT
_Dst$ = 48
_Source$ = 56
_Count$ = 64
_tcsncpy PROC						; COMDAT

; 1542 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1543 : #pragma warning(push)
; 1544 : #pragma warning(disable:4996)
; 1545 :     return (char *)_mbsnbcpy((unsigned char *)_Dst,(const unsigned char *)_Source,_Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Source$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dst$[rsp]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mbsnbcpy

; 1546 : #pragma warning(pop)
; 1547 : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
_tcsncpy ENDP
_TEXT	ENDS
END
